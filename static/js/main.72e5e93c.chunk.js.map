{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/task-list/task-list-header.tsx","../../src/components/task-list/task-list-table.tsx","../../src/components/other/tooltip.tsx","../../src/components/other/scroll.tsx","../../src/components/task-list/task-list.tsx","../../src/components/grid/grid-body.tsx","../../src/components/grid/grid.tsx","../../src/components/calendar/top-part-of-calendar.tsx","../../src/components/calendar/calendar.tsx","../../src/helpers/bar-helper.ts","../../src/components/bar/bar-display.tsx","../../src/components/bar/bar-date-handle.tsx","../../src/components/bar/bar-progress-handle.tsx","../../src/components/bar/bar.tsx","../../src/components/other/arrow.tsx","../../src/helpers/other-helper.ts","../../src/components/gantt/task-gantt-content.tsx","../../src/components/gantt/task-gantt.tsx","../../src/components/gantt/gantt.tsx","components/view-switcher.tsx","App.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","getLocaleMonth","bottomValue","Intl","month","getMonday","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","TaskListHeaderDefault","rowWidth","className","styles","style","fontFamily","fontSize","height","headerHeight","minWidth","marginTop","TaskListTableDefault","locale","dateTimeOptions","weekday","year","tasks","t","rowHeight","key","id","maxWidth","title","name","Tooltip","TooltipContent","tooltipRef","useRef","useState","task","useEffect","tooltipHeight","tooltipY","setRelatedY","svgHeight","setToolWidth","x","y","relatedY","width","toolWidth","ref","StandardTooltipContent","Scroll","onScroll","scrollRef","TaskList","TaskListTable","horizontalContainerRef","headerProps","tableProps","selectedTaskId","setSelectedTask","React","horizontalContainerClass","ganttHeight","GridBody","todayColor","gridRows","rowLines","y1","x2","gridWidth","y2","now","tickX","ticks","today","i","dates","x1","columnWidth","fill","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","topValues","bottomValues","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","getCalendarValuesForOther","length","convertToBarTask","taskXCoordinate","taskYCoordinate","index","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","barCornerRadius","handleWidth","barChildren","xDate","dateByX","newDate","taskDate","handleTaskBySVGMouseEvent","changedTask","selectedTask","isChanged","barWidth","progressByX","svgX","newX1","additionalXValue","startByX","xStep","newX2","endByX","moveByX","newMoveX1","BarDisplay","onMouseDown","textRef","setIsTextInside","ry","rx","isSelected","progressWidth","isTextInside","arrowIndent","BarDateHandle","BarProgressHandle","points","progressPoint","Bar","taskX2","progressX","taskY","point","tabIndex","onKeyDown","e","onEventStart","onMouseEnter","onMouseLeave","onDoubleClick","onFocus","text","hasChild","isDateChangeable","isProgressChangeable","Arrow","indexCompare","taskFrom","taskTo","taskToEndPosition","path","trianglePoints","strokeWidth","d","isKeyboardEvent","event","TaskGanttContent","svg","action","dateDelta","setXStep","timeStep","setBarTasks","taskHeight","barTasks","dependencies","j","dependence","convertToBarTasks","newTasks","failedTask","onTasksChange","setFailedTask","handleMouseMove","a","barEvent","cursor","setBarEvent","handleMouseUp","originalTask","isNotLikeOriginal","setIsMoving","operationSuccess","onDateChange","result","onProgressChange","isMoving","handleBarEventStart","onTaskDelete","console","setInitEventX1Delta","arrowColor","stroke","child","isDisabled","isDelete","TaskGantt","ganttSVGRef","verticalContainerRef","newBarProps","xmlns","gridProps","calendarProps","barProps","Gantt","listCellWidth","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","TaskListHeader","onSelect","wrapperRef","newStartDate","newEndDate","ganttDateRange","ganttTasks","currentDate","seedDates","ganttFullHeight","setGanttTasks","handleWheel","newScrollY","scrollY","setScrollY","setIgnoreScrollEvent","passive","taskId","newSelectedTask","oldSelectedTask","newScrollX","isX","setScrollX","scrollX","scroll","ViewSwitcher","onViewModeChange","onViewListChange","isChecked","onClick","QuarterDay","HalfDay","Day","Week","Month","type","defaultChecked","App","view","setView","setIsChecked","start","getFullYear","getMonth","end","progress","sleep","milliseconds","Promise","resolve","setTimeout","onTaskChange","log","window","confirm","onDblClick","alert","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,oFAAZ,SAAYA,GACVA,2BACAA,qBACAA,YAEAA,cACAA,gBANF,CAAYA,MAAZ,KCWO,IAAMC,EAAY,SAAC,EAAD,KAcvB,OATgB,IAAIC,KAClBC,iBAAsBC,aADR,GAEdD,cAAmBC,cAFL,GAGdD,aAAkBC,YAHJ,GAIdD,cAAmBC,aAJL,GAKdD,gBAAqBC,eALP,GAMdD,gBAAqBC,eANP,GAOdD,qBAA0BC,oBAP5B,KAYWC,EAAc,SAACF,EAAD,GACzB,IAAMG,EAAS,CAAC,cAAD,uCAAf,QAUMC,EAAeC,YACnB,IAAMC,EAAWH,UAAjB,GACA,OAAOA,cAAP,GAWF,OATgB,IAAIJ,KAClBC,EADc,cAEdI,YAA0BJ,EAFZ,WAGdI,aAA2BJ,EAHb,UAIdI,WAAyBJ,EAJX,WAKdI,YAA0BJ,EALZ,aAMdI,cAA4BJ,EANd,aAOdI,cAA4BJ,EAP9B,oBA4EWO,EAAiB,SAACP,EAAD,GAC5B,IAAIQ,EAAc,IAAIC,KAAJ,iBAAgC,CAChDC,MAAO,SADS,OAAlB,GAOA,OAJAF,EAAcA,UACZA,EADYA,GAEZA,KAFFA,sBAWIG,EAAaX,YACjB,IAAMY,EAAMZ,EAAZ,SACMa,EAAOb,eAAwBY,SAArC,GACA,OAAO,IAAIb,KAAKC,UAAhB,KAGWc,EAAwBd,YACnC,IAAMe,EAAU,IAAIhB,KAAKC,EAAzB,WACMgB,GAAaD,WAAD,GAAlB,EACAA,UAAgBA,cAAhBA,GACA,IAAME,EAAgBF,EAAtB,UACAA,gBACA,IAAIA,YACFA,aAAoB,GAAM,EAAIA,EAAJ,SAAD,GAAzBA,GAEF,IAAMG,GACJ,EAAIC,WAAWF,EAAgBF,EAAjB,WADG,SAAnB,WAIA,WAAIG,SACF,cAEA,G,kOCzJSE,EAKR,SAAC,GAAD,IAAC,EAAD,EAAC,eAAD,EAAC,aAAD,EAAC,SAAsCC,EAAvC,EAAuCA,SAC1C,OACE,yBACEC,UAAWC,EACXC,MAAO,CACLC,WADK,EAELC,SAAUA,IAGZ,yBACEJ,UAAWC,EACXC,MAAO,CACLG,OAAQC,EAAe,IAGzB,yBACEN,UAAWC,EACXC,MAAO,CACLK,SAAUR,IAThB,YAcE,yBACEC,UAAWC,EACXC,MAAO,CACLG,OADK,GACGC,EACRE,UAA0B,GAAfF,KAGf,yBACEN,UAAWC,EACXC,MAAO,CACLK,SAAUR,IAxBhB,YA6BE,yBACEC,UAAWC,EACXC,MAAO,CACLG,OADK,GACGC,EACRE,UAA0B,IAAfF,KAGf,yBACEN,UAAWC,EACXC,MAAO,CACLK,SAAUR,IA/CpB,a,0JCLWU,EASR,SAAC,GAAD,IAAC,EAAD,EAAC,YAAD,EAAC,WAAD,EAAC,QAAD,EAAC,aAAD,EAAC,SAAoDC,EAArD,EAAqDA,OAClDC,EAAkB,CACtBC,QADsB,QAEtBC,KAFsB,UAGtBzB,MAHsB,OAItBE,IAAK,WAEP,OACE,yBACEU,UAAWC,EACXC,MAAO,CACLC,WADK,EAELC,SAAUA,IAGXU,EAAA,KAAUC,YACT,OACE,yBACEf,UAAWC,EACXC,MAAO,CAAEG,OAAQW,GACjBC,IAAG,UAAKF,EAAEG,GAAP,QAEH,yBACElB,UAAWC,EACXC,MAAO,CACLK,SADK,EAELY,SAAUpB,GAEZqB,MAAOL,EAAEM,MANX,OAQSN,EAbX,MAeE,yBACEf,UAAWC,EACXC,MAAO,CACLK,SADK,EAELY,SAAUpB,IAJd,OAOSgB,6BAtBX,IAwBE,yBACEf,UAAWC,EACXC,MAAO,CACLK,SADK,EAELY,SAAUpB,IAJd,OAOSgB,2BAhCb,U,qKCXKO,EAAkC,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,YAAD,EAAC,YAAD,EAAC,OAAD,EAAC,WAAD,EAAC,WAO9CC,EAP6C,EAO7CA,eAEMC,EAAaC,iBAAnB,MAT6C,EAUXC,mBAAlC,KAV6C,mBAUvC,EAVuC,KAUvC,EAVuC,OAWbA,oBAAUC,QAAD,GAAzC,GAX6C,mBAWvC,EAXuC,KAWvC,EAXuC,KAwB7C,OAZAC,qBAAU,WACR,GAAIJ,EAAJ,QAAwB,CACtB,IAAMK,EAAgBL,UAAtB,aACMM,EAAWH,UAAjB,EACIE,EAAJ,EACEE,KAAYF,GACHC,IAAJ,GACLC,EAAYC,EAAZD,KAAwBF,GAE1BI,MAAaT,0BAEd,CAACA,EAXJI,IAaE,mCAAeM,EAAGA,EAAGC,EAAGC,EAAUC,MAAOC,EAAWjC,OAAQ,KAC1D,yBAAKkC,IAAKf,EAAYxB,UAAWC,GAC/B,qBACE0B,KAAMA,EACNvB,SAAUA,EACVD,WAAYA,OAOTqC,EAIR,SAAC,GAAD,IAAC,EAAD,EAAC,OAAD,EAAC,SACEtC,EAAQ,CACZE,WACAD,WAHC,EAAmBA,YAKtB,OACE,yBAAKH,UAAWC,EAAgCC,MAAOA,GACrD,uBAAGA,MAAO,CAAEE,SAAUA,EAAW,IAAjC,UACEuB,EAAKN,KADP,aAEKM,kBAFL,YAGEA,mBAAwB,EAH1B,YAIIA,sBAJJ,cAIkCA,gBAJlC,YAKEA,iBAAsB,EALxB,YAMIA,MAPN,gBAQE,uBAAG3B,UAAWC,GAAd,wBACG0B,gBAAqBA,QAAtB,kBADF,YAIA,uBAAG3B,UAAWC,KACT0B,EAAF,8BAAgCA,EAdvC,SAcO,S,kCC3EIc,EAMR,SAAC,GAAD,IAAC,EAAD,EAAC,SAAD,EAAC,cAAD,EAAC,kBAAD,EAAC,aAAsDC,EAAvD,EAAuDA,SACpDC,EAAYlB,iBAAlB,MAQA,OANAG,qBAAU,WACJe,EAAJ,UACEA,yBAED,CAJHf,IAOE,yBACE1B,MAAO,CAAEG,OAAF,EAAuBG,UAAWF,GACzCN,UAAWC,EACXyC,SAAUA,EACVH,IAAKI,GAEL,yBAAKzC,MAAO,CAAEG,OAAF,EAA2BgC,MAAO,OCSvCO,EAAoC,SAAC,GAAD,IAAC,EAAD,EAAC,eAAD,EAAC,aAAD,EAAC,WAAD,EAAC,WAAD,EAAC,YAAD,EAAC,UAAD,EAAC,QAAD,EAAC,iBAAD,EAAC,kBAAD,EAAC,SAAD,EAAC,cAAD,EAAC,2BAAD,EAAC,eAchDC,EAd+C,EAc/CA,cAEMC,EAAyBrB,iBAA/B,MACAG,qBAAU,WACJkB,EAAJ,UACEA,yBAED,CAJHlB,IAMA,IAAMmB,EAAc,CAClBzC,eACAH,aACAC,WACAL,YAEIiD,EAAa,CACjBhC,YACAjB,WACAI,aACAC,WACAU,QACAJ,SACAuC,iBACAC,mBAGF,OACEC,6BACEA,qCADFA,IAEE,yBACEZ,IAAKO,EACL9C,UAAWoD,EACXlD,MAAOmD,EAAc,CAAEhD,OAAQgD,GAAgB,IAE/CF,qCARN,O,yOC7DWG,EAAoC,SAAC,GAAD,MAAC,EAAD,EAAC,QAAD,EAAC,QAAD,EAAC,YAAD,EAAC,YAAD,EAAC,YAMhDC,EAN+C,EAM/CA,WAEIpB,EAAJ,EACMqB,EAAN,GACMC,EAAyB,CAC7B,0BACExC,IAAI,eACJiB,EAAE,IACFwB,GAAI,EACJC,GAAIC,EACJC,GAAI,EACJ7D,UAAWC,KAjBgC,cAoB/C,GApB+C,IAoB/C,2BAA0B,KAA1B,EAA0B,QACxBuD,OACE,0BACEvC,IAAK,MAAQU,EAAKT,GAClBgB,EAAE,IACFC,EAAGA,EACHE,MAAOuB,EACPvD,OAAQW,EACRhB,UAAWC,KAGfwD,OACE,0BACExC,IAAK,UAAYU,EAAKT,GACtBgB,EAAE,IACFwB,GAAIvB,EAAInB,EACR2C,GAAIC,EACJC,GAAI1B,EAAInB,EACRhB,UAAWC,KAGfkC,MAzC6C,8BAgD/C,IAJA,IAAM2B,EAAM,IAAZ,KACIC,EAAJ,EACMC,EAAN,GACIC,EAAoBd,yBAAxB,MACSe,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAMxF,EAAOyF,EAAb,GACAH,OACE,0BACE/C,IAAKvC,YACL0F,GAAIL,EACJL,GAAI,EACJC,GAAII,EACJF,GAAI1B,EACJnC,UAAWC,MAIZiE,MAAUC,EAAVD,QACCxF,YAAiBoF,EADlBI,WAECC,EAAMD,EAANC,cAA0BL,EAF5B,WAICI,OACCA,MAAUC,EADXD,QAECxF,YAAiBoF,EAFlBI,WAGC1F,EAAU,EAERE,YAAiByF,EAAMD,EAANC,GAFV,UAAT3F,0BAIesF,EAZnB,aAcEG,EACE,0BACE/B,EAAG6B,EACH5B,EAAG,EACHE,MAAOgC,EACPhE,OAAQ8B,EACRmC,KAAMf,KAIZQ,KAEF,OACE,uBAAG/D,UAAU,YACX,uBAAGA,UAAU,QADf,GAEE,uBAAGA,UAAU,YAFf,GAGE,uBAAGA,UAAU,SAHf,GAIE,uBAAGA,UAAU,SALjB,KC/FWuE,EAA4BC,YACvC,OACE,uBAAGxE,UAAU,QACXmD,qCAFJ,M,sLCOWsB,EAAsD,SAAC,GAAD,IAAC,EAAD,EAAC,QAAD,EAAC,SAAD,EAAC,SAAD,EAAC,SAAD,EAAC,MAMlEC,EANiE,EAMjEA,MAEA,OACE,uBAAG1E,UAAU,eACX,0BACEoE,GAAIO,EACJjB,GAAIkB,EACJjB,GAAIgB,EACJd,GAAIgB,EACJ7E,UAAWC,EACXgB,IAAK6D,EAAQ,SAEf,0BACE7D,IAAK6D,EAAQ,OACb3C,EAAGuC,EACHxC,EAAG6C,EACH/E,UAAWC,GAdjB,KCDW+E,EAAoC,SAAC,GAAD,IAAC,EAAD,EAAC,QAAD,EAAC,SAAD,EAAC,WAAD,EAAC,eAAD,EAAC,cAAD,EAAC,WAOhD5E,EAP+C,EAO/CA,SAwKI6E,EAAJ,GACIC,EAAJ,GACA,UACE,KAAK3G,EAAL,YAzKgC,WAKhC,IAJA,IAAM0G,EAAN,GACMC,EAAN,GACMC,EAAN,EAAwBd,EAClBe,EAAN,GAAyB9E,EAChB4D,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAMxF,EAAOyF,EAAb,GACMjF,EAAcD,EAAeP,EAAnC,GAWA,GAVAwG,OACE,0BACEjE,IAAK/B,EAAcR,gBACnByD,EAAkB,GAAf7B,EACH4B,EAAGmC,IAAgC,GAAdA,EACrBrE,UAAWC,GALfiF,IAUIhB,OAAWxF,kBAAuByF,EAAMD,EAANC,GAAtC,cAAkE,CAChE,IAAMkB,EAAW3G,gBAAjB,WACAuG,OACE,qBACEhE,IAAKoE,EACLP,MAAOO,EACPV,OAAQN,EAAcH,EACtBU,OAAQ,EACRC,OAAQO,EACRL,MACEI,EAAkBd,EAAlBc,EAAoCzG,aAAkB2F,EAExDK,MAA0B,GAAnBU,MAKf,MAAO,CAACH,EAAR,GAuI8BK,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,KAAK/G,EAAL,WAtI+B,WAK/B,IAJA,IAAM0G,EAAN,GACMC,EAAN,GACIK,EAAJ,EACMH,EAAN,GAAyB9E,EAChB4D,EAAIC,SAAb,EAA+BD,GAA/B,EAAuCA,IAAK,CAC1C,IAAMxF,EAAOyF,EAAb,GACIkB,EAAJ,GACInB,OAAWxF,eAAoByF,EAAMD,EAANC,GAAnC,aAEEkB,EAAW,GAAH,OAAMpG,EAAeP,EAAMgC,GAA3B,aAAuChC,EAA/C2G,gBAGF,IAAMnG,EAAc,IAAH,OAAOM,EAAxB,IAEA0F,OACE,0BACEjE,IAAKvC,YACLyD,EAAkB,GAAf7B,EACH4B,EAAGmC,EAAcH,EACjBlE,UAAWC,GALfiF,IAWA,IAEMhB,IAAMC,SAAV,GACEc,OACE,qBACEhE,IAAKoE,EACLP,MAAOO,EACPV,OAAQN,IAAkBkB,EAAalB,EACvCO,OAAQ,EACRC,OAAQO,EACRL,MAAOV,IAAkBA,IAA2B,GACpDK,MAA0B,GAAnBU,KAIbG,KAEFA,IAEF,MAAO,CAACN,EAAR,GA0F8BO,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,KAAKjH,EAAL,UAzF8B,WAI9B,IAHA,IAAM0G,EAAN,GACMC,EAAN,GACME,EAAN,GAAyB9E,EAChB4D,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAMxF,EAAOyF,EAAb,GACMjF,EAAcR,YAApB,WAYA,GAVAwG,OACE,0BACEjE,IAAKvC,YACLyD,EAAkB,GAAf7B,EACH4B,EAAGmC,IAAgC,GAAdA,EACrBrE,UAAWC,GALfiF,IAWEhB,MAAUC,EAAVD,QACAxF,eAAoByF,EAAMD,EAANC,GAFtB,WAGE,CACA,IAAMkB,EAAWpG,EAAeP,EAAhC,GAEAuG,OACE,qBACEhE,IAAKoE,EAAW3G,gBAChBoG,MAAOO,EACPV,OAAQN,GAAeH,EAAJ,GACnBU,OAAQ,EACRC,OAAQO,EACRL,MAAOV,GAAeH,EAAfG,GAAwB3F,cAA+B,GAC9DgG,MAA0B,GAAnBU,MAKf,MAAO,CAACH,EAAR,GAqD8BQ,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,cApDgC,WAMhC,IALA,IAAMR,EAAN,GACMC,EAAN,GACMlB,EAAQ0B,IAAanH,EAAbmH,UAAd,EACMN,EAAN,GAAyB9E,EAEhB4D,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAMxF,EAAOyF,EAAb,GACMjF,EAAcC,KAAA,iBAA4B,CAC9CwG,KAAM,YADY,OAApB,GAeA,GAXAT,OACE,0BACEjE,IAAKvC,YACLyD,EAAkB,GAAf7B,EACH4B,EAAGmC,EAAcH,EACjBlE,UAAWC,EACXE,WAAYA,GANhB+E,IAWIhB,OAAWxF,cAAmByF,EAAMD,EAANC,GAAlC,UAA0D,CACxD,IAAMkB,EAAW,GAAH,OAAM3G,YAAN,YAAwBO,EAAeP,EAArD,IACAuG,OACE,qBACEhE,IAAKoE,EAAW3G,gBAChBoG,MAAOO,EACPV,OAAQN,IAAkBL,EAAQK,EAClCO,OAAQ,EACRC,OAAQO,EACRL,MAAOV,IAAkBL,IAAsB,GAC/CU,MAA0B,GAAnBU,MAKf,MAAO,CAACH,EAAR,GAe8BW,GAD9B,mBACE,EADF,KACE,EADF,KAIF,OACE,uBAAG5F,UAAU,WAAWI,SAAUA,EAAUD,WAAYA,GACtD,0BACE+B,EAAG,EACHC,EAAG,EACHE,MAAOgC,EAAcF,EAAM0B,OAC3BxF,OAAQC,EACRN,UAAWC,IANf,MADF,IC1JW6F,EAAmB,SAAC,EAAD,yBAe9B,IAAM1B,EAAK2B,EAAgBpE,EAAD,UAA1B,GACMgC,EAAKoC,EAAgBpE,EAAD,QAA1B,GACMQ,EAAI6D,EAAgBC,EAAOjF,EAAjC,GAEMf,EAAS,aACbiG,gBADa,EAEbC,wBAFa,EAGbC,cAHa,EAIbC,sBAJa,GAKV1E,EAAK1B,QAEV,kCAAO,GAAP,IAEEmE,KACAT,KACAxB,IACA8D,QACAK,kBACAC,cACAlG,OARK,EASLmG,YATK,GAULvG,YAIS8F,EAAkB,SAAC,EAAD,OAM7B,IAAME,MACHQ,YACCtC,KADDsC,UAECA,EAFDA,oBAGCtC,KAHF,qBADF,GAgBA,OATUtE,YACPoG,GACEQ,YACCtC,KADDsC,UAECA,yBAFDA,IAGCtC,4BAHF,KADF,GADF,IAYW6B,EAAkB,SAAC,EAAD,KAM7B,OADUC,KAAqBjF,EAAD,GAA9B,GA+EW0F,EAAU,SAAC,EAAD,SAOrB,IAAIC,EAAU,IAAIlI,MAAOyD,EAAD,GAAD,IAAmC0E,EAA1D,WAKA,OAJAD,EAAU,IAAIlI,KACZkI,YADFA,KAEKA,sBAA8BC,EAA/B,uBAUOC,GAA4B,SAAC,EAAD,WAQvC,IAAMC,EAAW,eAAiBC,GAC9BC,GAAJ,EACA,UACE,eACEF,WAtFqB,SAAC5E,EAAD,GACzB,GAAIA,GAAKP,EAAT,GAAkB,OAAlB,IACK,GAAIO,GAAKP,EAAT,GAAkB,OAAlB,EAEH,IAAMsF,EAAWtF,KAAUA,EAA3B,GAEA,OADwB9B,WAAW,KAAEqC,EAAIP,EAAL,IAApC,GAiFyBuF,CAAYC,EAAnCL,GACAE,EAAYF,aAAyBC,EAArCC,SACA,MACF,YACE,IAAMI,EAhEY,SAAClF,EAAD,KAClBA,GAAKP,KAAT,EAAmBA,gBACjBO,EAAIP,KAAJO,EAAcP,eAEhB,IACM0F,EADQxH,YAAYqC,EAAIP,EAAL,IAAzB,GACA,EAEA,OADaA,KAAb,EA0DkB2F,CAASH,EAAMI,EAA7B,GACAT,QACAE,EAAYF,OAAmBC,EAA/BC,MAEEF,QAAoBJ,EAAQ,EAE1BK,EAFyB,GAGzBA,EAHyB,QAA3BD,IAQF,MAEF,UACE,IAAMU,EArEU,SAACtF,EAAD,KAChBA,GAAKP,KAAT,EAAmBA,gBACjBO,EAAIP,KAAJO,EAAcP,eAEhB,IACM0F,EADQxH,YAAYqC,EAAIP,EAAL,IAAzB,GACA,EAEA,OADaA,KAAb,EA+DkB8F,CAAON,EAAMI,EAA3B,GACAT,QACAE,EAAYF,OAAmBC,EAA/BC,MAEEF,MAAkBJ,EAAQ,EAExBK,EAFuB,GAGvBA,EAHuB,MAAzBD,IAQF,MAEF,WAAa,MAzEM,SAAC5E,EAAD,KACrB,IACMmF,EADQxH,YAAYqC,EAAIP,EAAL,IAAzB,GACA,EACMyF,EAAQzF,KAAd,EAEA,MAAO,CAACyF,EADMA,EAAQzF,EAARyF,GAAkBzF,EAAhC,IAsEmC+F,CAC7BP,EADoC,IAAtC,GADW,mBACL,EADK,KACL,EADK,MAMXH,EAAYW,IAAcZ,EAA1BC,MAEEF,QAAoBJ,EAAQ,EAE1BK,EAFyB,GAGzBA,EAHyB,QAA3BD,GAOAA,MAAkBJ,EAAQ,EAExBK,EAFuB,GAGvBA,EAHuB,MAAzBD,GAOAA,OACAA,QAKN,MAAO,CAAEE,YAAWF,gB,yLCpRTc,GAAwC,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,IAAD,EAAC,QAAD,EAAC,SAAD,EAAC,aAAD,EAAC,gBAAD,EAAC,kBAAD,EAAC,OAAD,EAAC,WAAD,EAAC,cAAD,EAAC,OAYpDC,EAZmD,EAYnDA,YAEMC,EAAUrG,iBAAhB,MAdmD,EAeXC,oBAAxC,GAfmD,mBAe7C,EAf6C,KAe7C,EAf6C,KAiBnDE,qBAAU,WACJkG,EAAJ,SACEC,EAAgBD,0BAAhBC,KACD,CAACD,EAHJlG,IAmBA,OACE,uBAAGiG,YAAaA,GACd,0BACE3F,EAAGA,EACHG,MAAOA,EACPF,EAAGA,EACH9B,OAAQA,EACR2H,GAAI1B,EACJ2B,GAAI3B,EACJhC,KAlBG4D,EAAajI,EAAH,wBAAoCA,EAArD,gBAmBID,UAAWE,KAEb,0BACEgC,EAAGA,EACHG,MAAO8F,EACPhG,EAAGA,EACH9B,OAAQA,EACR2H,GAAI1B,EACJ2B,GAAI3B,EACJhC,KAhCG4D,EAAajI,EAAH,sBAAkCA,EAAnD,gBAkCE,0BACEiC,EA3BGkG,EACHlG,EADe,GACXG,EACJH,IAAYmG,GAAZnG,EAFJ,GAE0CmG,EA0BtClG,EAAGA,EAAa,GAAT9B,EACPL,UACEoI,EACIlI,GACkBA,GAExBqC,IAAKuF,GA7BX,KC/CWQ,GAA8C,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,IAAD,EAAC,QAAD,EAAC,SAAD,EAAC,gBAM1DT,EANyD,EAMzDA,YAEA,OACE,0BACE3F,EAAGA,EACHC,EAAGA,EACHE,MAAOA,EACPhC,OAAQA,EACRL,UAAWC,GACX+H,GAAI1B,EACJ2B,GAAI3B,EACJuB,YAAaA,KCrBNU,GAAsD,SAAC,GAAD,IAAC,EAAD,EAAC,cAElEV,EAFiE,EAEjEA,YAEA,OACE,6BACE7H,UAAWC,GACXuI,OAAQC,EACRZ,YAAaA,KCWNa,GAA0B,SAAC,GAAD,IJwGF,EAAD,IA+BH,EAAD,IIvIQ,EAAD,EAAC,OAAD,EAAC,cAAD,EAAC,uBAAD,EAAC,mBAAD,EAAC,eAAD,EAAC,SAOtCR,EAPqC,EAOrCA,WAEMC,GJ+F6B,EI/FQxG,EAAD,GJ+FR,EI/FkBA,EAAV,GJ+FR,EI/F2BA,EAA7D,UJoGQgH,EAAD,KAAP,KInGMF,GJ6HyB,EI5H7BN,EAAgBxG,EADoB,GJ6HR,EI3H5BA,EAFoC,EJ6HR,EI1H5BA,EAHF,OJkIc,CACZiH,EADY,EAEZC,EAFY,EAGZD,EAHY,EAIZC,EAJY,IAMZA,IANF,MAQOC,KAAP,MIpIA,OACE,uBACE9I,UAAWC,GACX8I,SAAU,EACVC,UAAWC,YACT,OAAQA,EAAR,KACE,aACE,GAAcC,EAAa,SAAUvH,EAAvBuH,GAIlBD,qBAEFE,aAAcF,YACZC,EAAa,aAAcvH,EAA3BuH,IAEFE,aAAcH,YACZC,EAAa,aAAcvH,EAA3BuH,IAEFG,cAAeJ,YACbC,EAAa,WAAYvH,EAAzBuH,IAEFI,QAAS,WACPJ,EAAa,SAAbA,KAGF,sBACEhH,EAAGP,EAAKyC,GACRjC,EAAGR,EAAKQ,EACRE,MAAOV,KAAUA,EAAKyC,GACtB/D,OAAQsB,EAAKtB,OACb8H,cAAeA,EACf7B,gBAAiB3E,EAAK2E,gBACtBiD,KAAM5H,EAAKN,KACXmI,SAAU7H,qBAA0B,EACpC0G,YAAaA,EACbpI,OAAQ0B,EAAK1B,OACbiI,WAAYA,EACZL,YAAaoB,YACXQ,GAAoBP,EAAa,OAAQvH,EAAzC8H,MAGJ,uBAAGzJ,UAAU,eACVyJ,GACC,2BAEE,sBACEvH,EAAGP,KAAU,EACbQ,EAAGR,IAAS,EACZU,MAAOV,EAAK4E,YACZlG,OAAQsB,SAAc,EACtB2E,gBAAiB3E,EAAK2E,gBACtBuB,YAAaoB,YACXC,EAAa,QAASvH,EAAtBuH,MAIJ,sBACEhH,EAAGP,KAAUA,EAAVA,YAA6B,EAChCQ,EAAGR,IAAS,EACZU,MAAOV,EAAK4E,YACZlG,OAAQsB,SAAc,EACtB2E,gBAAiB3E,EAAK2E,gBACtBuB,YAAaoB,YACXC,EAAa,MAAOvH,EAApBuH,OAKPQ,GACC,sBACEjB,cAAeA,EACfZ,YAAaoB,YACXC,EAAa,WAAYvH,EAAzBuH,SC1GDS,GAA8B,SAAC,GAAD,IAAC,EAAD,EAAC,WAAD,EAAC,SAAD,EAAC,UAI1CtB,EAJyC,EAIzCA,YAEMuB,EAAeC,QAAiBC,EAAjBD,SAArB,EACME,EAAoBD,IAAWA,SAArC,EAEME,EAAO,KAAH,OAAQH,EAASlG,GAAjB,YAAuBkG,IAAaA,SAAkB,EAAtD,kBACNxB,EADM,kBAELuB,EAAD,EAA6B,EAFvB,kBAGNE,KAAYzB,EAHN,kBAIN0B,EAJM,kBAAV,GAMME,EAAiB,GAAH,OAAMH,EAAO1F,GAAb,YAAmB2F,EAAnB,gBAClBD,KAAY,EADM,YACDC,EAAoB,EADnB,gBAElBD,KAAY,EAFM,YAEDC,EAFnB,GAGA,OACE,uBAAG/J,UAAU,SACX,0BAAMkK,YAAY,MAAMC,EAAGH,EAAM1F,KAAK,SACtC,6BAASkE,OAAQyB,M,SC3BPG,GACdC,GAEA,gBAAQA,MCgDH,IAAMC,GAAoD,SAAC,GAAD,I,EAAC,EAAD,EAAC,QAAD,EAAC,QAAD,EAAC,eAAD,EAAC,YAAD,EAAC,kBAAD,EAAC,cAAD,EAAC,UAAD,EAAC,mBAAD,EAAC,2BAAD,EAAC,qBAAD,EAAC,6BAAD,EAAC,cAAD,EAAC,WAAD,EAAC,MAAD,EAAC,YAAD,EAAC,aAAD,EAAC,cAAD,EAAC,aAAD,EAAC,WAAD,EAAC,kBAAD,EAAC,gBAAD,EAAC,eAAD,EAAC,mBAAD,EAAC,gBAAD,EAAC,aA0BhE/I,EA1B+D,EA0B/DA,eAEMuH,EAAK,OAAGyB,QAAH,IAAGA,GAAH,UAAGA,EAAH,4BAAGA,EAAd,iBA5B+D,EA6B/B7I,mBAAmB,CACjD8I,OAAQ,KA9BqD,mBA6BzD,EA7ByD,KA6BzD,EA7ByD,OAgC/B9I,mBAAhC,IAhC+D,mBAgCzD,EAhCyD,KAgCzD,EAhCyD,OAiC3BA,mBAApC,MAjC+D,mBAiCzD,EAjCyD,KAiCzD,EAjCyD,OAkCrCA,mBAA1B,GAlC+D,mBAkCzD,EAlCyD,KAkCzD,EAlCyD,OAmCfA,mBAAhD,GAnC+D,oBAmCzD,GAnCyD,MAmCzD,GAnCyD,SAoC/BA,oBAAhC,GApC+D,qBAoCzD,GApCyD,MAoCzD,GApCyD,MAuC/DE,qBAAU,WACR,IAAM6I,EACJtG,eACAA,KADAA,UAEAA,4BAFAA,IAGAA,4BAJF,IAMAuG,EADkBC,EAAD,EAAjB,KAEC,CAACtG,EAAaF,EARjBvC,IAWAA,qBAAU,WACRgJ,EPtG6B,SAAC,EAAD,qBAa/B,IAAMH,EACJtG,eACAA,KADAA,UAEAA,4BAFAA,IAGAA,4BAJF,IAKM0G,EAAc7J,EAAD,EAAnB,IAEI8J,EAAWhK,EAAA,KAAU,cACvB,OAAOgF,EAAiB,EAAD,sBAAvB,MA6BF,OAXAgF,EAAWA,EAAA,KAAa,cAEtB,IADA,IAAMC,EAAepJ,gBAArB,GADsB,WAEbqJ,GACP,IAAMC,EAAaH,aACjBhG,YAAK,OAAIA,OAAaiG,EADxB,OAGA,IAAIE,GAAmBH,0BAJhBE,EAAT,EAAgBA,EAAID,EAApB,OAAyCC,IAAK,EAArCA,GAMT,YOwDEE,CAAkB,EAAD,kBADnBN,MAeC,CAAC,EAAD,kBAhBHhJ,IA+BAA,qBAAU,WACR,KAAgB,CACd,IAAMuJ,EAAWL,OAAa/J,YAAC,OAC7BA,OAASqK,EAATrK,KADF,KAGAsK,KACAC,WAED,CAACF,EARJxJ,IAUAA,qBAAU,WACR,IAAM2J,EAAe,uCAAG,qCAAAC,EAAA,yDACjBC,EAAD,iBAAmC,OAAClB,QAAD,IAACA,OAAD,EAACA,EAAxC,SADsB,iDAEtBF,mBAEAvB,IAAUuB,EAAVvB,QACM4C,EAAS5C,yBACbyB,QADazB,IACbyB,GADazB,UACbyB,UADazB,mCACbyB,EADF,WALsB,EASa1D,GACjC6E,EAD0D,EAE1DD,EAF0D,OAG1DA,EAH0D,gBAA5D,IAAM,EATgB,EAShB,UAAa3E,EATG,EASHA,YAQnB,IACE8D,EACEE,OAAa/J,YAAC,OAAKA,OAAS+F,EAAT/F,KADrB6J,MAGAe,EAAY,8BAAD,IAAgB7E,YAAaA,MArBpB,2CAAH,sDAyBf8E,EAAa,uCAAG,mDAAAJ,EAAA,yDACd,EAAN,EAAQ1E,YAAF,EAAN,EAAM,OAAqC+E,EAA3C,EAA2CA,aAEtC9E,GAAD,IAA2B,OAACwD,QAAD,IAACA,OAAD,EAACA,EAA5B,UAAJ,EAHoB,oDAIpBF,mBAEAvB,IAAUuB,EAAVvB,QACM4C,EAAS5C,yBACbyB,QADazB,IACbyB,GADazB,UACbyB,UADazB,mCACbyB,EADF,WAPoB,EAWI1D,GACtB6E,EAD+C,UAAjD,IAAQ5E,EAXY,EAWZA,YASFgF,EACJD,UAAuB/E,EAAvB+E,OACAA,QAAqB/E,EADrB+E,KAEAA,aAA0B/E,EAH5B,SAMAyD,6CACAA,2CACAoB,EAAY,CAAEnB,OAAQ,KACtBuB,OACMZ,EAAWL,OAAa/J,YAAC,OAC7BA,OAAS+F,EAAT/F,KADF,KAGAsK,KAGIW,GAAJ,EAEGxB,oBAAqBA,GAAtB,UAA0CA,IAA1C,IADF,EArCoB,4CA2CKyB,EAArB,GA3CgB,aA4ChB,KADMC,EA3CU,UA6CdF,KA7Cc,mDAgDhBA,KAhDgB,oCAkDTG,IAAJ,EAlDa,4CAoDKA,EAArB,GApDgB,aAqDhB,KADMD,EApDU,UAsDdF,KAtDc,mDAyDhBA,KAzDgB,QA8DpB,GACEV,KA/DkB,mEAAH,sDAoEhBc,IACAX,2BACCA,UADDA,UAECA,UAHF,aAIEA,YAJF,OAKAlB,QALA,IAKAA,OALA,EAKAA,EANF,WAQEA,0CACAA,wCACAwB,UAED,CAAC,EAAD,eAzGHnK,KAwHA,IAAMyK,GAAmB,uCAAG,uCAAAb,EAAA,yDAK1B,EAL0B,gBAMxB,WAAIhB,GACFtH,EAAgBvB,EAAhBuB,IAPsB,2BAWjBkH,GAAJ,GAXqB,oBAYxB,WAAII,EAZoB,qBAatB,EAbsB,2CAeG8B,EAArB,GAfkB,aAgBdJ,KADEA,EAfY,SAgBlB,IACQf,EAAWL,UAAgB/J,YAAC,OAAIA,OAASY,EAA/C,MACA0J,KACAnI,OAnBgB,kDAsBlBqJ,wCAtBkB,mCA4BrB,eAAI/B,EA5BiB,iBA6BnBiB,EAAL,QACEE,EAAY,CACVnB,SACA1D,YAFU,EAGV+E,aAAclK,IAjCM,2BAoCnB,eAAI6I,EApCe,iBAqCxB,eAAIiB,UACFE,EAAY,CAAEnB,OAAQ,KAtCA,2BAwCnB,aAAIA,EAxCe,iBAyCxB,GAAmBnB,EAAnB,GAzCwB,2BA4CrB,SAAImB,EA5CiB,qBA6CpB,OAACD,QAAD,IAACA,OAAD,EAACA,EAAD,UAAJ,EA7CwB,mDA8CxBzB,IAAUuB,EAAVvB,QACM4C,EAAS5C,4BACbyB,UADazB,mCACbyB,EADF,WAGAiC,GAAoBd,IAAW/J,EAA/B6K,IACAb,EAAY,CACVnB,SACA1D,YAFU,EAGV+E,aAAclK,IAtDQ,wBAyDxBgK,EAAY,CACVnB,SACA1D,YAFU,EAGV+E,aAAclK,IA5DQ,0DAAH,0DAiEzB,OACE,uBAAG3B,UAAU,WACX,uBAAGA,UAAU,SAASsE,KAAMmI,EAAYC,OAAQD,GAC7C3B,EAAA,KAAanJ,YACZ,OAAOA,EAAA,iBAAqBgL,YAC1B,OACE,sBACE1L,IAAG,qBAAgBU,EAAKT,GAArB,eAA8B4J,KAAgB5J,IACjD2I,SAAUlI,EACVmI,OAAQgB,EAAS6B,GACjB3L,UAAWA,EACXqH,YAAaA,WAMvB,uBAAGrI,UAAU,MAAMG,WAAYA,EAAYC,SAAUA,GAClD0K,EAAA,KAAanJ,YACZ,OACE,sBACEA,KAAMA,EACN0G,YAAaA,EACbqB,uBAAsB,IAAuB/H,EAAKiL,WAClDnD,mBAAkB,IAAmB9H,EAAKiL,WAC1CC,UAAWlL,EAAKiL,WAChB1D,aAAcmD,GACdpL,IAAKU,EAAKT,GACVgH,WAAYvG,OAAYoF,QAKhC,uBAAG/G,UAAU,WACVyL,eACC,qBACEvJ,EAAGuJ,mBAAsD,GAAdpD,EAC3CrH,UAAWA,EACXgB,UAAWA,EACXL,KAAM8J,EAAS3E,YACf3G,WAAYA,EACZC,SAAUA,EACVmB,eAAgBA,OCrWfuL,GAAsC,SAAC,GAAD,IAAC,EAAD,EAAC,YAAD,EAAC,gBAAD,EAAC,WAAD,EAAC,cAAD,EAAC,UAAD,EAAC,QAOlDpK,EAPiD,EAOjDA,SAEMqK,EAActL,iBAApB,MACMqB,EAAyBrB,iBAA/B,MACMuL,EAAuBvL,iBAA7B,MACMwL,EAAc,8BAAH,IAAkB1C,IAAKwC,IAcxC,OAZAnL,qBAAU,WACJkB,EAAJ,UACEA,yBAED,CAJHlB,IAMAA,qBAAU,WACJoL,EAAJ,UACEA,0BAED,CAJHpL,IAOE,yBACE5B,UAAWC,EACXsC,IAAKyK,EACLtK,SAAUA,GAEV,yBACEwK,MAAM,6BACN7K,MAAO8K,EAAUvJ,UACjBvD,OAAQ+M,EAAc9M,aACtBH,WAAYkN,EAASlN,YAErBgD,qCAXJ,KAaE,yBACEZ,IAAKO,EACL9C,UAAWC,EACXC,MACEmD,EACI,CAAEhD,OAAF,EAAuBgC,MAAO8K,EAAUvJ,WACxC,CAAEvB,MAAO8K,EAAUvJ,YAGzB,yBACEsJ,MAAM,6BACN7K,MAAO8K,EAAUvJ,UACjBvD,OAAQgN,YAAqBA,QAAexH,OAC5C1F,WAAYkN,EAASlN,WACrBoC,IAAKwK,GAEL5J,qCAPF,IAQEA,sCA/BR,QC3BWmK,GAA+B,SAAC,GAAD,IAAC,EAAD,EAAC,MAAD,IAE1ChN,oBAF0C,MAAC,GAAD,MAG1C+D,mBAH0C,MAAC,GAAD,MAI1CkJ,qBAJ0C,MAAC,QAAD,MAK1CvM,iBAL0C,MAAC,GAAD,MAM1CqC,mBAN0C,MAAC,EAAD,MAO1CqC,gBAP0C,MAO/BnH,EAPgC,IAAD,MAQ1CmC,cAR0C,MAAC,QAAD,MAS1C8M,eAT0C,MAAC,GAAD,MAU1ClH,uBAV0C,MAAC,EAAD,MAW1CmH,wBAX0C,MAAC,UAAD,MAY1CC,gCAZ0C,MAAC,UAAD,MAa1CC,0BAb0C,MAAC,UAAD,MAc1CC,kCAd0C,MAAC,UAAD,MAe1CrH,mBAf0C,MAAC,EAAD,MAgB1CoE,gBAhB0C,MAAC,IAAD,MAiB1C8B,kBAjB0C,MAAC,OAAD,MAkB1CtM,kBAlB0C,MAAC,kFAAD,MAmB1CC,gBAnB0C,MAAC,OAAD,MAoB1CiI,oBApB0C,MAAC,GAAD,OAqB1C9E,mBArB0C,OAAC,2BAAD,QAsB1ChC,uBAtB0C,OAAC,EAAD,QAuB1CsM,uBAvB0C,OAAC,EAAD,QAwB1ChL,sBAxB0C,OAAC,EAAD,GAAC,GAAD,EAAC,gBAAD,EAAC,oBAAD,EAAC,iBAAD,EAAC,aA6B3CiL,GA7B0C,EA6B1CA,SAEMC,GAAatM,iBAAnB,MA/B0C,GAgCNC,mBAApC,GAhC0C,qBAgCpC,GAhCoC,MAgCpC,GAhCoC,SAiCFA,mBAAxC,IAjC0C,qBAiCpC,GAjCoC,MAiCpC,GAjCoC,SAkCZA,mBAA9B,GAlC0C,qBAkCpC,GAlCoC,MAkCpC,GAlCoC,SAmCZA,mBAA9B,GAnC0C,qBAmCpC,GAnCoC,MAmCpC,GAnCoC,SAoCQA,oBAAlD,GApC0C,qBAoCpC,GApCoC,MAoCpC,GApCoC,SnByCd,SAACZ,EAAD,GAC5B,IAD4B,EACxBkN,EAAqBlN,KAAzB,MACImN,EAAmBnN,KAAvB,IAF4B,cAG5B,GAH4B,IAG5B,2BAA0B,KAA1B,EAA0B,QACpBa,QAAJ,IACEqM,EAAerM,EAAfqM,OAEErM,MAAJ,IACEsM,EAAatM,EAAbsM,MARwB,8BAW5B,UACE,KAAK1P,EAAL,MACEyP,EAAexP,EAAUwP,GAAD,EAAxBA,SACAA,EAAepP,EAAYoP,EAA3BA,SACAC,EAAazP,EAAUyP,EAAY,EAAnCA,QACAA,EAAarP,EAAYqP,EAAzBA,QACA,MACF,KAAK1P,EAAL,KACEyP,EAAepP,EAAYoP,EAA3BA,OACAC,EAAarP,EAAYqP,EAAzBA,OACAD,EAAexP,EAAUa,EAAD,MAAxB2O,OACAC,EAAazP,EAAUyP,EAAY,IAAnCA,SACA,MACF,QACED,EAAepP,EAAYoP,EAA3BA,OACAC,EAAarP,EAAYqP,EAAzBA,OACAD,EAAexP,EAAUwP,GAAD,EAAxBA,OACAC,EAAazP,EAAUyP,EAAY,GAAnCA,OAGJ,MAAO,CAACD,EAAR,GmBnC6BE,CAAeC,GAA5C,GArC0C,qBAsCpChK,GnBqCiB,SAAC,EAAD,KAOvB,IAFA,IAAIiK,EAAoB,IAAI3P,KAA5B,GACM0F,EAAgB,CAAtB,GACOiK,EAAP,GAA8B,CAC5B,UACE,KAAK7P,EAAL,MACE6P,EAAc5P,EAAU4P,EAAa,EAArCA,SACA,MACF,KAAK7P,EAAL,KACE6P,EAAc5P,EAAU4P,EAAa,EAArCA,OACA,MACF,KAAK7P,EAAL,IACE6P,EAAc5P,EAAU4P,EAAa,EAArCA,OACA,MACF,KAAK7P,EAAL,QACE6P,EAAc5P,EAAU4P,EAAa,GAArCA,QACA,MACF,KAAK7P,EAAL,WACE6P,EAAc5P,EAAU4P,EAAa,EAArCA,QAGJjK,UAEF,SmBhEckK,CAtC4B,YAsC1C,GAEMrM,GAAYhB,EAAYF,EAA9B,OACM8C,GAAYO,UAAlB,EACMmK,GAAkBH,UAAxB,EAEAvM,qBAAU,WACR2M,QACC,CAFH3M,IAKAA,qBAAU,WACR,IAAM4M,EAAenE,YACnBA,mBACA,IAAMoE,EAAaC,GAAUrE,EAA7B,OAEEsE,GADEF,EAAJ,EACEE,EACSF,EAAaH,GAAjB,EACMA,GAAXK,EAEAA,GAEFC,QAaF,OAREb,eAEA1K,EAAc8K,UAHhB,GAKEJ,sCAA0D,CACxDc,SAAS,IAGN,WACDd,GAAJ,SACEA,6CAGH,CAACA,GAAD,gBA7BHnM,IA+BA,IA4FMuL,GAAuB,CAC3B9I,YAD2B,EAE3BT,aACA9C,MAH2B,GAI3BE,UAJ2B,EAK3BmD,SACAZ,eAEI6J,GAA+B,CACnCjJ,SACAzD,OAFmC,EAGnCgF,SAHmC,EAInCpF,aAJmC,EAKnC+D,YALmC,EAMnClE,WANmC,EAOnCC,YAEIiN,GAAkC,CACtCvM,MADsC,GAEtCiG,gBACA7D,gBA1C0B4L,YAC1B,IAAMC,EAAkBZ,SAAgBpN,YAAC,OAAIA,OAA7C,KACA,KAAqB,CACnB,MAAc,CACZ,IAAMiO,EAAkBb,SAAgBpN,YAAC,OAAIA,OAA7C,MACA,GACE+M,GAASkB,GAATlB,GAEFA,GAASiB,GAATjB,GAEF5K,GAAgB6L,EAAhB7L,QACK,CACL,MAAc,CACZ,IAAM8L,EAAkBb,SAAgBpN,YAAC,OAAIA,OAA7C,MACA,GACE+M,GAAS,GAATA,GAGJ5K,SAyBFlC,UAJsC,EAKtCsF,gBALsC,EAMtCjC,YANsC,EAOtCF,SACAqJ,QARsC,EAStCC,iBATsC,EAUtCC,yBAVsC,EAWtCC,mBAXsC,EAYtCC,2BAZsC,EAatCrH,YAbsC,EActCkG,WAdsC,EAetC9B,SAfsC,EAgBtCxK,WAhBsC,EAiBtCC,SAjBsC,EAkBtCiI,YAlBsC,GAmBtCrG,aACAqJ,cAlEyBvK,YACzByN,OAkEAtC,gBACAE,oBACA9C,iBACAiD,gBACA/K,mBAGIyB,GAA4B,CAChChC,UADgC,EAEhCjB,SAFgC,EAGhCI,WAHgC,EAIhCC,SAJgC,EAKhCU,MALgC,GAMhCJ,OANgC,EAOhCJ,aAPgC,EAQhCoO,WACArL,YATgC,EAUhCD,yBAA0BnD,EAC1BgD,eAXgC,GAYhCC,mBACA2K,eAbgC,GAchChL,kBAGF,OACE,yBACE7C,UAAWC,EACX+I,UA5ImBqB,YACrBA,mBACA,IAAIoE,EAAJ,GACIQ,EAAJ,GACIC,GAAJ,EACA,OAAQ7E,EAAR,KACE,WACA,gBACEoE,KACAS,KACA,MACF,SACA,cACET,KACAS,KACA,MACF,WACA,gBACED,KACA,MACF,YACA,iBACEA,KAGJ,EAEIE,GADEF,EAAJ,EACEE,EACSF,EAAJ,GACLE,GAEAA,GAIAR,GADEF,EAAJ,EACEE,EACSF,EAAaH,GAAjB,EACMA,GAAXK,EAEAA,GAGJC,QAmGE7F,SAAU,EACVxG,IAAKwL,IAEJR,GAAiBpK,qCANpB,KAOE,sBACEgK,UAAWA,GACXC,cAAeA,GACfC,SAAUA,GACVhK,YAAaA,EACbqL,QAASA,GACTU,QAASA,GACT1M,SAlKiB2H,YACjB+E,KAAY/E,gBAAZ+E,YAAJ,IACED,GAAW9E,gBAAX8E,YAEFP,UAgKE,qBACEN,gBAAiBA,GACjBjL,YAAaA,EACb/C,aAAcA,EACd+O,OAAQX,GACRhM,SAhLiB2H,YACjBqE,KAAYrE,gBAAZqE,WAAJ,IACEC,GAAWtE,gBAAXsE,WAEFC,YC1FSU,GAA6C,SAAC,GAIpD,IAHLC,EAGI,EAHJA,iBACAC,EAEI,EAFJA,iBACAC,EACI,EADJA,UAEA,OACE,yBAAKzP,UAAU,iBACb,4BACEA,UAAU,SACV0P,QAAS,kBAAMH,EAAiBhR,EAASoR,cAF3C,kBAMA,4BACE3P,UAAU,SACV0P,QAAS,kBAAMH,EAAiBhR,EAASqR,WAF3C,eAMA,4BAAQ5P,UAAU,SAAS0P,QAAS,kBAAMH,EAAiBhR,EAASsR,OAApE,OAGA,4BACE7P,UAAU,SACV0P,QAAS,kBAAMH,EAAiBhR,EAASuR,QAF3C,QAMA,4BACE9P,UAAU,SACV0P,QAAS,kBAAMH,EAAiBhR,EAASwR,SAF3C,SAOA,yBAAK/P,UAAU,UACb,2BAAOA,UAAU,iBACf,2BACEgQ,KAAK,WACLC,eAAgBR,EAChBC,QAAS,kBAAMF,GAAkBC,MAEnC,0BAAMzP,UAAU,YAPpB,oBCmGSkQ,GAxIH,WACV,IAAM9B,EAAc,IAAI3P,KADR,EAEQ0E,IAAMzB,SAAmBnD,EAASsR,KAF1C,mBAETM,EAFS,KAEHC,EAFG,OAGkBjN,IAAMzB,UAAS,GAHjC,mBAGT+N,EAHS,KAGEY,EAHF,KAIZhM,EAAc,GACd8L,IAAS5R,EAASwR,MACpB1L,EAAc,IACL8L,IAAS5R,EAASuR,OAC3BzL,EAAc,KAEhB,IAAIvD,EAAgB,CAClB,CACEwP,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEC,IAAK,IAAIhS,KACP2P,EAAYmC,cACZnC,EAAYoC,WACZ,EACA,GACA,IAEFnP,KAAM,OACNH,GAAI,SACJwP,SAAU,IAEZ,CACEJ,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEnP,KAAM,WACNH,GAAI,SACJwP,SAAU,GACV3F,aAAc,CAAC,WAEjB,CACEuF,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEnP,KAAM,uBACNH,GAAI,SACJwP,SAAU,GACV3F,aAAc,CAAC,WAEjB,CACEuF,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEnP,KAAM,aACNH,GAAI,SACJwP,SAAU,EACV3F,aAAc,CAAC,WAEjB,CACEuF,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,IACjEnP,KAAM,SACNH,GAAI,SACJwP,SAAU,GACV3F,aAAc,CAAC,WAEjB,CACEuF,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,IACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,IACjEnP,KAAM,sBACNH,GAAI,SACJwP,SAAUtC,EAAYoC,WACtBzF,aAAc,CAAC,UACf9K,OAAQ,CAAEmG,cAAe,UAAWC,sBAAuB,YAE7D,CACEiK,MAAO,IAAI7R,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,IACnEC,IAAK,IAAIhS,KAAK2P,EAAYmC,cAAenC,EAAYoC,WAAY,IACjEnP,KAAM,UACNH,GAAI,SACJwP,SAAU,EACV9D,YAAY,IAIV+D,EAAQ,SAACC,GACb,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,OAEhDI,EAAe,SAACrP,GAClB4K,QAAQ0E,IAAI,qBAAuBtP,EAAKT,KAGtCoL,EAAe,SAAC3K,GAElB,OADauP,OAAOC,QAAQ,sBAAwBxP,EAAKN,KAAO,OAI9D8K,EAAgB,uCAAG,WAAOxK,GAAP,SAAA6J,EAAA,sEACfmF,EAAM,KADS,OAErBpE,QAAQ0E,IAAI,yBAA2BtP,EAAKT,IAFvB,2CAAH,sDAKhBkQ,EAAa,SAACzP,GAChB0P,MAAM,4BAA8B1P,EAAKT,KAGvC4M,EAAW,SAACnM,EAAYuG,GAC1BqE,QAAQ0E,IAAItP,EAAKN,KAAO,SAAW6G,EAAa,WAAa,gBAG/D,OACE,6BACE,kBAAC,GAAD,CACEqH,iBAAkB,SAAA7J,GAAQ,OAAI0K,EAAQ1K,IACtC8J,iBAAkBa,EAClBZ,UAAWA,IAEb,2DACA,kBAAC,GAAD,CACE3O,MAAOA,EACP4E,SAAUyK,EACVlE,aAAc+E,EACd1E,aAAcA,EACdH,iBAAkBA,EAClB9C,cAAe+H,EACftD,SAAUA,EACVP,cAAekC,EAAY,QAAU,GACrCpL,YAAaA,IAEf,yDACA,kBAAC,GAAD,CACEvD,MAAOA,EACP4E,SAAUyK,EACVlE,aAAc+E,EACd1E,aAAcA,EACdH,iBAAkBA,EAClB9C,cAAe+H,EACftD,SAAUA,EACVP,cAAekC,EAAY,QAAU,GACrCpM,YAAa,IACbgB,YAAaA,MClIrBiN,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.72e5e93c.chunk.js","sourcesContent":["export enum ViewMode {\n  QuarterDay = \"Quarter Day\",\n  HalfDay = \"Half Day\",\n  Day = \"Day\",\n  /** ISO-8601 week */\n  Week = \"Week\",\n  Month = \"Month\",\n}\nexport interface Task {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  /**\n   * From 0 to 100\n   */\n  progress: number;\n  styles?: {\n    backgroundColor?: string;\n    backgroundSelectedColor?: string;\n    progressColor?: string;\n    progressSelectedColor?: string;\n  };\n  isDisabled?: boolean;\n  dependencies?: string[];\n}\n\nexport interface EventOption {\n  /**\n   * Time step value for date changes.\n   */\n  timeStep?: number;\n  /**\n   * Invokes on bar select on unselect.\n   */\n  onSelect?: (task: Task, isSelected: boolean) => void;\n  /**\n   * Invokes on bar double click.\n   */\n  onDoubleClick?: (task: Task) => void;\n  /**\n   * Invokes on end and start time change. Chart undoes operation if method return false or error.\n   */\n  onDateChange?: (\n    task: Task\n  ) => void | boolean | Promise<void> | Promise<boolean>;\n  /**\n   * Invokes on progress change. Chart undoes operation if method return false or error.\n   */\n  onProgressChange?: (\n    task: Task\n  ) => void | boolean | Promise<void> | Promise<boolean>;\n  /**\n   * Invokes on delete selected task. Chart undoes operation if method return false or error.\n   */\n  onTaskDelete?: (\n    task: Task\n  ) => void | boolean | Promise<void> | Promise<boolean>;\n}\n\nexport interface DisplayOption {\n  viewMode?: ViewMode;\n  /**\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\n   */\n  locale?: string;\n}\n\nexport interface StylingOption {\n  headerHeight?: number;\n  columnWidth?: number;\n  listCellWidth?: string;\n  rowHeight?: number;\n  ganttHeight?: number;\n  barCornerRadius?: number;\n  handleWidth?: number;\n  fontFamily?: string;\n  fontSize?: string;\n  /**\n   * How many of row width can be taken by task.\n   * From 0 to 100\n   */\n  barFill?: number;\n  barProgressColor?: string;\n  barProgressSelectedColor?: string;\n  barBackgroundColor?: string;\n  barBackgroundSelectedColor?: string;\n  arrowColor?: string;\n  arrowIndent?: number;\n  todayColor?: string;\n  TooltipContent?: React.FC<{\n    task: Task;\n    fontSize: string;\n    fontFamily: string;\n  }>;\n  TaskListHeader?: React.FC<{\n    headerHeight: number;\n    rowWidth: string;\n    fontFamily: string;\n    fontSize: string;\n  }>;\n  TaskListTable?: React.FC<{\n    rowHeight: number;\n    rowWidth: string;\n    fontFamily: string;\n    fontSize: string;\n    locale: string;\n    tasks: Task[];\n    selectedTaskId: string;\n    /**\n     * Sets selected task by id\n     */\n    setSelectedTask: (taskId: string) => void;\n  }>;\n}\n\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\n  tasks: Task[];\n}\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].end;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newStartDate = startOfDate(newStartDate, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-header.module.css\";\r\n\r\nexport const TaskListHeaderDefault: React.FC<{\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n}> = ({ headerHeight, fontFamily, fontSize, rowWidth }) => {\r\n  return (\r\n    <div\r\n      className={styles.ganttTable}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      <div\r\n        className={styles.ganttTable_Header}\r\n        style={{\r\n          height: headerHeight - 2,\r\n        }}\r\n      >\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;Name\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.2,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;From\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.25,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;To\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-table.module.css\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport const TaskListTableDefault: React.FC<{\r\n  rowHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  locale: string;\r\n  tasks: Task[];\r\n  selectedTaskId: string;\r\n  setSelectedTask: (taskId: string) => void;\r\n}> = ({ rowHeight, rowWidth, tasks, fontFamily, fontSize, locale }) => {\r\n  const dateTimeOptions = {\r\n    weekday: \"short\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  return (\r\n    <div\r\n      className={styles.taskListWrapper}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      {tasks.map(t => {\r\n        return (\r\n          <div\r\n            className={styles.taskListTableRow}\r\n            style={{ height: rowHeight }}\r\n            key={`${t.id}row`}\r\n          >\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n              title={t.name}\r\n            >\r\n              &nbsp;{t.name}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.start.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.end.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  x: number;\r\n  svgHeight: number;\r\n  rowHeight: number;\r\n  task: BarTask;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  x,\r\n  rowHeight,\r\n  svgHeight,\r\n  task,\r\n  fontSize,\r\n  fontFamily,\r\n  TooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState((task.index - 1) * rowHeight);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const tooltipHeight = tooltipRef.current.offsetHeight;\r\n      const tooltipY = task.index * rowHeight + rowHeight;\r\n      if (tooltipHeight > tooltipY) {\r\n        setRelatedY(tooltipHeight * 0.5);\r\n      } else if (tooltipY + tooltipHeight > svgHeight) {\r\n        setRelatedY(svgHeight - tooltipHeight * 1.05);\r\n      }\r\n      setToolWidth(tooltipRef.current.scrollWidth * 1.1);\r\n    }\r\n  }, [tooltipRef, task]);\r\n  return (\r\n    <foreignObject x={x} y={relatedY} width={toolWidth} height={1000}>\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        <TooltipContent\r\n          task={task}\r\n          fontSize={fontSize}\r\n          fontFamily={fontFamily}\r\n        />\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nexport const StandardTooltipContent: React.FC<{\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n}> = ({ task, fontSize, fontFamily }) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n        (task.end.getTime() - task.start.getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n      )} day(s)`}</p>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>\r\n        {!!task.progress && `Progress: ${task.progress} %`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport styles from \"./scroll.module.css\";\r\n\r\nexport const Scroll: React.FC<{\r\n  scroll: number;\r\n  ganttHeight: number;\r\n  ganttFullHeight: number;\r\n  headerHeight: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n}> = ({ scroll, ganttHeight, ganttFullHeight, headerHeight, onScroll }) => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scroll;\r\n    }\r\n  }, [scroll]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: ganttHeight, marginTop: headerHeight }}\r\n      className={styles.scroll}\r\n      onScroll={onScroll}\r\n      ref={scrollRef}\r\n    >\r\n      <div style={{ height: ganttFullHeight, width: 1 }} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport type TaskListProps = {\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  rowHeight: number;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  locale: string;\r\n  tasks: Task[];\r\n  horizontalContainerClass?: string;\r\n  selectedTaskId: string;\r\n  setSelectedTask: (taskId: string) => void;\r\n  TaskListHeader: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n    selectedTaskId: string;\r\n    setSelectedTask: (taskId: string) => void;\r\n  }>;\r\n};\r\n\r\nexport const TaskList: React.FC<TaskListProps> = ({\r\n  headerHeight,\r\n  fontFamily,\r\n  fontSize,\r\n  rowWidth,\r\n  rowHeight,\r\n  scrollY,\r\n  tasks,\r\n  selectedTaskId,\r\n  setSelectedTask,\r\n  locale,\r\n  ganttHeight,\r\n  horizontalContainerClass,\r\n  TaskListHeader,\r\n  TaskListTable,\r\n}) => {\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  const headerProps = {\r\n    headerHeight,\r\n    fontFamily,\r\n    fontSize,\r\n    rowWidth,\r\n  };\r\n  const tableProps = {\r\n    rowHeight,\r\n    rowWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks,\r\n    locale,\r\n    selectedTaskId,\r\n    setSelectedTask,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TaskListHeader {...headerProps} />\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={horizontalContainerClass}\r\n        style={ganttHeight ? { height: ganttHeight } : {}}\r\n      >\r\n        <TaskListTable {...tableProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  gridWidth: number;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  gridWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = 0;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [\r\n    <line\r\n      key=\"RowLineFirst\"\r\n      x=\"0\"\r\n      y1={0}\r\n      x2={gridWidth}\r\n      y2={0}\r\n      className={styles.gridRowLine}\r\n    />,\r\n  ];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={gridWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={gridWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={0}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\n\r\nexport type GridProps = GridBodyProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dates: Date[];\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dates,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getFullYear() !== dates[i - 1].getFullYear()) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 1;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      <rect\r\n        x={0}\r\n        y={0}\r\n        width={columnWidth * dates.length}\r\n        height={headerHeight}\r\n        className={styles.calendarHeader}\r\n      />\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask } from \"../types/bar-task\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  barFill: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n) => {\r\n  const dateDelta =\r\n    dates[1].getTime() -\r\n    dates[0].getTime() -\r\n    dates[1].getTimezoneOffset() * 60 * 1000 +\r\n    dates[0].getTimezoneOffset() * 60 * 1000;\r\n  const taskHeight = (rowHeight * barFill) / 100;\r\n\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  // set dependencies\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nexport const convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nexport const taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nexport const taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number\r\n) => {\r\n  const y = index * rowHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nexport const startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nexport const dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport type BarMoveAction = \"progress\" | \"end\" | \"start\" | \"move\" | \"\";\r\n\r\n/**\r\n * Method handles event in real time(mousemove) and on finish(mouseup)\r\n */\r\nexport const handleTaskBySVGMouseEvent = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n) => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"progress\":\r\n      changedTask.progress = progressByX(svgX, selectedTask);\r\n      isChanged = changedTask.progress !== selectedTask.progress;\r\n      break;\r\n    case \"start\": {\r\n      const newX1 = startByX(svgX, xStep, selectedTask);\r\n      changedTask.x1 = newX1;\r\n      isChanged = changedTask.x1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"end\": {\r\n      const newX2 = endByX(svgX, xStep, selectedTask);\r\n      changedTask.x2 = newX2;\r\n      isChanged = changedTask.x2 !== selectedTask.x2;\r\n      if (isChanged) {\r\n        changedTask.end = dateByX(\r\n          newX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = dateByX(\r\n          newMoveX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  text: string;\r\n  hasChild: boolean;\r\n  arrowIndent: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  text,\r\n  hasChild,\r\n  arrowIndent,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current)\r\n      setIsTextInside(textRef.current.getBBox().width < width);\r\n  }, [textRef, width]);\r\n\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  const getX = () => {\r\n    return isTextInside\r\n      ? x + width * 0.5\r\n      : x + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n      <text\r\n        x={getX()}\r\n        y={y + height * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {text}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\nimport { BarTask } from \"../../types/bar-task\";\nimport {\n  progressWithByParams,\n  getProgressPoint,\n} from \"../../helpers/bar-helper\";\nimport styles from \"./bar.module.css\";\nimport { GanttContentMoveAction } from \"../gantt/task-gantt-content\";\nimport { BarDisplay } from \"./bar-display\";\nimport { BarDateHandle } from \"./bar-date-handle\";\nimport { BarProgressHandle } from \"./bar-progress-handle\";\n\nexport type BarProps = {\n  task: BarTask;\n  arrowIndent: number;\n  isProgressChangeable: boolean;\n  isDateChangeable: boolean;\n  isDelete: boolean;\n  isSelected: boolean;\n  onEventStart: (\n    action: GanttContentMoveAction,\n    selectedTask: BarTask,\n    event?: React.MouseEvent | React.KeyboardEvent\n  ) => any;\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  task,\n  arrowIndent,\n  isProgressChangeable,\n  isDateChangeable,\n  onEventStart,\n  isDelete,\n  isSelected,\n}) => {\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\n  const progressPoint = getProgressPoint(\n    progressWidth + task.x1,\n    task.y,\n    task.height\n  );\n\n  return (\n    <g\n      className={styles.barWrapper}\n      tabIndex={0}\n      onKeyDown={e => {\n        switch (e.key) {\n          case \"Delete\": {\n            if (isDelete) onEventStart(\"delete\", task, e);\n            break;\n          }\n        }\n        e.stopPropagation();\n      }}\n      onMouseEnter={e => {\n        onEventStart(\"mouseenter\", task, e);\n      }}\n      onMouseLeave={e => {\n        onEventStart(\"mouseleave\", task, e);\n      }}\n      onDoubleClick={e => {\n        onEventStart(\"dblclick\", task, e);\n      }}\n      onFocus={() => {\n        onEventStart(\"select\", task);\n      }}\n    >\n      <BarDisplay\n        x={task.x1}\n        y={task.y}\n        width={task.x2 - task.x1}\n        height={task.height}\n        progressWidth={progressWidth}\n        barCornerRadius={task.barCornerRadius}\n        text={task.name}\n        hasChild={task.barChildren.length > 0}\n        arrowIndent={arrowIndent}\n        styles={task.styles}\n        isSelected={isSelected}\n        onMouseDown={e => {\n          isDateChangeable && onEventStart(\"move\", task, e);\n        }}\n      />\n      <g className=\"handleGroup\">\n        {isDateChangeable && (\n          <g>\n            {/* left */}\n            <BarDateHandle\n              x={task.x1 + 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(\"start\", task, e);\n              }}\n            />\n            {/* right */}\n            <BarDateHandle\n              x={task.x2 - task.handleWidth - 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(\"end\", task, e);\n              }}\n            />\n          </g>\n        )}\n        {isProgressChangeable && (\n          <BarProgressHandle\n            progressPoint={progressPoint}\n            onMouseDown={e => {\n              onEventStart(\"progress\", task, e);\n            }}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskTo.height / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskFrom.height / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import { BarTask } from \"../types/bar-task\";\r\nimport { Task } from \"../types/public-types\";\r\n\r\nexport function isKeyboardEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.KeyboardEvent {\r\n  return (event as React.KeyboardEvent).key !== undefined;\r\n}\r\n\r\nexport function isMouseEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.MouseEvent {\r\n  return (event as React.MouseEvent).clientX !== undefined;\r\n}\r\n\r\nexport function isBarTask(task: Task | BarTask): task is BarTask {\r\n  return (task as BarTask).x1 !== undefined;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { Bar } from \"../bar/bar\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../other/arrow\";\r\nimport {\r\n  convertToBarTasks,\r\n  handleTaskBySVGMouseEvent,\r\n  BarMoveAction,\r\n} from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../other/tooltip\";\r\nimport { isKeyboardEvent } from \"../../helpers/other-helper\";\r\n\r\nexport type GanttContentMoveAction =\r\n  | \"mouseenter\"\r\n  | \"mouseleave\"\r\n  | \"delete\"\r\n  | \"dblclick\"\r\n  | \"select\"\r\n  | BarMoveAction;\r\nexport type BarEvent = {\r\n  changedTask?: BarTask;\r\n  originalTask?: BarTask;\r\n  action: GanttContentMoveAction;\r\n};\r\nexport type TaskGanttContentProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  selectedTask: string;\r\n  rowHeight: number;\r\n  barCornerRadius: number;\r\n  columnWidth: number;\r\n  barFill: number;\r\n  barProgressColor: string;\r\n  barProgressSelectedColor: string;\r\n  barBackgroundColor: string;\r\n  barBackgroundSelectedColor: string;\r\n  handleWidth: number;\r\n  timeStep: number;\r\n  svg?: React.RefObject<SVGSVGElement>;\r\n  svgHeight: number;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  setSelectedTask: (taskId: string) => void;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n  onTasksChange: (tasks: Task[]) => void;\r\n} & EventOption;\r\n\r\nexport const TaskGanttContent: React.FC<TaskGanttContentProps> = ({\r\n  tasks,\r\n  dates,\r\n  selectedTask,\r\n  rowHeight,\r\n  barCornerRadius,\r\n  columnWidth,\r\n  barFill,\r\n  barProgressColor,\r\n  barProgressSelectedColor,\r\n  barBackgroundColor,\r\n  barBackgroundSelectedColor,\r\n  handleWidth,\r\n  timeStep,\r\n  svg,\r\n  svgHeight,\r\n  arrowColor,\r\n  arrowIndent,\r\n  fontFamily,\r\n  fontSize,\r\n  setSelectedTask,\r\n  onTasksChange,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  TooltipContent,\r\n}) => {\r\n  const point = svg?.current?.createSVGPoint();\r\n  const [barEvent, setBarEvent] = useState<BarEvent>({\r\n    action: \"\",\r\n  });\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [failedTask, setFailedTask] = useState<BarTask | null>(null);\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // create xStep\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    setXStep(newXStep);\r\n  }, [columnWidth, dates, timeStep]);\r\n\r\n  // generate tasks\r\n  useEffect(() => {\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        dates,\r\n        columnWidth,\r\n        rowHeight,\r\n        barFill,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    handleWidth,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n  ]);\r\n\r\n  // on failed task update\r\n  useEffect(() => {\r\n    if (failedTask) {\r\n      const newTasks = barTasks.map(t =>\r\n        t.id === failedTask.id ? failedTask : t\r\n      );\r\n      onTasksChange(newTasks);\r\n      setFailedTask(null);\r\n    }\r\n  }, [failedTask, barTasks]);\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = async (event: MouseEvent) => {\r\n      if (!barEvent.changedTask || !point || !svg?.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { isChanged, changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        barEvent.action as BarMoveAction,\r\n        barEvent.changedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (isChanged) {\r\n        setBarTasks(\r\n          barTasks.map(t => (t.id === changedTask.id ? changedTask : t))\r\n        );\r\n        setBarEvent({ ...barEvent, changedTask: changedTask });\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = async (event: MouseEvent) => {\r\n      const { changedTask: selectedTask, action, originalTask } = barEvent;\r\n\r\n      if (!selectedTask || !point || !svg?.current || !originalTask) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        action as BarMoveAction,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n\r\n      const isNotLikeOriginal =\r\n        originalTask.start !== changedTask.start ||\r\n        originalTask.end !== changedTask.end ||\r\n        originalTask.progress !== changedTask.progress;\r\n\r\n      // remove listeners\r\n      svg.current.removeEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.removeEventListener(\"mouseup\", handleMouseUp);\r\n      setBarEvent({ action: \"\" });\r\n      setIsMoving(false);\r\n      const newTasks = barTasks.map(t =>\r\n        t.id === changedTask.id ? changedTask : t\r\n      );\r\n      onTasksChange(newTasks);\r\n\r\n      // custom operation start\r\n      let operationSuccess = true;\r\n      if (\r\n        (action === \"move\" || action === \"end\" || action === \"start\") &&\r\n        onDateChange &&\r\n        isNotLikeOriginal\r\n      ) {\r\n        try {\r\n          const result = await onDateChange(changedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      } else if (onProgressChange && isNotLikeOriginal) {\r\n        try {\r\n          const result = await onProgressChange(changedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      }\r\n\r\n      // If operation is failed - return old state\r\n      if (!operationSuccess) {\r\n        setFailedTask(originalTask);\r\n      }\r\n    };\r\n\r\n    if (\r\n      !isMoving &&\r\n      (barEvent.action === \"move\" ||\r\n        barEvent.action === \"end\" ||\r\n        barEvent.action === \"start\" ||\r\n        barEvent.action === \"progress\") &&\r\n      svg?.current\r\n    ) {\r\n      svg.current.addEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.addEventListener(\"mouseup\", handleMouseUp);\r\n      setIsMoving(true);\r\n    }\r\n  }, [\r\n    barTasks,\r\n    barEvent,\r\n    xStep,\r\n    initEventX1Delta,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n    svg,\r\n    isMoving,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   */\r\n  const handleBarEventStart = async (\r\n    action: GanttContentMoveAction,\r\n    task: BarTask,\r\n    event?: React.MouseEvent | React.KeyboardEvent\r\n  ) => {\r\n    if (!event) {\r\n      if (action === \"select\") {\r\n        setSelectedTask(task.id);\r\n      }\r\n    }\r\n    // Keyboard events\r\n    else if (isKeyboardEvent(event)) {\r\n      if (action === \"delete\") {\r\n        if (onTaskDelete) {\r\n          try {\r\n            const result = await onTaskDelete(task);\r\n            if (result !== undefined && result) {\r\n              const newTasks = barTasks.filter(t => t.id !== task.id);\r\n              onTasksChange(newTasks);\r\n              setSelectedTask(\"\");\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error on Delete. \" + error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Mouse Events\r\n    else if (action === \"mouseenter\") {\r\n      if (!barEvent.action) {\r\n        setBarEvent({\r\n          action,\r\n          changedTask: task,\r\n          originalTask: task,\r\n        });\r\n      }\r\n    } else if (action === \"mouseleave\") {\r\n      if (barEvent.action === \"mouseenter\") {\r\n        setBarEvent({ action: \"\" });\r\n      }\r\n    } else if (action === \"dblclick\") {\r\n      !!onDoubleClick && onDoubleClick(task);\r\n    }\r\n    // Change task event start\r\n    else if (action === \"move\") {\r\n      if (!svg?.current || !point) return;\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n      setInitEventX1Delta(cursor.x - task.x1);\r\n      setBarEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalTask: task,\r\n      });\r\n    } else {\r\n      setBarEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalTask: task,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {barTasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${barTasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={barTasks[child]}\r\n                rowHeight={rowHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {barTasks.map(task => {\r\n          return (\r\n            <Bar\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              isDelete={!task.isDisabled}\r\n              onEventStart={handleBarEventStart}\r\n              key={task.id}\r\n              isSelected={task.id === selectedTask}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {barEvent.changedTask && (\r\n          <Tooltip\r\n            x={barEvent.changedTask.x2 + arrowIndent + arrowIndent * 0.5}\r\n            rowHeight={rowHeight}\r\n            svgHeight={svgHeight}\r\n            task={barEvent.changedTask}\r\n            fontFamily={fontFamily}\r\n            fontSize={fontSize}\r\n            TooltipContent={TooltipContent}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, SyntheticEvent } from \"react\";\r\nimport { GridProps, Grid } from \"../grid/grid\";\r\nimport { CalendarProps, Calendar } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps, TaskGanttContent } from \"./task-gantt-content\";\r\nimport styles from \"./gantt.module.css\";\r\n\r\nexport type TaskGanttProps = {\r\n  gridProps: GridProps;\r\n  calendarProps: CalendarProps;\r\n  barProps: TaskGanttContentProps;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  scrollX: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n};\r\nexport const TaskGantt: React.FC<TaskGanttProps> = ({\r\n  gridProps,\r\n  calendarProps,\r\n  barProps,\r\n  ganttHeight,\r\n  scrollY,\r\n  scrollX,\r\n  onScroll,\r\n}) => {\r\n  const ganttSVGRef = useRef<SVGSVGElement>(null);\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  const verticalContainerRef = useRef<HTMLDivElement>(null);\r\n  const newBarProps = { ...barProps, svg: ganttSVGRef };\r\n\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  useEffect(() => {\r\n    if (verticalContainerRef.current) {\r\n      verticalContainerRef.current.scrollLeft = scrollX;\r\n    }\r\n  }, [scrollX]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.ganttVerticalContainer}\r\n      ref={verticalContainerRef}\r\n      onScroll={onScroll}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={gridProps.gridWidth}\r\n        height={calendarProps.headerHeight}\r\n        fontFamily={barProps.fontFamily}\r\n      >\r\n        <Calendar {...calendarProps} />\r\n      </svg>\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={styles.horizontalContainer}\r\n        style={\r\n          ganttHeight\r\n            ? { height: ganttHeight, width: gridProps.gridWidth }\r\n            : { width: gridProps.gridWidth }\r\n        }\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={gridProps.gridWidth}\r\n          height={barProps.rowHeight * barProps.tasks.length}\r\n          fontFamily={barProps.fontFamily}\r\n          ref={ganttSVGRef}\r\n        >\r\n          <Grid {...gridProps} />\r\n          <TaskGanttContent {...newBarProps} />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport { ViewMode, GanttProps, Task } from \"../../types/public-types\";\r\nimport { GridProps } from \"../grid/grid\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\nimport { CalendarProps } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps } from \"./task-gantt-content\";\r\nimport { TaskListHeaderDefault } from \"../task-list/task-list-header\";\r\nimport { TaskListTableDefault } from \"../task-list/task-list-table\";\r\nimport { StandardTooltipContent } from \"../other/tooltip\";\r\nimport { Scroll } from \"../other/scroll\";\r\nimport { TaskListProps, TaskList } from \"../task-list/task-list\";\r\nimport styles from \"./gantt.module.css\";\r\nimport { TaskGantt } from \"./task-gantt\";\r\n\r\nexport const Gantt: React.SFC<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  listCellWidth = \"155px\",\r\n  rowHeight = 50,\r\n  ganttHeight = 0,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  TooltipContent = StandardTooltipContent,\r\n  TaskListHeader = TaskListHeaderDefault,\r\n  TaskListTable = TaskListTableDefault,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  onSelect,\r\n}) => {\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n  const [ganttTasks, setGanttTasks] = useState<Task[]>(tasks);\r\n  const [selectedTask, setSelectedTask] = useState<string>(\"\");\r\n  const [scrollY, setScrollY] = useState(0);\r\n  const [scrollX, setScrollX] = useState(0);\r\n  const [ignoreScrollEvent, setIgnoreScrollEvent] = useState(false);\r\n  const [startDate, endDate] = ganttDateRange(ganttTasks, viewMode);\r\n  const dates = seedDates(startDate, endDate, viewMode);\r\n\r\n  const svgHeight = rowHeight * tasks.length;\r\n  const gridWidth = dates.length * columnWidth;\r\n  const ganttFullHeight = ganttTasks.length * rowHeight;\r\n\r\n  useEffect(() => {\r\n    setGanttTasks(tasks);\r\n  }, [tasks]);\r\n\r\n  // scroll events\r\n  useEffect(() => {\r\n    const handleWheel = (event: WheelEvent) => {\r\n      event.preventDefault();\r\n      const newScrollY = scrollY + event.deltaY;\r\n      if (newScrollY < 0) {\r\n        setScrollY(0);\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        setScrollY(ganttFullHeight - ganttHeight);\r\n      } else {\r\n        setScrollY(newScrollY);\r\n      }\r\n      setIgnoreScrollEvent(true);\r\n    };\r\n\r\n    // subscribe if scroll is necessary\r\n    if (\r\n      wrapperRef.current &&\r\n      ganttHeight &&\r\n      ganttHeight < ganttTasks.length * rowHeight\r\n    ) {\r\n      wrapperRef.current.addEventListener(\"wheel\", handleWheel, {\r\n        passive: false,\r\n      });\r\n    }\r\n    return () => {\r\n      if (wrapperRef.current) {\r\n        wrapperRef.current.removeEventListener(\"wheel\", handleWheel);\r\n      }\r\n    };\r\n  }, [wrapperRef.current, scrollY, ganttHeight, ganttTasks, rowHeight]);\r\n\r\n  const handleScrollY = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollY !== event.currentTarget.scrollTop && !ignoreScrollEvent) {\r\n      setScrollY(event.currentTarget.scrollTop);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  const handleScrollX = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollX !== event.currentTarget.scrollLeft && !ignoreScrollEvent) {\r\n      setScrollX(event.currentTarget.scrollLeft);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  /**\r\n   * Handles arrow keys events and transform it to new scroll\r\n   */\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    let newScrollY = scrollY;\r\n    let newScrollX = scrollX;\r\n    let isX = true;\r\n    switch (event.key) {\r\n      case \"Down\": // IE/Edge specific value\r\n      case \"ArrowDown\":\r\n        newScrollY += rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Up\": // IE/Edge specific value\r\n      case \"ArrowUp\":\r\n        newScrollY -= rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Left\":\r\n      case \"ArrowLeft\":\r\n        newScrollX -= columnWidth;\r\n        break;\r\n      case \"Right\": // IE/Edge specific value\r\n      case \"ArrowRight\":\r\n        newScrollX += columnWidth;\r\n        break;\r\n    }\r\n    if (isX) {\r\n      if (newScrollX < 0) {\r\n        setScrollX(0);\r\n      } else if (newScrollX > gridWidth) {\r\n        setScrollX(gridWidth);\r\n      } else {\r\n        setScrollX(newScrollX);\r\n      }\r\n    } else {\r\n      if (newScrollY < 0) {\r\n        setScrollY(0);\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        setScrollY(ganttFullHeight - ganttHeight);\r\n      } else {\r\n        setScrollY(newScrollY);\r\n      }\r\n    }\r\n    setIgnoreScrollEvent(true);\r\n  };\r\n\r\n  // task change event\r\n  const handleTasksChange = (tasks: Task[]) => {\r\n    setGanttTasks(tasks);\r\n  };\r\n\r\n  /**\r\n   * Task select event\r\n   */\r\n  const handleSelectedTask = (taskId: string) => {\r\n    const newSelectedTask = ganttTasks.find(t => t.id === taskId);\r\n    if (newSelectedTask) {\r\n      if (onSelect) {\r\n        const oldSelectedTask = ganttTasks.find(t => t.id === selectedTask);\r\n        if (oldSelectedTask) {\r\n          onSelect(oldSelectedTask, false);\r\n        }\r\n        onSelect(newSelectedTask, true);\r\n      }\r\n      setSelectedTask(newSelectedTask.id);\r\n    } else {\r\n      if (onSelect) {\r\n        const oldSelectedTask = ganttTasks.find(t => t.id === selectedTask);\r\n        if (oldSelectedTask) {\r\n          onSelect(oldSelectedTask, false);\r\n        }\r\n      }\r\n      setSelectedTask(\"\");\r\n    }\r\n  };\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    gridWidth,\r\n    tasks: ganttTasks,\r\n    rowHeight,\r\n    dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dates,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: TaskGanttContentProps = {\r\n    tasks: ganttTasks,\r\n    selectedTask,\r\n    setSelectedTask: handleSelectedTask,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n    handleWidth,\r\n    arrowColor,\r\n    timeStep,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    svgHeight,\r\n    onTasksChange: handleTasksChange,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onTaskDelete,\r\n    TooltipContent,\r\n  };\r\n\r\n  const tableProps: TaskListProps = {\r\n    rowHeight,\r\n    rowWidth: listCellWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks: ganttTasks,\r\n    locale,\r\n    headerHeight,\r\n    scrollY,\r\n    ganttHeight,\r\n    horizontalContainerClass: styles.horizontalContainer,\r\n    selectedTaskId: selectedTask,\r\n    setSelectedTask,\r\n    TaskListHeader,\r\n    TaskListTable,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={styles.wrapper}\r\n      onKeyDown={handleKeyDown}\r\n      tabIndex={0}\r\n      ref={wrapperRef}\r\n    >\r\n      {listCellWidth && <TaskList {...tableProps} />}\r\n      <TaskGantt\r\n        gridProps={gridProps}\r\n        calendarProps={calendarProps}\r\n        barProps={barProps}\r\n        ganttHeight={ganttHeight}\r\n        scrollY={scrollY}\r\n        scrollX={scrollX}\r\n        onScroll={handleScrollX}\r\n      />\r\n      <Scroll\r\n        ganttFullHeight={ganttFullHeight}\r\n        ganttHeight={ganttHeight}\r\n        headerHeight={headerHeight}\r\n        scroll={scrollY}\r\n        onScroll={handleScrollY}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  isChecked: boolean;\r\n  onViewListChange: (isChecked: boolean) => void;\r\n  onViewModeChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewModeChange,\r\n  onViewListChange,\r\n  isChecked,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.HalfDay)}\r\n      >\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewModeChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Week)}\r\n      >\r\n        Week\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Month)}\r\n      >\r\n        Month\r\n      </button>\r\n\r\n      <div className=\"Switch\">\r\n        <label className=\"Switch_Toggle\">\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={isChecked}\r\n            onClick={() => onViewListChange(!isChecked)}\r\n          />\r\n          <span className=\"Slider\" />\r\n        </label>\r\n        Show Task List\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { Task, ViewMode, Gantt } from \"gantt-task-react\";\r\nimport { ViewSwitcher } from \"./components/view-switcher\";\r\n\r\n//Init\r\nconst App = () => {\r\n  const currentDate = new Date();\r\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\r\n  const [isChecked, setIsChecked] = React.useState(true);\r\n  let columnWidth = 60;\r\n  if (view === ViewMode.Month) {\r\n    columnWidth = 300;\r\n  } else if (view === ViewMode.Week) {\r\n    columnWidth = 250;\r\n  }\r\n  let tasks: Task[] = [\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\r\n      end: new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        2,\r\n        12,\r\n        28\r\n      ),\r\n      name: \"Idea\",\r\n      id: \"Task 0\",\r\n      progress: 45,\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\r\n      name: \"Research\",\r\n      id: \"Task 1\",\r\n      progress: 25,\r\n      dependencies: [\"Task 0\"],\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\r\n      name: \"Discussion with team\",\r\n      id: \"Task 2\",\r\n      progress: 10,\r\n      dependencies: [\"Task 1\"],\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\r\n      name: \"Developing\",\r\n      id: \"Task 3\",\r\n      progress: 2,\r\n      dependencies: [\"Task 2\"],\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\r\n      name: \"Review\",\r\n      id: \"Task 4\",\r\n      progress: 70,\r\n      dependencies: [\"Task 2\"],\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 16),\r\n      name: \"Release & Eat Pizza\",\r\n      id: \"Task 6\",\r\n      progress: currentDate.getMonth(),\r\n      dependencies: [\"Task 4\"],\r\n      styles: { progressColor: \"#ffbb54\", progressSelectedColor: \"#ff9e0d\" },\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 24),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 25),\r\n      name: \"Closing\",\r\n      id: \"Task 9\",\r\n      progress: 0,\r\n      isDisabled: true,\r\n    },\r\n  ];\r\n\r\n  const sleep = (milliseconds: number) => {\r\n    return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n  };\r\n  let onTaskChange = (task: Task) => {\r\n    console.log(\"On date change Id:\" + task.id);\r\n  };\r\n\r\n  let onTaskDelete = (task: Task) => {\r\n    const conf = window.confirm(\"Are you sure about \" + task.name + \" ?\");\r\n    return conf;\r\n  };\r\n\r\n  let onProgressChange = async (task: Task) => {\r\n    await sleep(5000);\r\n    console.log(\"On progress change Id:\" + task.id);\r\n  };\r\n\r\n  let onDblClick = (task: Task) => {\r\n    alert(\"On Double Click event Id:\" + task.id);\r\n  };\r\n\r\n  let onSelect = (task: Task, isSelected: boolean) => {\r\n    console.log(task.name + \" has \" + (isSelected ? \"selected\" : \"unselected\"));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ViewSwitcher\r\n        onViewModeChange={viewMode => setView(viewMode)}\r\n        onViewListChange={setIsChecked}\r\n        isChecked={isChecked}\r\n      />\r\n      <h3>Gantt With Unlimited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        columnWidth={columnWidth}\r\n      />\r\n      <h3>Gantt With Limited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        ganttHeight={300}\r\n        columnWidth={columnWidth}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}