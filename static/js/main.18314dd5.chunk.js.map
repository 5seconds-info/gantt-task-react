{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/Grid/grid-body.tsx","../../src/components/Grid/grid-header.tsx","../../src/components/Grid/grid.tsx","../../src/components/Calendar/top-part-of-calendar.tsx","../../src/components/Calendar/calendar.tsx","../../src/components/Bar/bar-progress-handle.tsx","../../src/components/Bar/bar-date-handle.tsx","../../src/components/Bar/bar-display.tsx","../../src/helpers/bar-helper.ts","../../src/components/Bar/bar.tsx","../../src/components/Other/arrow.tsx","../../src/components/Other/tooltip.tsx","../../src/helpers/other-helper.ts","../../src/components/Gantt/gantt-content.tsx","../../src/components/Gantt/gantt.tsx","components/view-switcher.tsx","components/gantt-table.tsx","App.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","getLocaleMonth","bottomValue","Intl","month","getMonday","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","GridBody","todayColor","y","gridRows","rowLines","key","task","id","x","width","gridWidth","height","rowHeight","className","styles","y1","x2","y2","now","tickX","ticks","today","React","i","dates","x1","headerHeight","columnWidth","fill","GridHeader","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","fontSize","topValues","bottomValues","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","locale","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","fontFamily","getCalendarValuesForOther","BarProgressHandle","onMouseDown","points","progressPoint","BarDateHandle","ry","barCornerRadius","rx","BarDisplay","textRef","useRef","useState","useEffect","setIsTextInside","isSelected","style","progressWidth","isTextInside","arrowIndent","ref","convertToBarTask","taskXCoordinate","taskYCoordinate","index","taskHeight","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","handleWidth","barChildren","xDate","dateByX","newDate","taskDate","handleTaskBySVGMouseEvent","changedTask","selectedTask","isChanged","barWidth","progressByX","svgX","newX1","additionalXValue","startByX","xStep","newX2","endByX","moveByX","newMoveX1","Bar","isDelete","taskX2","progressX","taskY","point","onDoubleClick","e","onEventStart","tabIndex","onKeyDown","onMouseEnter","onMouseLeave","onFocus","setIsSelected","onBlur","text","name","hasChild","isDateChangeable","isProgressChangeable","Arrow","indexCompare","taskFrom","taskTo","taskToEndPosition","path","trianglePoints","strokeWidth","d","Tooltip","getTooltipContent","getStandardTooltipContent","tooltipRef","setRelatedY","setToolWidth","relatedY","toolWidth","isKeyboardEvent","event","GanttContent","svg","action","dateDelta","setXStep","timeStep","setBarTasks","barTasks","tasks","dependencies","j","dependence","convertToBarTasks","handleBarEventStart","a","onTaskDelete","newTasks","t","barEvent","onTasksDateChange","setBarEvent","cursor","setInitEventX1Delta","handleMouseMove","handleMouseUp","onDateChange","onProgressChange","setIsMoving","isMoving","arrowColor","stroke","child","isDisabled","Gantt","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","newStartDate","newEndDate","ganttDateRange","ganttTasks","currentDate","seedDates","gridProps","calendarProps","barProps","setGanttTasks","xmlns","length","ViewSwitcher","onViewChange","onClick","QuarterDay","HalfDay","Day","Week","Month","GanttTableExample","options","minWidth","role","aria-label","map","start","toDateString","end","overflowX","App","view","setView","getFullYear","getMonth","progress","console","log","window","confirm","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18314dd5.chunk.js","sourcesContent":["export enum ViewMode {\n  QuarterDay = \"Quarter Day\",\n  HalfDay = \"Half Day\",\n  Day = \"Day\",\n  /** ISO-8601 week */\n  Week = \"Week\",\n  Month = \"Month\",\n}\nexport interface Task {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  /**\n   * From 0 to 100\n   */\n  progress: number;\n  styles?: {\n    backgroundColor?: string;\n    backgroundSelectedColor?: string;\n    progressColor?: string;\n    progressSelectedColor?: string;\n  };\n  isDisabled?: boolean;\n  dependencies?: string[];\n}\n\nexport interface EventOption {\n  /**\n   * Time step value for date changes.\n   */\n  timeStep?: number;\n  onDoubleClick?: (task: Task) => void;\n  onDateChange?: (task: Task) => void | Promise<any>;\n  onProgressChange?: (task: Task) => void | Promise<any>;\n  onTaskDelete?: (task: Task) => void | Promise<any>;\n}\n\nexport interface DisplayOption {\n  viewMode?: ViewMode;\n  /**\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\n   */\n  locale?: string;\n}\n\nexport interface StylingOption {\n  headerHeight?: number;\n  columnWidth?: number;\n  rowHeight?: number;\n  barCornerRadius?: number;\n  handleWidth?: number;\n  fontFamily?: string;\n  fontSize?: string;\n  /**\n   * How many of row width can be taken by task.\n   * From 0 to 100\n   */\n  barFill?: number;\n  barProgressColor?: string;\n  barProgressSelectedColor?: string;\n  barBackgroundColor?: string;\n  barBackgroundSelectedColor?: string;\n  arrowColor?: string;\n  arrowIndent?: number;\n  todayColor?: string;\n  getTooltipContent?: (\n    task: Task,\n    fontSize: string,\n    fontFamily: string\n  ) => JSX.Element;\n}\n\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\n  tasks: Task[];\n}\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].end;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newStartDate = startOfDate(newStartDate, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  gridWidth: number;\r\n  rowHeight: number;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  headerHeight,\r\n  gridWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = headerHeight;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={gridWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={gridWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={headerHeight}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridHeaderProps = {\r\n  gridWidth: number;\r\n  headerHeight: number;\r\n};\r\nexport const GridHeader: React.FC<GridHeaderProps> = ({\r\n  gridWidth,\r\n  headerHeight,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x=\"0\"\r\n      y=\"0\"\r\n      width={gridWidth}\r\n      height={headerHeight}\r\n      className={styles.gridHeader}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\nimport { GridHeader, GridHeaderProps } from \"./grid-header\";\r\n\r\nexport type GridProps = GridBodyProps & GridHeaderProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridHeader {...props} />\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dates: Date[];\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dates,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getFullYear() !== dates[i - 1].getFullYear()) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 0;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  text: string;\r\n  hasChild: boolean;\r\n  arrowIndent: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  text,\r\n  hasChild,\r\n  arrowIndent,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current)\r\n      setIsTextInside(textRef.current.getBBox().width < width);\r\n  }, [textRef, width]);\r\n\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  const getX = () => {\r\n    return isTextInside\r\n      ? x + width * 0.5\r\n      : x + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n      <text\r\n        x={getX()}\r\n        y={y + height * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {text}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask } from \"../types/bar-task\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  barFill: number,\r\n  headerHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n) => {\r\n  const dateDelta =\r\n    dates[1].getTime() -\r\n    dates[0].getTime() -\r\n    dates[1].getTimezoneOffset() * 60 * 1000 +\r\n    dates[0].getTimezoneOffset() * 60 * 1000;\r\n  const taskHeight = (rowHeight * barFill) / 100;\r\n\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      headerHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  // set dependencies\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nexport const convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  headerHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight, headerHeight);\r\n\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nexport const taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nexport const taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  headerHeight: number\r\n) => {\r\n  const y = index * rowHeight + headerHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nexport const startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nexport const dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport type BarMoveAction = \"progress\" | \"end\" | \"start\" | \"move\" | \"\";\r\n\r\n/**\r\n * Method handles event in real time(mousemove) and on finish(mouseup)\r\n */\r\nexport const handleTaskBySVGMouseEvent = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n) => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"progress\":\r\n      changedTask.progress = progressByX(svgX, selectedTask);\r\n      isChanged = changedTask.progress !== selectedTask.progress;\r\n      break;\r\n    case \"start\": {\r\n      const newX1 = startByX(svgX, xStep, selectedTask);\r\n      changedTask.x1 = newX1;\r\n      isChanged = changedTask.x1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"end\": {\r\n      const newX2 = endByX(svgX, xStep, selectedTask);\r\n      changedTask.x2 = newX2;\r\n      isChanged = changedTask.x2 !== selectedTask.x2;\r\n      if (isChanged) {\r\n        changedTask.end = dateByX(\r\n          newX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = dateByX(\r\n          newMoveX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n","import React, { useState } from \"react\";\nimport { BarProgressHandle } from \"./bar-progress-handle\";\nimport { BarDateHandle } from \"./bar-date-handle\";\nimport { BarDisplay } from \"./bar-display\";\nimport { BarTask } from \"../../types/bar-task\";\nimport {\n  progressWithByParams,\n  getProgressPoint,\n} from \"../../helpers/bar-helper\";\nimport styles from \"./bar.module.css\";\nimport { GanttContentMoveAction } from \"../Gantt/gantt-content\";\n\nexport type BarProps = {\n  task: BarTask;\n  arrowIndent: number;\n  isProgressChangeable: boolean;\n  isDateChangeable: boolean;\n  isDelete: boolean;\n  onEventStart: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    action: GanttContentMoveAction,\n    selectedTask: BarTask\n  ) => any;\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  task,\n  arrowIndent,\n  isProgressChangeable,\n  isDateChangeable,\n  onEventStart,\n  isDelete,\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\n  const progressPoint = getProgressPoint(\n    progressWidth + task.x1,\n    task.y,\n    task.height\n  );\n\n  return (\n    <g\n      className={styles.barWrapper}\n      onDoubleClick={e => {\n        onEventStart(e, \"dblclick\", task);\n      }}\n      tabIndex={0}\n      onKeyDown={e => {\n        switch (e.key) {\n          case \"Delete\": {\n            if (isDelete) onEventStart(e, \"delete\", task);\n            break;\n          }\n        }\n      }}\n      onMouseEnter={e => {\n        onEventStart(e, \"mouseenter\", task);\n      }}\n      onMouseLeave={e => {\n        onEventStart(e, \"mouseleave\", task);\n      }}\n      onFocus={() => setIsSelected(true)}\n      onBlur={() => setIsSelected(false)}\n    >\n      <BarDisplay\n        x={task.x1}\n        y={task.y}\n        width={task.x2 - task.x1}\n        height={task.height}\n        progressWidth={progressWidth}\n        barCornerRadius={task.barCornerRadius}\n        text={task.name}\n        hasChild={task.barChildren.length > 0}\n        arrowIndent={arrowIndent}\n        styles={task.styles}\n        isSelected={isSelected}\n        onMouseDown={e => {\n          isDateChangeable && onEventStart(e, \"move\", task);\n        }}\n      />\n      <g className=\"handleGroup\">\n        {isDateChangeable && (\n          <g>\n            {/* left */}\n            <BarDateHandle\n              x={task.x1 + 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(e, \"start\", task);\n              }}\n            />\n            {/* right */}\n            <BarDateHandle\n              x={task.x2 - task.handleWidth - 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(e, \"end\", task);\n              }}\n            />\n          </g>\n        )}\n        {isProgressChangeable && (\n          <BarProgressHandle\n            progressPoint={progressPoint}\n            onMouseDown={e => {\n              onEventStart(e, \"progress\", task);\n            }}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskTo.height / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskFrom.height / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  x: number;\r\n  y: number;\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  getTooltipContent?: (\r\n    task: Task,\r\n    fontSize: string,\r\n    fontFamily: string\r\n  ) => JSX.Element;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  x,\r\n  y,\r\n  task,\r\n  fontSize,\r\n  fontFamily,\r\n\r\n  getTooltipContent = getStandardTooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState(y);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const height =\r\n        tooltipRef.current.offsetHeight +\r\n        tooltipRef.current.offsetHeight * 0.15;\r\n      setRelatedY(y - height);\r\n      setToolWidth(tooltipRef.current.scrollWidth * 1.1);\r\n    }\r\n  }, [tooltipRef, y]);\r\n  return (\r\n    <foreignObject x={x} y={relatedY} width={toolWidth} height={1000}>\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        {getTooltipContent(task, fontSize, fontFamily)}\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nconst getStandardTooltipContent = (\r\n  task: Task,\r\n  fontSize: string,\r\n  fontFamily: string\r\n) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n        (task.end.getTime() - task.start.getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n      )} day(s)`}</p>\r\n      <p\r\n        className={styles.tooltipDefaultContainerParagraph}\r\n      >{`Progress: ${task.progress} %`}</p>\r\n    </div>\r\n  );\r\n};\r\n","import { BarTask } from \"../types/bar-task\";\r\nimport { Task } from \"../types/public-types\";\r\n\r\nexport function isKeyboardEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent\r\n): event is React.KeyboardEvent {\r\n  return (event as React.KeyboardEvent).key !== undefined;\r\n}\r\n\r\nexport function isBarTask(task: Task | BarTask): task is BarTask {\r\n  return (task as BarTask).x1 !== undefined;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { Bar } from \"../Bar/bar\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../Other/arrow\";\r\nimport {\r\n  convertToBarTasks,\r\n  handleTaskBySVGMouseEvent,\r\n  BarMoveAction,\r\n} from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../Other/tooltip\";\r\nimport { isKeyboardEvent } from \"../../helpers/other-helper\";\r\n\r\nexport type GanttContentMoveAction =\r\n  | \"mouseenter\"\r\n  | \"mouseleave\"\r\n  | \"delete\"\r\n  | \"dblclick\"\r\n  | BarMoveAction;\r\nexport type BarEvent = {\r\n  selectedTask?: BarTask;\r\n  action: GanttContentMoveAction;\r\n};\r\nexport type GanttContentProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  rowHeight: number;\r\n  barCornerRadius: number;\r\n  columnWidth: number;\r\n  barFill: number;\r\n  barProgressColor: string;\r\n  barProgressSelectedColor: string;\r\n  barBackgroundColor: string;\r\n  barBackgroundSelectedColor: string;\r\n  headerHeight: number;\r\n  handleWidth: number;\r\n  timeStep: number;\r\n  svg: React.RefObject<SVGSVGElement>;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  getTooltipContent?: (\r\n    task: Task,\r\n    fontSize: string,\r\n    fontFamily: string\r\n  ) => JSX.Element;\r\n  onTasksDateChange: (tasks: Task[]) => void;\r\n} & EventOption;\r\n\r\nexport const GanttContent: React.FC<GanttContentProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  barCornerRadius,\r\n  columnWidth,\r\n  barFill,\r\n  barProgressColor,\r\n  barProgressSelectedColor,\r\n  barBackgroundColor,\r\n  barBackgroundSelectedColor,\r\n  headerHeight,\r\n  handleWidth,\r\n  timeStep,\r\n  svg,\r\n  arrowColor,\r\n  arrowIndent,\r\n  fontFamily,\r\n  fontSize,\r\n  onTasksDateChange,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  getTooltipContent,\r\n}) => {\r\n  const point = svg.current?.createSVGPoint();\r\n  const [barEvent, setBarEvent] = useState<BarEvent>({\r\n    action: \"\",\r\n  });\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // create xStep\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    setXStep(newXStep);\r\n  }, [columnWidth, dates, timeStep]);\r\n\r\n  // generate tasks\r\n  useEffect(() => {\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        dates,\r\n        columnWidth,\r\n        rowHeight,\r\n        barFill,\r\n        headerHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    handleWidth,\r\n    headerHeight,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   */\r\n  const handleBarEventStart = async (\r\n    event: React.MouseEvent | React.KeyboardEvent,\r\n    action: GanttContentMoveAction,\r\n    selectedTask: BarTask\r\n  ) => {\r\n    if (isKeyboardEvent(event)) {\r\n      if (action === \"delete\") {\r\n        if (onTaskDelete) {\r\n          await onTaskDelete(selectedTask);\r\n          const newTasks = barTasks.filter(\r\n            t => t.id !== barEvent.selectedTask?.id\r\n          );\r\n          onTasksDateChange(newTasks);\r\n        }\r\n      }\r\n    } else if (action === \"mouseenter\") {\r\n      if (!barEvent.action) {\r\n        setBarEvent({ action, selectedTask });\r\n      }\r\n    } else if (action === \"mouseleave\") {\r\n      if (barEvent.action === \"mouseenter\") {\r\n        setBarEvent({ action: \"\" });\r\n      }\r\n    } else if (action === \"move\") {\r\n      if (!svg.current || !point) return;\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n      setInitEventX1Delta(cursor.x - selectedTask.x1);\r\n      setBarEvent({ action, selectedTask });\r\n    } else if (action === \"dblclick\") {\r\n      !!onDoubleClick && onDoubleClick(selectedTask);\r\n    } else {\r\n      setBarEvent({\r\n        action,\r\n        selectedTask,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = async (event: MouseEvent) => {\r\n      if (!barEvent.selectedTask || !point || !svg.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { isChanged, changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        barEvent.action as BarMoveAction,\r\n        barEvent.selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (isChanged) {\r\n        setBarTasks(\r\n          barTasks.map(t => (t.id === changedTask.id ? changedTask : t))\r\n        );\r\n        setBarEvent({ ...barEvent, selectedTask: changedTask });\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = async (event: MouseEvent) => {\r\n      const { selectedTask, action } = barEvent;\r\n      if (!selectedTask || !point || !svg.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        action as BarMoveAction,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (\r\n        (action === \"move\" || action === \"end\" || action === \"start\") &&\r\n        onDateChange\r\n      ) {\r\n        await onDateChange(changedTask);\r\n        const newTasks = barTasks.map(t =>\r\n          t.id === changedTask.id ? changedTask : t\r\n        );\r\n        onTasksDateChange(newTasks);\r\n      } else if (onProgressChange) {\r\n        await onProgressChange(changedTask);\r\n      }\r\n      svg.current.removeEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.removeEventListener(\"mouseup\", handleMouseUp);\r\n      setBarEvent({ action: \"\" });\r\n      setIsMoving(false);\r\n    };\r\n\r\n    if (\r\n      !isMoving &&\r\n      (barEvent.action === \"move\" ||\r\n        barEvent.action === \"end\" ||\r\n        barEvent.action === \"start\" ||\r\n        barEvent.action === \"progress\") &&\r\n      svg.current\r\n    ) {\r\n      svg.current.addEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.addEventListener(\"mouseup\", handleMouseUp);\r\n      setIsMoving(true);\r\n    }\r\n  }, [\r\n    barTasks,\r\n    barEvent,\r\n    xStep,\r\n    initEventX1Delta,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n    svg,\r\n    isMoving,\r\n  ]);\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {barTasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${tasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={barTasks[child]}\r\n                rowHeight={rowHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {barTasks.map(task => {\r\n          return (\r\n            <Bar\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              isDelete={!!onTaskDelete && !task.isDisabled}\r\n              onEventStart={handleBarEventStart}\r\n              key={task.id}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {barEvent.selectedTask && (\r\n          <Tooltip\r\n            x={barEvent.selectedTask.x2 + arrowIndent + arrowIndent * 0.5}\r\n            y={barEvent.selectedTask.y + rowHeight}\r\n            task={barEvent.selectedTask}\r\n            fontFamily={fontFamily}\r\n            fontSize={fontSize}\r\n            getTooltipContent={getTooltipContent}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { ViewMode, GanttProps, Task } from \"../../types/public-types\";\r\nimport { Grid, GridProps } from \"../Grid/grid\";\r\nimport { Calendar, CalendarProps } from \"../Calendar/calendar\";\r\nimport { GanttContent, GanttContentProps } from \"./gantt-content\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\n\r\nexport const Gantt: React.SFC<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  rowHeight = 50,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  getTooltipContent,\r\n}) => {\r\n  const svg = useRef<SVGSVGElement>(null);\r\n  const [ganttTasks, setGanttTasks] = useState<Task[]>(tasks);\r\n  const [startDate, endDate] = ganttDateRange(ganttTasks, viewMode);\r\n  const dates = seedDates(startDate, endDate, viewMode);\r\n\r\n  const handleOnTasksChange = (tasks: Task[]) => {\r\n    setGanttTasks(tasks);\r\n  };\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    gridWidth: dates.length * columnWidth,\r\n    tasks: ganttTasks,\r\n    rowHeight,\r\n    headerHeight,\r\n    dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dates,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: GanttContentProps = {\r\n    tasks: ganttTasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n    headerHeight,\r\n    handleWidth,\r\n    arrowColor,\r\n    timeStep,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    svg,\r\n    onTasksDateChange: handleOnTasksChange,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onTaskDelete,\r\n    getTooltipContent,\r\n  };\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width={columnWidth * dates.length}\r\n      height={headerHeight + rowHeight * tasks.length}\r\n      fontFamily={fontFamily}\r\n      ref={svg}\r\n    >\r\n      <Grid {...gridProps} />\r\n      <Calendar {...calendarProps} />\r\n      <GanttContent {...barProps} />\r\n    </svg>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  onViewChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewChange,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.HalfDay)}>\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Week)}>\r\n        Week\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Month)}>\r\n        Month\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport {\r\n  Gantt,\r\n  Task,\r\n  EventOption,\r\n  StylingOption,\r\n  ViewMode,\r\n  DisplayOption,\r\n} from \"gantt-task-react\";\r\n\r\n//Gantt with Custom table example\r\ntype GanttTableExampleProps = { tasks: Task[] } & EventOption & DisplayOption;\r\nexport const GanttTableExample: React.SFC<GanttTableExampleProps> = props => {\r\n  const gridColumnWidth = 150;\r\n  let options: StylingOption = {\r\n    fontSize: \"14px\",\r\n    fontFamily:\r\n      \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n    headerHeight: 50,\r\n    rowHeight: 50,\r\n  };\r\n  if (props.viewMode === ViewMode.Month) {\r\n    options.columnWidth = 300;\r\n  } else if (props.viewMode === ViewMode.Week) {\r\n    options.columnWidth = 250;\r\n  }\r\n\r\n  return (\r\n    <div className=\"Wrapper\">\r\n      <div\r\n        className=\"GanttTable\"\r\n        style={{\r\n          fontFamily: options.fontFamily,\r\n          fontSize: options.fontSize,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"GanttTable-header\"\r\n          style={{\r\n            height: options.headerHeight,\r\n          }}\r\n        >\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"fromDate\" className=\"GanttTable-icon\">\r\n              📃\r\n            </span>\r\n            Name\r\n          </div>\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"fromDate\" className=\"GanttTable-icon\">\r\n              📅\r\n            </span>\r\n            From\r\n          </div>\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"toDate\" className=\"GanttTable-icon\">\r\n              📅\r\n            </span>\r\n            To\r\n          </div>\r\n        </div>\r\n        {props.tasks.map(t => {\r\n          return (\r\n            <div\r\n              className=\"GanttTable-row\"\r\n              style={{ height: options.rowHeight }}\r\n            >\r\n              <div className=\"GanttTable-cell\">{t.name}</div>\r\n              <div className=\"GanttTable-cell\">{t.start.toDateString()}</div>\r\n              <div className=\"GanttTable-cell\">{t.end.toDateString()}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ overflowX: \"scroll\" }}>\r\n        <Gantt {...props} {...options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"gantt-task-react/dist/index.css\";\nimport { Task, ViewMode } from \"gantt-task-react\";\nimport { ViewSwitcher } from \"./components/view-switcher\";\nimport { GanttTableExample } from \"./components/gantt-table\";\n\n//Init\nconst App = () => {\n  const currentDate = new Date();\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\n  let tasks: Task[] = [\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\n      end: new Date(\n        currentDate.getFullYear(),\n        currentDate.getMonth(),\n        2,\n        12,\n        28\n      ),\n      name: \"Idea\",\n      id: \"Task 0\",\n      progress: 45,\n      isDisabled: true,\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\n      name: \"Research\",\n      id: \"Task 1\",\n      progress: 25,\n      dependencies: [\"Task 0\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\n      name: \"Discussion with team\",\n      id: \"Task 2\",\n      progress: 10,\n      dependencies: [\"Task 1\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\n      name: \"Developing\",\n      id: \"Task 3\",\n      progress: 2,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\n      name: \"Review\",\n      id: \"Task 4\",\n      progress: 70,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 16),\n      name: \"Release & Eat Burgers\",\n      id: \"Task 6\",\n      progress: currentDate.getMonth(),\n      dependencies: [\"Task 4\"],\n      styles: { progressColor: \"#ffbb54\", progressSelectedColor: \"#ff9e0d\" },\n    },\n  ];\n\n  let onTaskChange = (task: Task) => {\n    console.log(\"On date change Id:\" + task.id);\n  };\n\n  let onTaskDelete = (task: Task) => {\n    const conf = window.confirm(\"Are you sure?\");\n    if (!conf) throw \"No del Id:\" + task.id;\n  };\n\n  let onProgressChange = (task: Task) => {\n    console.log(\"On progress change Id:\" + task.id);\n  };\n\n  let onDblClick = (task: Task) => {\n    alert(\"On Double Click event Id:\" + task.id);\n  };\n\n  return (\n    <div>\n      <ViewSwitcher onViewChange={viewMode => setView(viewMode)} />\n      <GanttTableExample\n        tasks={tasks}\n        viewMode={view}\n        onDateChange={onTaskChange}\n        onTaskDelete={onTaskDelete}\n        onProgressChange={onProgressChange}\n        onDoubleClick={onDblClick}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}