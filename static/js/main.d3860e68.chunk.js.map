{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/task-list/task-list-header.tsx","../../src/components/task-list/task-list-table.tsx","../../src/components/other/tooltip.tsx","../../src/components/other/scroll.tsx","../../src/components/task-list/task-list.tsx","../../src/components/grid/grid-body.tsx","../../src/components/grid/grid.tsx","../../src/components/calendar/top-part-of-calendar.tsx","../../src/components/calendar/calendar.tsx","../../src/components/other/arrow.tsx","../../src/helpers/bar-helper.ts","../../src/helpers/other-helper.ts","../../src/components/task-item/bar/bar-display.tsx","../../src/components/task-item/bar/bar-date-handle.tsx","../../src/components/task-item/bar/bar-progress-handle.tsx","../../src/components/task-item/bar/bar.tsx","../../src/components/task-item/milestone/milestone.tsx","../../src/components/task-item/task-item.tsx","../../src/components/gantt/task-gantt-content.tsx","../../src/components/gantt/task-gantt.tsx","../../src/components/gantt/gantt.tsx","components/view-switcher.tsx","App.tsx","helper.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","ganttDateRange","tasks","newStartDate","newEndDate","task","getMonday","seedDates","currentDate","dates","getLocaleMonth","bottomValue","Intl","month","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","TaskListHeaderDefault","rowWidth","className","styles","style","fontFamily","fontSize","height","headerHeight","minWidth","marginTop","TaskListTableDefault","locale","dateTimeOptions","weekday","year","t","rowHeight","key","id","maxWidth","title","name","Tooltip","TooltipContent","tooltipRef","useRef","useState","useEffect","tooltipHeight","tooltipY","setRelatedY","svgHeight","setToolWidth","x","y","relatedY","width","toolWidth","ref","StandardTooltipContent","Scroll","onScroll","scrollRef","TaskList","TaskListTable","horizontalContainerRef","headerProps","tableProps","selectedTaskId","selectedTask","setSelectedTask","React","horizontalContainerClass","ganttHeight","GridBody","todayColor","gridRows","rowLines","y1","x2","gridWidth","y2","now","tickX","ticks","today","i","x1","columnWidth","fill","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","topValues","bottomValues","dateSetup","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","getCalendarValuesForOther","length","Arrow","arrowIndent","indexCompare","taskFrom","taskTo","taskToEndPosition","taskHeight","path","trianglePoints","strokeWidth","d","points","convertToBarTask","barTask","convertToMilestone","convertToBar","taskXCoordinate","taskYCoordinate","index","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","barCornerRadius","handleWidth","barChildren","rotatedHeight","end","progress","xDate","moveByX","additionalXValue","newX1","dateByX","newDate","taskDate","handleTaskBySVGMouseEvent","result","handleTaskBySVGMouseEventForMilestone","handleTaskBySVGMouseEventForBar","changedTask","isChanged","barWidth","progressByX","svgX","startByX","xStep","newX2","endByX","newMoveX1","isKeyboardEvent","event","BarDisplay","onMouseDown","ry","rx","isSelected","progressWidth","BarDateHandle","BarProgressHandle","progressPoint","Bar","taskX2","progressX","taskY","point","handleHeight","tabIndex","e","isDateChangeable","onEventStart","isProgressChangeable","Milestone","transform","TaskItem","textRef","setTaskItem","setIsTextInside","onKeyDown","onMouseEnter","onMouseLeave","onDoubleClick","onFocus","hasChild","isTextInside","getX","TaskGanttContent","svg","dateDelta","setXStep","timeStep","handleMouseMove","a","ganttEvent","cursor","setGanttEvent","action","handleMouseUp","newChangedTask","isNotLikeOriginal","originalSelectedTask","setIsMoving","operationSuccess","onDateChange","onProgressChange","setFailedTask","isMoving","handleBarEventStart","onTaskDelete","console","setInitEventX1Delta","arrowColor","stroke","child","isDisabled","isDelete","TaskGantt","ganttSVGRef","verticalContainerRef","newBarProps","xmlns","gridProps","calendarProps","barProps","Gantt","listCellWidth","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","milestoneBackgroundColor","milestoneBackgroundSelectedColor","TaskListHeader","onSelect","wrapperRef","startDate","endDate","barTasks","ganttFullHeight","newDates","setDateSetup","setBarTasks","dependencies","j","dependence","convertToBarTasks","prevStateTask","newTaskList","failedTask","newTaskHeight","setTaskHeight","handleWheel","newScrollY","scrollY","setScrollY","setIgnoreScrollEvent","passive","handleSelectedTask","taskId","newSelectedTask","oldSelectedTask","newScrollX","isX","setScrollX","scrollX","scroll","ViewSwitcher","onViewModeChange","onViewListChange","isChecked","onClick","QuarterDay","HalfDay","Day","Week","Month","type","defaultChecked","App","view","setView","start","getFullYear","getMonth","initTasks","setTasks","setIsChecked","map","log","newTasks","conf","window","confirm","filter","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d3860e68.chunk.js","sourcesContent":["export enum ViewMode {\r\n  QuarterDay = \"Quarter Day\",\r\n  HalfDay = \"Half Day\",\r\n  Day = \"Day\",\r\n  /** ISO-8601 week */\r\n  Week = \"Week\",\r\n  Month = \"Month\",\r\n}\r\nexport type TaskType = \"task\" | \"milestone\";\r\nexport interface Task {\r\n  id: string;\r\n  type: TaskType;\r\n  name: string;\r\n  start: Date;\r\n  end: Date;\r\n  /**\r\n   * From 0 to 100\r\n   */\r\n  progress: number;\r\n  styles?: {\r\n    backgroundColor?: string;\r\n    backgroundSelectedColor?: string;\r\n    progressColor?: string;\r\n    progressSelectedColor?: string;\r\n  };\r\n  isDisabled?: boolean;\r\n  dependencies?: string[];\r\n}\r\n\r\nexport interface EventOption {\r\n  /**\r\n   * Time step value for date changes.\r\n   */\r\n  timeStep?: number;\r\n  /**\r\n   * Invokes on bar select on unselect.\r\n   */\r\n  onSelect?: (task: Task, isSelected: boolean) => void;\r\n  /**\r\n   * Invokes on bar double click.\r\n   */\r\n  onDoubleClick?: (task: Task) => void;\r\n  /**\r\n   * Invokes on end and start time change. Chart undoes operation if method return false or error.\r\n   */\r\n  onDateChange?: (\r\n    task: Task\r\n  ) => void | boolean | Promise<void> | Promise<boolean>;\r\n  /**\r\n   * Invokes on progress change. Chart undoes operation if method return false or error.\r\n   */\r\n  onProgressChange?: (\r\n    task: Task\r\n  ) => void | boolean | Promise<void> | Promise<boolean>;\r\n  /**\r\n   * Invokes on delete selected task. Chart undoes operation if method return false or error.\r\n   */\r\n  onTaskDelete?: (\r\n    task: Task\r\n  ) => void | boolean | Promise<void> | Promise<boolean>;\r\n}\r\n\r\nexport interface DisplayOption {\r\n  viewMode?: ViewMode;\r\n  /**\r\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\r\n   */\r\n  locale?: string;\r\n}\r\n\r\nexport interface StylingOption {\r\n  headerHeight?: number;\r\n  columnWidth?: number;\r\n  listCellWidth?: string;\r\n  rowHeight?: number;\r\n  ganttHeight?: number;\r\n  barCornerRadius?: number;\r\n  handleWidth?: number;\r\n  fontFamily?: string;\r\n  fontSize?: string;\r\n  /**\r\n   * How many of row width can be taken by task.\r\n   * From 0 to 100\r\n   */\r\n  barFill?: number;\r\n  barProgressColor?: string;\r\n  barProgressSelectedColor?: string;\r\n  barBackgroundColor?: string;\r\n  barBackgroundSelectedColor?: string;\r\n  milestoneBackgroundColor?: string;\r\n  milestoneBackgroundSelectedColor?: string;\r\n  arrowColor?: string;\r\n  arrowIndent?: number;\r\n  todayColor?: string;\r\n  TooltipContent?: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n  TaskListHeader?: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable?: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n    selectedTaskId: string;\r\n    /**\r\n     * Sets selected task by id\r\n     */\r\n    setSelectedTask: (taskId: string) => void;\r\n  }>;\r\n}\r\n\r\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\r\n  tasks: Task[];\r\n}\r\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].start;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newStartDate = startOfDate(newStartDate, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-header.module.css\";\r\n\r\nexport const TaskListHeaderDefault: React.FC<{\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n}> = ({ headerHeight, fontFamily, fontSize, rowWidth }) => {\r\n  return (\r\n    <div\r\n      className={styles.ganttTable}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      <div\r\n        className={styles.ganttTable_Header}\r\n        style={{\r\n          height: headerHeight - 2,\r\n        }}\r\n      >\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;Name\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.2,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;From\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.25,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;To\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-table.module.css\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport const TaskListTableDefault: React.FC<{\r\n  rowHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  locale: string;\r\n  tasks: Task[];\r\n  selectedTaskId: string;\r\n  setSelectedTask: (taskId: string) => void;\r\n}> = ({ rowHeight, rowWidth, tasks, fontFamily, fontSize, locale }) => {\r\n  const dateTimeOptions = {\r\n    weekday: \"short\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  return (\r\n    <div\r\n      className={styles.taskListWrapper}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      {tasks.map(t => {\r\n        return (\r\n          <div\r\n            className={styles.taskListTableRow}\r\n            style={{ height: rowHeight }}\r\n            key={`${t.id}row`}\r\n          >\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n              title={t.name}\r\n            >\r\n              &nbsp;{t.name}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.start.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;\r\n              {t.end.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  x: number;\r\n  svgHeight: number;\r\n  rowHeight: number;\r\n  task: BarTask;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  x,\r\n  rowHeight,\r\n  svgHeight,\r\n  task,\r\n  fontSize,\r\n  fontFamily,\r\n  TooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState((task.index - 1) * rowHeight);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const tooltipHeight = tooltipRef.current.offsetHeight;\r\n      const tooltipY = task.index * rowHeight + rowHeight;\r\n      if (tooltipHeight > tooltipY) {\r\n        setRelatedY(tooltipHeight * 0.5);\r\n      } else if (tooltipY + tooltipHeight > svgHeight) {\r\n        setRelatedY(svgHeight - tooltipHeight * 1.05);\r\n      }\r\n      setToolWidth(tooltipRef.current.scrollWidth * 1.1);\r\n    }\r\n  }, [tooltipRef, task]);\r\n  return (\r\n    <foreignObject x={x} y={relatedY} width={toolWidth} height={1000}>\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        <TooltipContent\r\n          task={task}\r\n          fontSize={fontSize}\r\n          fontFamily={fontFamily}\r\n        />\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nexport const StandardTooltipContent: React.FC<{\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n}> = ({ task, fontSize, fontFamily }) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      {task.end.getTime() - task.start.getTime() !== 0 && (\r\n        <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n          (task.end.getTime() - task.start.getTime()) /\r\n          (1000 * 60 * 60 * 24)\r\n        )} day(s)`}</p>\r\n      )}\r\n\r\n      <p className={styles.tooltipDefaultContainerParagraph}>\r\n        {!!task.progress && `Progress: ${task.progress} %`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport styles from \"./scroll.module.css\";\r\n\r\nexport const Scroll: React.FC<{\r\n  scroll: number;\r\n  ganttHeight: number;\r\n  ganttFullHeight: number;\r\n  headerHeight: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n}> = ({ scroll, ganttHeight, ganttFullHeight, headerHeight, onScroll }) => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scroll;\r\n    }\r\n  }, [scroll]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: ganttHeight, marginTop: headerHeight }}\r\n      className={styles.scroll}\r\n      onScroll={onScroll}\r\n      ref={scrollRef}\r\n    >\r\n      <div style={{ height: ganttFullHeight, width: 1 }} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport type TaskListProps = {\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  rowHeight: number;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  locale: string;\r\n  tasks: Task[];\r\n  horizontalContainerClass?: string;\r\n  selectedTask: BarTask | undefined;\r\n  setSelectedTask: (task: string) => void;\r\n  TaskListHeader: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n    selectedTaskId: string;\r\n    setSelectedTask: (taskId: string) => void;\r\n  }>;\r\n};\r\n\r\nexport const TaskList: React.FC<TaskListProps> = ({\r\n  headerHeight,\r\n  fontFamily,\r\n  fontSize,\r\n  rowWidth,\r\n  rowHeight,\r\n  scrollY,\r\n  tasks,\r\n  selectedTask,\r\n  setSelectedTask,\r\n  locale,\r\n  ganttHeight,\r\n  horizontalContainerClass,\r\n  TaskListHeader,\r\n  TaskListTable,\r\n}) => {\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  const headerProps = {\r\n    headerHeight,\r\n    fontFamily,\r\n    fontSize,\r\n    rowWidth,\r\n  };\r\n  const selectedTaskId = selectedTask ? selectedTask.id : \"\";\r\n  const tableProps = {\r\n    rowHeight,\r\n    rowWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks,\r\n    locale,\r\n    selectedTaskId: selectedTaskId,\r\n    setSelectedTask,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TaskListHeader {...headerProps} />\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={horizontalContainerClass}\r\n        style={ganttHeight ? { height: ganttHeight } : {}}\r\n      >\r\n        <TaskListTable {...tableProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  gridWidth: number;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  gridWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = 0;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [\r\n    <line\r\n      key=\"RowLineFirst\"\r\n      x=\"0\"\r\n      y1={0}\r\n      x2={gridWidth}\r\n      y2={0}\r\n      className={styles.gridRowLine}\r\n    />,\r\n  ];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={gridWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={gridWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={0}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\n\r\nexport type GridProps = GridBodyProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport { DateSetup } from \"../../types/date-setup\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dateSetup: DateSetup;\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dateSetup,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dateSetup.dates.length; i++) {\r\n      const date = dateSetup.dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i === 0 ||\r\n        date.getFullYear() !== dateSetup.dates[i - 1].getFullYear()\r\n      ) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 1;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    const dates = dateSetup.dates;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (dateSetup.viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      <rect\r\n        x={0}\r\n        y={0}\r\n        width={columnWidth * dateSetup.dates.length}\r\n        height={headerHeight}\r\n        className={styles.calendarHeader}\r\n      />\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  taskHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  taskHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskHeight / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskHeight / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask } from \"../types/bar-task\";\r\nimport { BarMoveAction } from \"../types/gantt-task-actions\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n) => {\r\n  const dateDelta =\r\n    dates[1].getTime() -\r\n    dates[0].getTime() -\r\n    dates[1].getTimezoneOffset() * 60 * 1000 +\r\n    dates[0].getTimezoneOffset() * 60 * 1000;\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor,\r\n      milestoneBackgroundColor,\r\n      milestoneBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  // set dependencies\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nconst convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n): BarTask => {\r\n  let barTask: BarTask;\r\n  switch (task.type) {\r\n    case \"milestone\":\r\n      barTask = convertToMilestone(\r\n        task,\r\n        index,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        milestoneBackgroundColor,\r\n        milestoneBackgroundSelectedColor\r\n      );\r\n      break;\r\n    default:\r\n      barTask = convertToBar(\r\n        task,\r\n        index,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      );\r\n      break;\r\n  }\r\n  return barTask;\r\n};\r\n\r\nconst convertToBar = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nconst convertToMilestone = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  milestoneBackgroundColor: string,\r\n  milestoneBackgroundSelectedColor: string\r\n) => {\r\n  const x = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const x1 = x - taskHeight * 0.5;\r\n  const x2 = x + taskHeight * 0.5;\r\n\r\n  const rotatedHeight = taskHeight / 1.414;\r\n  const styles = {\r\n    backgroundColor: milestoneBackgroundColor,\r\n    backgroundSelectedColor: milestoneBackgroundSelectedColor,\r\n    progressColor: \"\",\r\n    progressSelectedColor: \"\",\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    end: task.start,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    progress: 0,\r\n    height: rotatedHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nconst taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nconst taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number\r\n) => {\r\n  const y = index * rowHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nconst progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nconst startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nconst endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nconst moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nconst dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n\r\n/**\r\n * Method handles event in real time(mousemove) and on finish(mouseup)\r\n */\r\nexport const handleTaskBySVGMouseEvent = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  let result: { isChanged: boolean; changedTask: BarTask };\r\n  switch (selectedTask.type) {\r\n    case \"milestone\":\r\n      result = handleTaskBySVGMouseEventForMilestone(\r\n        svgX,\r\n        action,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      break;\r\n    default:\r\n      result = handleTaskBySVGMouseEventForBar(\r\n        svgX,\r\n        action,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      break;\r\n  }\r\n  return result;\r\n};\r\n\r\nconst handleTaskBySVGMouseEventForBar = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"progress\":\r\n      changedTask.progress = progressByX(svgX, selectedTask);\r\n      isChanged = changedTask.progress !== selectedTask.progress;\r\n      break;\r\n    case \"start\": {\r\n      const newX1 = startByX(svgX, xStep, selectedTask);\r\n      changedTask.x1 = newX1;\r\n      isChanged = changedTask.x1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"end\": {\r\n      const newX2 = endByX(svgX, xStep, selectedTask);\r\n      changedTask.x2 = newX2;\r\n      isChanged = changedTask.x2 !== selectedTask.x2;\r\n      if (isChanged) {\r\n        changedTask.end = dateByX(\r\n          newX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = dateByX(\r\n          newMoveX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n\r\nconst handleTaskBySVGMouseEventForMilestone = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n): { isChanged: boolean; changedTask: BarTask } => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = changedTask.start;\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n","import { BarTask } from \"../types/bar-task\";\r\nimport { Task } from \"../types/public-types\";\r\n\r\nexport function isKeyboardEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.KeyboardEvent {\r\n  return (event as React.KeyboardEvent).key !== undefined;\r\n}\r\n\r\nexport function isMouseEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent | React.FocusEvent\r\n): event is React.MouseEvent {\r\n  return (event as React.MouseEvent).clientX !== undefined;\r\n}\r\n\r\nexport function isBarTask(task: Task | BarTask): task is BarTask {\r\n  return (task as BarTask).x1 !== undefined;\r\n}\r\n","import React from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  progressWithByParams,\r\n  getProgressPoint,\r\n} from \"../../../helpers/bar-helper\";\r\nimport { BarDisplay } from \"./bar-display\";\r\nimport { BarDateHandle } from \"./bar-date-handle\";\r\nimport { BarProgressHandle } from \"./bar-progress-handle\";\r\nimport { TaskItemProps } from \"../task-item\";\r\nimport styles from \"./bar.module.css\";\r\n\r\nexport const Bar: React.FC<TaskItemProps> = ({\r\n  task,\r\n  isProgressChangeable,\r\n  isDateChangeable,\r\n  onEventStart,\r\n  isSelected,\r\n}) => {\r\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\r\n  const progressPoint = getProgressPoint(\r\n    progressWidth + task.x1,\r\n    task.y,\r\n    task.height\r\n  );\r\n  const handleHeight = task.height - 2;\r\n  return (\r\n    <g className={styles.barWrapper} tabIndex={0}>\r\n      <BarDisplay\r\n        x={task.x1}\r\n        y={task.y}\r\n        width={task.x2 - task.x1}\r\n        height={task.height}\r\n        progressWidth={progressWidth}\r\n        barCornerRadius={task.barCornerRadius}\r\n        styles={task.styles}\r\n        isSelected={isSelected}\r\n        onMouseDown={e => {\r\n          isDateChangeable && onEventStart(\"move\", task, e);\r\n        }}\r\n      />\r\n      <g className=\"handleGroup\">\r\n        {isDateChangeable && (\r\n          <g>\r\n            {/* left */}\r\n            <BarDateHandle\r\n              x={task.x1 + 1}\r\n              y={task.y + 1}\r\n              width={task.handleWidth}\r\n              height={handleHeight}\r\n              barCornerRadius={task.barCornerRadius}\r\n              onMouseDown={e => {\r\n                onEventStart(\"start\", task, e);\r\n              }}\r\n            />\r\n            {/* right */}\r\n            <BarDateHandle\r\n              x={task.x2 - task.handleWidth - 1}\r\n              y={task.y + 1}\r\n              width={task.handleWidth}\r\n              height={handleHeight}\r\n              barCornerRadius={task.barCornerRadius}\r\n              onMouseDown={e => {\r\n                onEventStart(\"end\", task, e);\r\n              }}\r\n            />\r\n          </g>\r\n        )}\r\n        {isProgressChangeable && (\r\n          <BarProgressHandle\r\n            progressPoint={progressPoint}\r\n            onMouseDown={e => {\r\n              onEventStart(\"progress\", task, e);\r\n            }}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TaskItemProps } from \"../task-item\";\r\nimport styles from \"./milestone.module.css\";\r\n\r\nexport const Milestone: React.FC<TaskItemProps> = ({\r\n  task,\r\n  isDateChangeable,\r\n  onEventStart,\r\n  isSelected,\r\n}) => {\r\n  const transform = `rotate(45 ${task.x1 + task.height * 0.356} \r\n    ${task.y + task.height * 0.85})`;\r\n  const getBarColor = () => {\r\n    return isSelected\r\n      ? task.styles.backgroundSelectedColor\r\n      : task.styles.backgroundColor;\r\n  };\r\n\r\n  return (\r\n    <g tabIndex={0} className={styles.milestoneWrapper}>\r\n      <rect\r\n        fill={getBarColor()}\r\n        x={task.x1}\r\n        width={task.height}\r\n        y={task.y}\r\n        height={task.height}\r\n        rx={task.barCornerRadius}\r\n        ry={task.barCornerRadius}\r\n        transform={transform}\r\n        className={styles.milestoneBackground}\r\n        onMouseDown={e => {\r\n          isDateChangeable && onEventStart(\"move\", task, e);\r\n        }}\r\n      />\r\n    </g>\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { GanttContentMoveAction } from \"../../types/gantt-task-actions\";\r\nimport { Bar } from \"./bar/bar\";\r\nimport { Milestone } from \"./milestone/milestone\";\r\nimport style from \"./task-list.module.css\";\r\n\r\nexport type TaskItemProps = {\r\n  task: BarTask;\r\n  arrowIndent: number;\r\n  taskHeight: number;\r\n  isProgressChangeable: boolean;\r\n  isDateChangeable: boolean;\r\n  isDelete: boolean;\r\n  isSelected: boolean;\r\n  onEventStart: (\r\n    action: GanttContentMoveAction,\r\n    selectedTask: BarTask,\r\n    event?: React.MouseEvent | React.KeyboardEvent\r\n  ) => any;\r\n};\r\n\r\nexport const TaskItem: React.FC<TaskItemProps> = props => {\r\n  const {\r\n    task,\r\n    arrowIndent,\r\n    isDelete,\r\n    taskHeight,\r\n    isSelected,\r\n    onEventStart,\r\n  } = {\r\n    ...props,\r\n  };\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [taskItem, setTaskItem] = useState<JSX.Element>(<div />);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    switch (task.type) {\r\n      case \"milestone\":\r\n        setTaskItem(<Milestone {...props} />);\r\n        break;\r\n      default:\r\n        setTaskItem(<Bar {...props} />);\r\n        break;\r\n    }\r\n  }, [task, isSelected]);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current) {\r\n      setIsTextInside(textRef.current.getBBox().width < task.x2 - task.x1);\r\n    }\r\n  }, [textRef, task]);\r\n\r\n  const getX = () => {\r\n    const width = task.x2 - task.x1;\r\n    const hasChild = task.barChildren.length > 0;\r\n    return isTextInside\r\n      ? task.x1 + width * 0.5\r\n      : task.x1 + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g\r\n      onKeyDown={e => {\r\n        switch (e.key) {\r\n          case \"Delete\": {\r\n            if (isDelete) onEventStart(\"delete\", task, e);\r\n            break;\r\n          }\r\n        }\r\n        e.stopPropagation();\r\n      }}\r\n      onMouseEnter={e => {\r\n        onEventStart(\"mouseenter\", task, e);\r\n      }}\r\n      onMouseLeave={e => {\r\n        onEventStart(\"mouseleave\", task, e);\r\n      }}\r\n      onDoubleClick={e => {\r\n        onEventStart(\"dblclick\", task, e);\r\n      }}\r\n      onFocus={() => {\r\n        onEventStart(\"select\", task);\r\n      }}\r\n    >\r\n      {taskItem}\r\n      <text\r\n        x={getX()}\r\n        y={task.y + taskHeight * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {task.name}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../other/arrow\";\r\nimport { handleTaskBySVGMouseEvent } from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../other/tooltip\";\r\nimport { isKeyboardEvent } from \"../../helpers/other-helper\";\r\nimport { TaskItem } from \"../task-item/task-item\";\r\nimport {\r\n  BarMoveAction,\r\n  GanttContentMoveAction,\r\n  GanttEvent,\r\n} from \"../../types/gantt-task-actions\";\r\n\r\nexport type TaskGanttContentProps = {\r\n  tasks: BarTask[];\r\n  dates: Date[];\r\n  ganttEvent: GanttEvent;\r\n  selectedTask: BarTask | undefined;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  timeStep: number;\r\n  svg?: React.RefObject<SVGSVGElement>;\r\n  svgHeight: number;\r\n  taskHeight: number;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  setGanttEvent: (value: GanttEvent) => void;\r\n  setFailedTask: (value: BarTask | null) => void;\r\n  setSelectedTask: (taskId: string) => void;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n} & EventOption;\r\n\r\nexport const TaskGanttContent: React.FC<TaskGanttContentProps> = ({\r\n  tasks,\r\n  dates,\r\n  ganttEvent,\r\n  selectedTask,\r\n  rowHeight,\r\n  columnWidth,\r\n  timeStep,\r\n  svg,\r\n  svgHeight,\r\n  taskHeight,\r\n  arrowColor,\r\n  arrowIndent,\r\n  fontFamily,\r\n  fontSize,\r\n  setGanttEvent,\r\n  setFailedTask,\r\n  setSelectedTask,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  TooltipContent,\r\n}) => {\r\n  const point = svg?.current?.createSVGPoint();\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // create xStep\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    setXStep(newXStep);\r\n  }, [columnWidth, dates, timeStep]);\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = async (event: MouseEvent) => {\r\n      if (!ganttEvent.changedTask || !point || !svg?.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { isChanged, changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        ganttEvent.action as BarMoveAction,\r\n        ganttEvent.changedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (isChanged) {\r\n        setGanttEvent({ action: ganttEvent.action, changedTask });\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = async (event: MouseEvent) => {\r\n      const { action, originalSelectedTask, changedTask } = ganttEvent;\r\n      if (!changedTask || !point || !svg?.current || !originalSelectedTask)\r\n        return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n      const { changedTask: newChangedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        action as BarMoveAction,\r\n        changedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n\r\n      const isNotLikeOriginal =\r\n        originalSelectedTask.start !== newChangedTask.start ||\r\n        originalSelectedTask.end !== newChangedTask.end ||\r\n        originalSelectedTask.progress !== newChangedTask.progress;\r\n\r\n      // remove listeners\r\n      svg.current.removeEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.removeEventListener(\"mouseup\", handleMouseUp);\r\n      setGanttEvent({ action: \"\" });\r\n      setIsMoving(false);\r\n\r\n      // custom operation start\r\n      let operationSuccess = true;\r\n      if (\r\n        (action === \"move\" || action === \"end\" || action === \"start\") &&\r\n        onDateChange &&\r\n        isNotLikeOriginal\r\n      ) {\r\n        try {\r\n          const result = await onDateChange(newChangedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      } else if (onProgressChange && isNotLikeOriginal) {\r\n        try {\r\n          const result = await onProgressChange(newChangedTask);\r\n          if (result !== undefined) {\r\n            operationSuccess = result;\r\n          }\r\n        } catch (error) {\r\n          operationSuccess = false;\r\n        }\r\n      }\r\n\r\n      // If operation is failed - return old state\r\n      if (!operationSuccess) {\r\n        setFailedTask(originalSelectedTask);\r\n      }\r\n    };\r\n\r\n    if (\r\n      !isMoving &&\r\n      (ganttEvent.action === \"move\" ||\r\n        ganttEvent.action === \"end\" ||\r\n        ganttEvent.action === \"start\" ||\r\n        ganttEvent.action === \"progress\") &&\r\n      svg?.current\r\n    ) {\r\n      svg.current.addEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.addEventListener(\"mouseup\", handleMouseUp);\r\n      setIsMoving(true);\r\n    }\r\n  }, [\r\n    ganttEvent,\r\n    xStep,\r\n    initEventX1Delta,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n    svg,\r\n    isMoving,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   */\r\n  const handleBarEventStart = async (\r\n    action: GanttContentMoveAction,\r\n    task: BarTask,\r\n    event?: React.MouseEvent | React.KeyboardEvent\r\n  ) => {\r\n    if (!event) {\r\n      if (action === \"select\") {\r\n        setSelectedTask(task.id);\r\n      }\r\n    }\r\n    // Keyboard events\r\n    else if (isKeyboardEvent(event)) {\r\n      if (action === \"delete\") {\r\n        if (onTaskDelete) {\r\n          try {\r\n            const result = await onTaskDelete(task);\r\n            if (result !== undefined && result) {\r\n              setGanttEvent({ action, changedTask: task });\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error on Delete. \" + error);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    // Mouse Events\r\n    else if (action === \"mouseenter\") {\r\n      if (!ganttEvent.action) {\r\n        setGanttEvent({\r\n          action,\r\n          changedTask: task,\r\n          originalSelectedTask: task,\r\n        });\r\n      }\r\n    } else if (action === \"mouseleave\") {\r\n      if (ganttEvent.action === \"mouseenter\") {\r\n        setGanttEvent({ action: \"\" });\r\n      }\r\n    } else if (action === \"dblclick\") {\r\n      !!onDoubleClick && onDoubleClick(task);\r\n    }\r\n    // Change task event start\r\n    else if (action === \"move\") {\r\n      if (!svg?.current || !point) return;\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n      setInitEventX1Delta(cursor.x - task.x1);\r\n      setGanttEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalSelectedTask: task,\r\n      });\r\n    } else {\r\n      setGanttEvent({\r\n        action,\r\n        changedTask: task,\r\n        originalSelectedTask: task,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {tasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${tasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={tasks[child]}\r\n                rowHeight={rowHeight}\r\n                taskHeight={taskHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {tasks.map(task => {\r\n          return (\r\n            <TaskItem\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              taskHeight={taskHeight}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              isDelete={!task.isDisabled}\r\n              onEventStart={handleBarEventStart}\r\n              key={task.id}\r\n              isSelected={!!selectedTask && task.id === selectedTask.id}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {ganttEvent.changedTask && (\r\n          <Tooltip\r\n            x={ganttEvent.changedTask.x2 + arrowIndent + arrowIndent * 0.5}\r\n            rowHeight={rowHeight}\r\n            svgHeight={svgHeight}\r\n            task={ganttEvent.changedTask}\r\n            fontFamily={fontFamily}\r\n            fontSize={fontSize}\r\n            TooltipContent={TooltipContent}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, SyntheticEvent } from \"react\";\r\nimport { GridProps, Grid } from \"../grid/grid\";\r\nimport { CalendarProps, Calendar } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps, TaskGanttContent } from \"./task-gantt-content\";\r\nimport styles from \"./gantt.module.css\";\r\n\r\nexport type TaskGanttProps = {\r\n  gridProps: GridProps;\r\n  calendarProps: CalendarProps;\r\n  barProps: TaskGanttContentProps;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  scrollX: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n};\r\nexport const TaskGantt: React.FC<TaskGanttProps> = ({\r\n  gridProps,\r\n  calendarProps,\r\n  barProps,\r\n  ganttHeight,\r\n  scrollY,\r\n  scrollX,\r\n  onScroll,\r\n}) => {\r\n  const ganttSVGRef = useRef<SVGSVGElement>(null);\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  const verticalContainerRef = useRef<HTMLDivElement>(null);\r\n  const newBarProps = { ...barProps, svg: ganttSVGRef };\r\n\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  useEffect(() => {\r\n    if (verticalContainerRef.current) {\r\n      verticalContainerRef.current.scrollLeft = scrollX;\r\n    }\r\n  }, [scrollX]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.ganttVerticalContainer}\r\n      ref={verticalContainerRef}\r\n      onScroll={onScroll}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={gridProps.gridWidth}\r\n        height={calendarProps.headerHeight}\r\n        fontFamily={barProps.fontFamily}\r\n      >\r\n        <Calendar {...calendarProps} />\r\n      </svg>\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={styles.horizontalContainer}\r\n        style={\r\n          ganttHeight\r\n            ? { height: ganttHeight, width: gridProps.gridWidth }\r\n            : { width: gridProps.gridWidth }\r\n        }\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={gridProps.gridWidth}\r\n          height={barProps.rowHeight * barProps.tasks.length}\r\n          fontFamily={barProps.fontFamily}\r\n          ref={ganttSVGRef}\r\n        >\r\n          <Grid {...gridProps} />\r\n          <TaskGanttContent {...newBarProps} />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport { ViewMode, GanttProps } from \"../../types/public-types\";\r\nimport { GridProps } from \"../grid/grid\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\nimport { CalendarProps } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps } from \"./task-gantt-content\";\r\nimport { TaskListHeaderDefault } from \"../task-list/task-list-header\";\r\nimport { TaskListTableDefault } from \"../task-list/task-list-table\";\r\nimport { StandardTooltipContent } from \"../other/tooltip\";\r\nimport { Scroll } from \"../other/scroll\";\r\nimport { TaskListProps, TaskList } from \"../task-list/task-list\";\r\nimport styles from \"./gantt.module.css\";\r\nimport { TaskGantt } from \"./task-gantt\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { convertToBarTasks } from \"../../helpers/bar-helper\";\r\nimport { GanttEvent } from \"../../types/gantt-task-actions\";\r\nimport { DateSetup } from \"../../types/date-setup\";\r\n\r\nexport const Gantt: React.FunctionComponent<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  listCellWidth = \"155px\",\r\n  rowHeight = 50,\r\n  ganttHeight = 0,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  milestoneBackgroundColor = \"#f1c453\",\r\n  milestoneBackgroundSelectedColor = \"#f29e4c\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  TooltipContent = StandardTooltipContent,\r\n  TaskListHeader = TaskListHeaderDefault,\r\n  TaskListTable = TaskListTableDefault,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  onSelect,\r\n}) => {\r\n  const wrapperRef = useRef<HTMLDivElement>(null);\r\n  const [dateSetup, setDateSetup] = useState<DateSetup>(() => {\r\n    const [startDate, endDate] = ganttDateRange(tasks, viewMode);\r\n    return { viewMode, dates: seedDates(startDate, endDate, viewMode) };\r\n  });\r\n\r\n  const [taskHeight, setTaskHeight] = useState((rowHeight * barFill) / 100);\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [ganttEvent, setGanttEvent] = useState<GanttEvent>({\r\n    action: \"\",\r\n  });\r\n\r\n  const [selectedTask, setSelectedTask] = useState<BarTask>();\r\n  const [failedTask, setFailedTask] = useState<BarTask | null>(null);\r\n  const [scrollY, setScrollY] = useState(0);\r\n  const [scrollX, setScrollX] = useState(0);\r\n  const [ignoreScrollEvent, setIgnoreScrollEvent] = useState(false);\r\n\r\n  const svgHeight = rowHeight * barTasks.length;\r\n  const gridWidth = dateSetup.dates.length * columnWidth;\r\n  const ganttFullHeight = barTasks.length * rowHeight;\r\n\r\n  // task change events\r\n  useEffect(() => {\r\n    const [startDate, endDate] = ganttDateRange(tasks, viewMode);\r\n    const newDates = seedDates(startDate, endDate, viewMode);\r\n    setDateSetup({ dates: newDates, viewMode });\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        newDates,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor,\r\n        milestoneBackgroundColor,\r\n        milestoneBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    viewMode,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    taskHeight,\r\n    handleWidth,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const { changedTask, action } = ganttEvent;\r\n    if (changedTask) {\r\n      if (action === \"delete\") {\r\n        setGanttEvent({ action: \"\" });\r\n        setBarTasks(barTasks.filter(t => t.id !== changedTask.id));\r\n      } else if (\r\n        action === \"move\" ||\r\n        action === \"end\" ||\r\n        action === \"start\" ||\r\n        action === \"progress\"\r\n      ) {\r\n        const prevStateTask = barTasks.find(t => t.id === changedTask.id);\r\n        if (\r\n          prevStateTask &&\r\n          (prevStateTask.start.getTime() !== changedTask.start.getTime() ||\r\n            prevStateTask.end.getTime() !== changedTask.end.getTime() ||\r\n            prevStateTask.progress !== changedTask.progress)\r\n        ) {\r\n          // actions for change\r\n          const newTaskList = barTasks.map(t =>\r\n            t.id === changedTask.id ? changedTask : t\r\n          );\r\n          setBarTasks(newTaskList);\r\n        }\r\n      }\r\n    }\r\n  }, [ganttEvent, barTasks]);\r\n\r\n  useEffect(() => {\r\n    if (failedTask) {\r\n      setBarTasks(barTasks.map(t => (t.id !== failedTask.id ? t : failedTask)));\r\n      setFailedTask(null);\r\n    }\r\n  }, [failedTask, barTasks]);\r\n\r\n  useEffect(() => {\r\n    const newTaskHeight = (rowHeight * barFill) / 100;\r\n    if (newTaskHeight !== taskHeight) {\r\n      setTaskHeight(newTaskHeight);\r\n    }\r\n  }, [rowHeight, barFill, taskHeight]);\r\n\r\n  // scroll events\r\n  useEffect(() => {\r\n    const handleWheel = (event: WheelEvent) => {\r\n      event.preventDefault();\r\n      const newScrollY = scrollY + event.deltaY;\r\n      if (newScrollY < 0) {\r\n        setScrollY(0);\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        setScrollY(ganttFullHeight - ganttHeight);\r\n      } else {\r\n        setScrollY(newScrollY);\r\n      }\r\n      setIgnoreScrollEvent(true);\r\n    };\r\n\r\n    // subscribe if scroll is necessary\r\n    if (\r\n      wrapperRef.current &&\r\n      ganttHeight &&\r\n      ganttHeight < barTasks.length * rowHeight\r\n    ) {\r\n      wrapperRef.current.addEventListener(\"wheel\", handleWheel, {\r\n        passive: false,\r\n      });\r\n    }\r\n    return () => {\r\n      if (wrapperRef.current) {\r\n        wrapperRef.current.removeEventListener(\"wheel\", handleWheel);\r\n      }\r\n    };\r\n  }, [wrapperRef.current, scrollY, ganttHeight, barTasks, rowHeight]);\r\n\r\n  const handleScrollY = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollY !== event.currentTarget.scrollTop && !ignoreScrollEvent) {\r\n      setScrollY(event.currentTarget.scrollTop);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  const handleScrollX = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollX !== event.currentTarget.scrollLeft && !ignoreScrollEvent) {\r\n      setScrollX(event.currentTarget.scrollLeft);\r\n    }\r\n    setIgnoreScrollEvent(false);\r\n  };\r\n\r\n  /**\r\n   * Handles arrow keys events and transform it to new scroll\r\n   */\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    let newScrollY = scrollY;\r\n    let newScrollX = scrollX;\r\n    let isX = true;\r\n    switch (event.key) {\r\n      case \"Down\": // IE/Edge specific value\r\n      case \"ArrowDown\":\r\n        newScrollY += rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Up\": // IE/Edge specific value\r\n      case \"ArrowUp\":\r\n        newScrollY -= rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Left\":\r\n      case \"ArrowLeft\":\r\n        newScrollX -= columnWidth;\r\n        break;\r\n      case \"Right\": // IE/Edge specific value\r\n      case \"ArrowRight\":\r\n        newScrollX += columnWidth;\r\n        break;\r\n    }\r\n    if (isX) {\r\n      if (newScrollX < 0) {\r\n        setScrollX(0);\r\n      } else if (newScrollX > gridWidth) {\r\n        setScrollX(gridWidth);\r\n      } else {\r\n        setScrollX(newScrollX);\r\n      }\r\n    } else {\r\n      if (newScrollY < 0) {\r\n        setScrollY(0);\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        setScrollY(ganttFullHeight - ganttHeight);\r\n      } else {\r\n        setScrollY(newScrollY);\r\n      }\r\n    }\r\n    setIgnoreScrollEvent(true);\r\n  };\r\n\r\n  /**\r\n   * Task select event\r\n   */\r\n  const handleSelectedTask = (taskId: string) => {\r\n    const newSelectedTask = barTasks.find(t => t.id === taskId);\r\n    const oldSelectedTask = barTasks.find(\r\n      t => !!selectedTask && t.id === selectedTask.id\r\n    );\r\n    if (onSelect) {\r\n      if (oldSelectedTask) {\r\n        onSelect(oldSelectedTask, false);\r\n      }\r\n      if (newSelectedTask) {\r\n        onSelect(newSelectedTask, true);\r\n      }\r\n    }\r\n    setSelectedTask(newSelectedTask);\r\n  };\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    gridWidth,\r\n    tasks: tasks,\r\n    rowHeight,\r\n    dates: dateSetup.dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dateSetup,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: TaskGanttContentProps = {\r\n    tasks: barTasks,\r\n    dates: dateSetup.dates,\r\n    ganttEvent,\r\n    selectedTask,\r\n    rowHeight,\r\n    taskHeight,\r\n    columnWidth,\r\n    arrowColor,\r\n    timeStep,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    svgHeight,\r\n    setGanttEvent,\r\n    setFailedTask,\r\n    setSelectedTask: handleSelectedTask,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onTaskDelete,\r\n    TooltipContent,\r\n  };\r\n\r\n  const tableProps: TaskListProps = {\r\n    rowHeight,\r\n    rowWidth: listCellWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks: barTasks,\r\n    locale,\r\n    headerHeight,\r\n    scrollY,\r\n    ganttHeight,\r\n    horizontalContainerClass: styles.horizontalContainer,\r\n    selectedTask,\r\n    setSelectedTask: handleSelectedTask,\r\n    TaskListHeader,\r\n    TaskListTable,\r\n  };\r\n  return (\r\n    <div\r\n      className={styles.wrapper}\r\n      onKeyDown={handleKeyDown}\r\n      tabIndex={0}\r\n      ref={wrapperRef}\r\n    >\r\n      {listCellWidth && <TaskList {...tableProps} />}\r\n      <TaskGantt\r\n        gridProps={gridProps}\r\n        calendarProps={calendarProps}\r\n        barProps={barProps}\r\n        ganttHeight={ganttHeight}\r\n        scrollY={scrollY}\r\n        scrollX={scrollX}\r\n        onScroll={handleScrollX}\r\n      />\r\n      <Scroll\r\n        ganttFullHeight={ganttFullHeight}\r\n        ganttHeight={ganttHeight}\r\n        headerHeight={headerHeight}\r\n        scroll={scrollY}\r\n        onScroll={handleScrollY}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  isChecked: boolean;\r\n  onViewListChange: (isChecked: boolean) => void;\r\n  onViewModeChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewModeChange,\r\n  onViewListChange,\r\n  isChecked,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.HalfDay)}\r\n      >\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewModeChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Week)}\r\n      >\r\n        Week\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Month)}\r\n      >\r\n        Month\r\n      </button>\r\n\r\n      <div className=\"Switch\">\r\n        <label className=\"Switch_Toggle\">\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={isChecked}\r\n            onClick={() => onViewListChange(!isChecked)}\r\n          />\r\n          <span className=\"Slider\" />\r\n        </label>\r\n        Show Task List\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { Task, ViewMode, Gantt } from \"gantt-task-react\";\r\nimport { ViewSwitcher } from \"./components/view-switcher\";\r\nimport { initTasks } from \"./helper\";\r\n\r\n//Init\r\nconst App = () => {\r\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\r\n  const [tasks, setTasks] = React.useState<Task[]>(initTasks());\r\n  const [isChecked, setIsChecked] = React.useState(true);\r\n  let columnWidth = 60;\r\n  if (view === ViewMode.Month) {\r\n    columnWidth = 300;\r\n  } else if (view === ViewMode.Week) {\r\n    columnWidth = 250;\r\n  }\r\n\r\n  let onTaskChange = (task: Task) => {\r\n    console.log(\"On date change Id:\" + task.id);\r\n    const newTasks = tasks.map(t => (t.id === task.id ? task : t));\r\n    setTasks(newTasks);\r\n  };\r\n\r\n  let onTaskDelete = (task: Task) => {\r\n    const conf = window.confirm(\"Are you sure about \" + task.name + \" ?\");\r\n    if (conf) {\r\n      setTasks(tasks.filter(t => t.id !== task.id));\r\n    }\r\n    return conf;\r\n  };\r\n\r\n  let onProgressChange = async (task: Task) => {\r\n    setTasks(tasks.map(t => (t.id === task.id ? task : t)));\r\n    console.log(\"On progress change Id:\" + task.id);\r\n  };\r\n\r\n  let onDblClick = (task: Task) => {\r\n    alert(\"On Double Click event Id:\" + task.id);\r\n  };\r\n\r\n  let onSelect = (task: Task, isSelected: boolean) => {\r\n    console.log(task.name + \" has \" + (isSelected ? \"selected\" : \"unselected\"));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ViewSwitcher\r\n        onViewModeChange={viewMode => setView(viewMode)}\r\n        onViewListChange={setIsChecked}\r\n        isChecked={isChecked}\r\n      />\r\n      <h3>Gantt With Unlimited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        columnWidth={columnWidth}\r\n      />\r\n      {/* <h3 style={{ color: \"#e56b6f\" }}>Milestones are not available</h3>\r\n      <h3>Gantt With Limited Height</h3>\r\n      <Gantt\r\n        tasks={tasks}\r\n        viewMode={view}\r\n        onDateChange={onTaskChange}\r\n        onTaskDelete={onTaskDelete}\r\n        onProgressChange={onProgressChange}\r\n        onDoubleClick={onDblClick}\r\n        onSelect={onSelect}\r\n        listCellWidth={isChecked ? \"155px\" : \"\"}\r\n        ganttHeight={300}\r\n        columnWidth={columnWidth}\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { Task } from \"../../dist/types/public-types\";\r\n\r\nexport function initTasks() {\r\n  const currentDate = new Date();\r\n  const tasks: Task[] = [\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\r\n      end: new Date(\r\n        currentDate.getFullYear(),\r\n        currentDate.getMonth(),\r\n        2,\r\n        12,\r\n        28\r\n      ),\r\n      name: \"Idea\",\r\n      id: \"Task 0\",\r\n      progress: 45,\r\n      type: \"task\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\r\n      name: \"Research\",\r\n      id: \"Task 1\",\r\n      progress: 25,\r\n      dependencies: [\"Task 0\"],\r\n      type: \"task\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\r\n      name: \"Discussion with team\",\r\n      id: \"Task 2\",\r\n      progress: 10,\r\n      dependencies: [\"Task 1\"],\r\n      type: \"task\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\r\n      name: \"Developing\",\r\n      id: \"Task 3\",\r\n      progress: 2,\r\n      dependencies: [\"Task 2\"],\r\n      type: \"task\",\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\r\n      name: \"Review\",\r\n      id: \"Task 4\",\r\n      type: \"task\",\r\n      progress: 70,\r\n      dependencies: [\"Task 2\"],\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 16),\r\n      name: \"Release\",\r\n      id: \"Task 6\",\r\n      progress: currentDate.getMonth(),\r\n      type: \"milestone\",\r\n      dependencies: [\"Task 4\"],\r\n      styles: { progressColor: \"#ffbb54\", progressSelectedColor: \"#ff9e0d\" },\r\n    },\r\n    {\r\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 24),\r\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 25),\r\n      name: \"Closing\",\r\n      id: \"Task 9\",\r\n      progress: 0,\r\n      isDisabled: true,\r\n      type: \"task\",\r\n    },\r\n  ];\r\n  return tasks;\r\n}\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}