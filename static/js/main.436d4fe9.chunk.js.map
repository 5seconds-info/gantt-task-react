{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/task-list/task-list-header.tsx","../../src/components/task-list/task-list-table.tsx","../../src/components/other/tooltip.tsx","../../src/components/other/scroll.tsx","../../src/components/task-list/task-list.tsx","../../src/components/grid/grid-body.tsx","../../src/components/grid/grid.tsx","../../src/components/calendar/top-part-of-calendar.tsx","../../src/components/calendar/calendar.tsx","../../src/helpers/bar-helper.ts","../../src/components/bar/bar-display.tsx","../../src/components/bar/bar-date-handle.tsx","../../src/components/bar/bar-progress-handle.tsx","../../src/components/bar/bar.tsx","../../src/components/other/arrow.tsx","../../src/helpers/other-helper.ts","../../src/components/gantt/task-gantt-content.tsx","../../src/components/gantt/task-gantt.tsx","../../src/components/gantt/gantt.tsx","components/view-switcher.tsx","App.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","getLocaleMonth","bottomValue","Intl","month","getMonday","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","TaskListHeaderDefault","rowWidth","className","styles","style","fontFamily","fontSize","height","headerHeight","minWidth","marginTop","TaskListTableDefault","locale","dateTimeOptions","weekday","year","tasks","t","rowHeight","key","id","maxWidth","Tooltip","TooltipContent","tooltipRef","useRef","useState","task","useEffect","tooltipHeight","tooltipY","setRelatedY","svgHeight","setToolWidth","x","y","relatedY","width","toolWidth","ref","StandardTooltipContent","name","Scroll","onScroll","scrollRef","TaskList","TaskListTable","horizontalContainerRef","headerProps","tableProps","React","horizontalContainerClass","ganttHeight","GridBody","todayColor","gridRows","rowLines","y1","x2","gridWidth","y2","now","tickX","ticks","today","i","dates","x1","columnWidth","fill","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","topValues","bottomValues","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","getCalendarValuesForOther","length","convertToBarTask","taskXCoordinate","taskYCoordinate","index","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","barCornerRadius","handleWidth","barChildren","xDate","dateByX","newDate","taskDate","handleTaskBySVGMouseEvent","changedTask","selectedTask","isChanged","barWidth","progressByX","svgX","newX1","additionalXValue","startByX","xStep","newX2","endByX","moveByX","newMoveX1","BarDisplay","onMouseDown","textRef","setIsTextInside","ry","rx","isSelected","progressWidth","isTextInside","arrowIndent","BarDateHandle","BarProgressHandle","points","progressPoint","Bar","isDelete","taskX2","progressX","taskY","point","onDoubleClick","e","onEventStart","tabIndex","onKeyDown","onMouseEnter","onMouseLeave","onFocus","setIsSelected","onBlur","text","hasChild","isDateChangeable","isProgressChangeable","Arrow","indexCompare","taskFrom","taskTo","taskToEndPosition","path","trianglePoints","strokeWidth","d","isKeyboardEvent","event","TaskGanttContent","svg","action","dateDelta","setXStep","timeStep","setBarTasks","taskHeight","barTasks","dependencies","j","dependence","convertToBarTasks","handleBarEventStart","a","onTaskDelete","newTasks","onTasksDateChange","barEvent","setBarEvent","originalTask","cursor","setInitEventX1Delta","handleMouseMove","handleMouseUp","isNotLikeOriginal","onDateChange","onProgressChange","setIsMoving","isMoving","arrowColor","stroke","child","isDisabled","TaskGantt","ganttSVGRef","verticalContainerRef","newBarProps","xmlns","gridProps","calendarProps","barProps","Gantt","listCellWidth","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","TaskListHeader","newStartDate","newEndDate","ganttDateRange","ganttTasks","currentDate","seedDates","ganttFullHeight","setGanttTasks","scrollY","onWheel","newScrollY","setScrollY","newScrollX","isX","setScrollX","scrollX","scroll","ViewSwitcher","onViewModeChange","onViewListChange","isChecked","onClick","QuarterDay","HalfDay","Day","Week","Month","type","defaultChecked","App","view","setView","setIsChecked","start","getFullYear","getMonth","end","progress","onTaskChange","console","log","window","confirm","onDblClick","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.436d4fe9.chunk.js","sourcesContent":["export enum ViewMode {\n  QuarterDay = \"Quarter Day\",\n  HalfDay = \"Half Day\",\n  Day = \"Day\",\n  /** ISO-8601 week */\n  Week = \"Week\",\n  Month = \"Month\",\n}\nexport interface Task {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  /**\n   * From 0 to 100\n   */\n  progress: number;\n  styles?: {\n    backgroundColor?: string;\n    backgroundSelectedColor?: string;\n    progressColor?: string;\n    progressSelectedColor?: string;\n  };\n  isDisabled?: boolean;\n  dependencies?: string[];\n}\n\nexport interface EventOption {\n  /**\n   * Time step value for date changes.\n   */\n  timeStep?: number;\n  onDoubleClick?: (task: Task) => void;\n  onDateChange?: (task: Task) => void | Promise<any>;\n  onProgressChange?: (task: Task) => void | Promise<any>;\n  onTaskDelete?: (task: Task) => void | Promise<any>;\n}\n\nexport interface DisplayOption {\n  viewMode?: ViewMode;\n  /**\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\n   */\n  locale?: string;\n}\n\nexport interface StylingOption {\n  headerHeight?: number;\n  columnWidth?: number;\n  listCellWidth?: string;\n  rowHeight?: number;\n  ganttHeight?: number;\n  barCornerRadius?: number;\n  handleWidth?: number;\n  fontFamily?: string;\n  fontSize?: string;\n  /**\n   * How many of row width can be taken by task.\n   * From 0 to 100\n   */\n  barFill?: number;\n  barProgressColor?: string;\n  barProgressSelectedColor?: string;\n  barBackgroundColor?: string;\n  barBackgroundSelectedColor?: string;\n  arrowColor?: string;\n  arrowIndent?: number;\n  todayColor?: string;\n  TooltipContent?: React.FC<{\n    task: Task;\n    fontSize: string;\n    fontFamily: string;\n  }>;\n  TaskListHeader?: React.FC<{\n    headerHeight: number;\n    rowWidth: string;\n    fontFamily: string;\n    fontSize: string;\n  }>;\n  TaskListTable?: React.FC<{\n    rowHeight: number;\n    rowWidth: string;\n    fontFamily: string;\n    fontSize: string;\n    locale: string;\n    tasks: Task[];\n  }>;\n}\n\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\n  tasks: Task[];\n}\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].end;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newStartDate = startOfDate(newStartDate, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-header.module.css\";\r\n\r\nexport const TaskListHeaderDefault: React.FC<{\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n}> = ({ headerHeight, fontFamily, fontSize, rowWidth }) => {\r\n  return (\r\n    <div\r\n      className={styles.ganttTable}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      <div\r\n        className={styles.ganttTable_Header}\r\n        style={{\r\n          height: headerHeight - 2,\r\n        }}\r\n      >\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;Name\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.2,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;From\r\n        </div>\r\n        <div\r\n          className={styles.ganttTable_HeaderSeparator}\r\n          style={{\r\n            height: headerHeight * 0.5,\r\n            marginTop: headerHeight * 0.25,\r\n          }}\r\n        />\r\n        <div\r\n          className={styles.ganttTable_HeaderItem}\r\n          style={{\r\n            minWidth: rowWidth,\r\n          }}\r\n        >\r\n          &nbsp;To\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./task-list-table.module.css\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport const TaskListTableDefault: React.FC<{\r\n  rowHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  locale: string;\r\n  tasks: Task[];\r\n}> = ({ rowHeight, rowWidth, tasks, fontFamily, fontSize, locale }) => {\r\n  const dateTimeOptions = {\r\n    weekday: \"short\",\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  };\r\n  return (\r\n    <div\r\n      className={styles.taskListWrapper}\r\n      style={{\r\n        fontFamily: fontFamily,\r\n        fontSize: fontSize,\r\n      }}\r\n    >\r\n      {tasks.map(t => {\r\n        return (\r\n          <div\r\n            className={styles.taskListTableRow}\r\n            style={{ height: rowHeight }}\r\n            key={`${t.id}row`}\r\n          >\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n                maxWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.name}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.start.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n            <div\r\n              className={styles.taskListCell}\r\n              style={{\r\n                minWidth: rowWidth,\r\n              }}\r\n            >\r\n              &nbsp;{t.end.toLocaleDateString(locale, dateTimeOptions)}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  x: number;\r\n  svgHeight: number;\r\n  rowHeight: number;\r\n  task: BarTask;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  x,\r\n  rowHeight,\r\n  svgHeight,\r\n  task,\r\n  fontSize,\r\n  fontFamily,\r\n  TooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState((task.index - 1) * rowHeight);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const tooltipHeight = tooltipRef.current.offsetHeight;\r\n      const tooltipY = task.index * rowHeight + rowHeight;\r\n      if (tooltipHeight > tooltipY) {\r\n        setRelatedY(tooltipHeight * 0.5);\r\n      } else if (tooltipY + tooltipHeight > svgHeight) {\r\n        setRelatedY(svgHeight - tooltipHeight * 1.05);\r\n      }\r\n      setToolWidth(tooltipRef.current.scrollWidth * 1.1);\r\n    }\r\n  }, [tooltipRef, task]);\r\n  return (\r\n    <foreignObject x={x} y={relatedY} width={toolWidth} height={1000}>\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        <TooltipContent\r\n          task={task}\r\n          fontSize={fontSize}\r\n          fontFamily={fontFamily}\r\n        />\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nexport const StandardTooltipContent: React.FC<{\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n}> = ({ task, fontSize, fontFamily }) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n        (task.end.getTime() - task.start.getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n      )} day(s)`}</p>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>\r\n        {!!task.progress && `Progress: ${task.progress} %`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { SyntheticEvent, useRef, useEffect } from \"react\";\r\nimport styles from \"./scroll.module.css\";\r\n\r\nexport const Scroll: React.FC<{\r\n  scroll: number;\r\n  ganttHeight: number;\r\n  ganttFullHeight: number;\r\n  headerHeight: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n}> = ({ scroll, ganttHeight, ganttFullHeight, headerHeight, onScroll }) => {\r\n  const scrollRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    if (scrollRef.current) {\r\n      scrollRef.current.scrollTop = scroll;\r\n    }\r\n  }, [scroll]);\r\n\r\n  return (\r\n    <div\r\n      style={{ height: ganttHeight, marginTop: headerHeight }}\r\n      className={styles.scroll}\r\n      onScroll={onScroll}\r\n      ref={scrollRef}\r\n    >\r\n      <div style={{ height: ganttFullHeight, width: 1 }} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\n\r\nexport type TaskListProps = {\r\n  headerHeight: number;\r\n  rowWidth: string;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n  rowHeight: number;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  locale: string;\r\n  tasks: Task[];\r\n  horizontalContainerClass?: string;\r\n  TaskListHeader: React.FC<{\r\n    headerHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n  }>;\r\n  TaskListTable: React.FC<{\r\n    rowHeight: number;\r\n    rowWidth: string;\r\n    fontFamily: string;\r\n    fontSize: string;\r\n    locale: string;\r\n    tasks: Task[];\r\n  }>;\r\n};\r\n\r\nexport const TaskList: React.FC<TaskListProps> = ({\r\n  headerHeight,\r\n  fontFamily,\r\n  fontSize,\r\n  rowWidth,\r\n  rowHeight,\r\n  scrollY,\r\n  tasks,\r\n  locale,\r\n  ganttHeight,\r\n  horizontalContainerClass,\r\n  TaskListHeader,\r\n  TaskListTable,\r\n}) => {\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  const headerProps = {\r\n    headerHeight,\r\n    fontFamily,\r\n    fontSize,\r\n    rowWidth,\r\n  };\r\n  const tableProps = {\r\n    rowHeight,\r\n    rowWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks,\r\n    locale,\r\n  };\r\n  return (\r\n    <div>\r\n      <TaskListHeader {...headerProps} />\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={horizontalContainerClass}\r\n        style={ganttHeight ? { height: ganttHeight } : {}}\r\n      >\r\n        <TaskListTable {...tableProps} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  gridWidth: number;\r\n  rowHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  gridWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = 0;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [\r\n    <line\r\n      key=\"RowLineFirst\"\r\n      x=\"0\"\r\n      y1={0}\r\n      x2={gridWidth}\r\n      y2={0}\r\n      className={styles.gridRowLine}\r\n    />,\r\n  ];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={gridWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={gridWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={0}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\n\r\nexport type GridProps = GridBodyProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dates: Date[];\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dates,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getFullYear() !== dates[i - 1].getFullYear()) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 1;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue + date.getFullYear()}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      <rect\r\n        x={0}\r\n        y={0}\r\n        width={columnWidth * dates.length}\r\n        height={headerHeight}\r\n        className={styles.calendarHeader}\r\n      />\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask } from \"../types/bar-task\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  barFill: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n) => {\r\n  const dateDelta =\r\n    dates[1].getTime() -\r\n    dates[0].getTime() -\r\n    dates[1].getTimezoneOffset() * 60 * 1000 +\r\n    dates[0].getTimezoneOffset() * 60 * 1000;\r\n  const taskHeight = (rowHeight * barFill) / 100;\r\n\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  // set dependencies\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nexport const convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight);\r\n\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nexport const taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nexport const taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number\r\n) => {\r\n  const y = index * rowHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nexport const startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nexport const dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport type BarMoveAction = \"progress\" | \"end\" | \"start\" | \"move\" | \"\";\r\n\r\n/**\r\n * Method handles event in real time(mousemove) and on finish(mouseup)\r\n */\r\nexport const handleTaskBySVGMouseEvent = (\r\n  svgX: number,\r\n  action: BarMoveAction,\r\n  selectedTask: BarTask,\r\n  xStep: number,\r\n  timeStep: number,\r\n  initEventX1Delta: number\r\n) => {\r\n  const changedTask: BarTask = { ...selectedTask };\r\n  let isChanged = false;\r\n  switch (action) {\r\n    case \"progress\":\r\n      changedTask.progress = progressByX(svgX, selectedTask);\r\n      isChanged = changedTask.progress !== selectedTask.progress;\r\n      break;\r\n    case \"start\": {\r\n      const newX1 = startByX(svgX, xStep, selectedTask);\r\n      changedTask.x1 = newX1;\r\n      isChanged = changedTask.x1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"end\": {\r\n      const newX2 = endByX(svgX, xStep, selectedTask);\r\n      changedTask.x2 = newX2;\r\n      isChanged = changedTask.x2 !== selectedTask.x2;\r\n      if (isChanged) {\r\n        changedTask.end = dateByX(\r\n          newX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n      }\r\n      break;\r\n    }\r\n    case \"move\": {\r\n      const [newMoveX1, newMoveX2] = moveByX(\r\n        svgX - initEventX1Delta,\r\n        xStep,\r\n        selectedTask\r\n      );\r\n      isChanged = newMoveX1 !== selectedTask.x1;\r\n      if (isChanged) {\r\n        changedTask.start = dateByX(\r\n          newMoveX1,\r\n          selectedTask.x1,\r\n          selectedTask.start,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.end = dateByX(\r\n          newMoveX2,\r\n          selectedTask.x2,\r\n          selectedTask.end,\r\n          xStep,\r\n          timeStep\r\n        );\r\n        changedTask.x1 = newMoveX1;\r\n        changedTask.x2 = newMoveX2;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return { isChanged, changedTask };\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  text: string;\r\n  hasChild: boolean;\r\n  arrowIndent: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  text,\r\n  hasChild,\r\n  arrowIndent,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current)\r\n      setIsTextInside(textRef.current.getBBox().width < width);\r\n  }, [textRef, width]);\r\n\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  const getX = () => {\r\n    return isTextInside\r\n      ? x + width * 0.5\r\n      : x + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n      <text\r\n        x={getX()}\r\n        y={y + height * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {text}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport { BarTask } from \"../../types/bar-task\";\nimport {\n  progressWithByParams,\n  getProgressPoint,\n} from \"../../helpers/bar-helper\";\nimport styles from \"./bar.module.css\";\nimport { GanttContentMoveAction } from \"../gantt/task-gantt-content\";\nimport { BarDisplay } from \"./bar-display\";\nimport { BarDateHandle } from \"./bar-date-handle\";\nimport { BarProgressHandle } from \"./bar-progress-handle\";\n\nexport type BarProps = {\n  task: BarTask;\n  arrowIndent: number;\n  isProgressChangeable: boolean;\n  isDateChangeable: boolean;\n  isDelete: boolean;\n  onEventStart: (\n    event: React.MouseEvent | React.KeyboardEvent,\n    action: GanttContentMoveAction,\n    selectedTask: BarTask\n  ) => any;\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  task,\n  arrowIndent,\n  isProgressChangeable,\n  isDateChangeable,\n  onEventStart,\n  isDelete,\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\n  const progressPoint = getProgressPoint(\n    progressWidth + task.x1,\n    task.y,\n    task.height\n  );\n\n  return (\n    <g\n      className={styles.barWrapper}\n      onDoubleClick={e => {\n        onEventStart(e, \"dblclick\", task);\n      }}\n      tabIndex={0}\n      onKeyDown={e => {\n        switch (e.key) {\n          case \"Delete\": {\n            if (isDelete) onEventStart(e, \"delete\", task);\n            break;\n          }\n        }\n        e.stopPropagation();\n      }}\n      onMouseEnter={e => {\n        onEventStart(e, \"mouseenter\", task);\n      }}\n      onMouseLeave={e => {\n        onEventStart(e, \"mouseleave\", task);\n      }}\n      onFocus={() => setIsSelected(true)}\n      onBlur={() => setIsSelected(false)}\n    >\n      <BarDisplay\n        x={task.x1}\n        y={task.y}\n        width={task.x2 - task.x1}\n        height={task.height}\n        progressWidth={progressWidth}\n        barCornerRadius={task.barCornerRadius}\n        text={task.name}\n        hasChild={task.barChildren.length > 0}\n        arrowIndent={arrowIndent}\n        styles={task.styles}\n        isSelected={isSelected}\n        onMouseDown={e => {\n          isDateChangeable && onEventStart(e, \"move\", task);\n        }}\n      />\n      <g className=\"handleGroup\">\n        {isDateChangeable && (\n          <g>\n            {/* left */}\n            <BarDateHandle\n              x={task.x1 + 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(e, \"start\", task);\n              }}\n            />\n            {/* right */}\n            <BarDateHandle\n              x={task.x2 - task.handleWidth - 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                onEventStart(e, \"end\", task);\n              }}\n            />\n          </g>\n        )}\n        {isProgressChangeable && (\n          <BarProgressHandle\n            progressPoint={progressPoint}\n            onMouseDown={e => {\n              onEventStart(e, \"progress\", task);\n            }}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskTo.height / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskFrom.height / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import { BarTask } from \"../types/bar-task\";\r\nimport { Task } from \"../types/public-types\";\r\n\r\nexport function isKeyboardEvent(\r\n  event: React.MouseEvent | React.KeyboardEvent\r\n): event is React.KeyboardEvent {\r\n  return (event as React.KeyboardEvent).key !== undefined;\r\n}\r\n\r\nexport function isBarTask(task: Task | BarTask): task is BarTask {\r\n  return (task as BarTask).x1 !== undefined;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { Bar } from \"../bar/bar\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../other/arrow\";\r\nimport {\r\n  convertToBarTasks,\r\n  handleTaskBySVGMouseEvent,\r\n  BarMoveAction,\r\n} from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../other/tooltip\";\r\nimport { isKeyboardEvent } from \"../../helpers/other-helper\";\r\n\r\nexport type GanttContentMoveAction =\r\n  | \"mouseenter\"\r\n  | \"mouseleave\"\r\n  | \"delete\"\r\n  | \"dblclick\"\r\n  | BarMoveAction;\r\nexport type BarEvent = {\r\n  selectedTask?: BarTask;\r\n  originalTask?: BarTask;\r\n  action: GanttContentMoveAction;\r\n};\r\nexport type TaskGanttContentProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  rowHeight: number;\r\n  barCornerRadius: number;\r\n  columnWidth: number;\r\n  barFill: number;\r\n  barProgressColor: string;\r\n  barProgressSelectedColor: string;\r\n  barBackgroundColor: string;\r\n  barBackgroundSelectedColor: string;\r\n  handleWidth: number;\r\n  timeStep: number;\r\n  svg?: React.RefObject<SVGSVGElement>;\r\n  svgHeight: number;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  TooltipContent: React.FC<{\r\n    task: Task;\r\n    fontSize: string;\r\n    fontFamily: string;\r\n  }>;\r\n  onTasksDateChange: (tasks: Task[]) => void;\r\n} & EventOption;\r\n\r\nexport const TaskGanttContent: React.FC<TaskGanttContentProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  barCornerRadius,\r\n  columnWidth,\r\n  barFill,\r\n  barProgressColor,\r\n  barProgressSelectedColor,\r\n  barBackgroundColor,\r\n  barBackgroundSelectedColor,\r\n  handleWidth,\r\n  timeStep,\r\n  svg,\r\n  svgHeight,\r\n  arrowColor,\r\n  arrowIndent,\r\n  fontFamily,\r\n  fontSize,\r\n  onTasksDateChange,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  TooltipContent,\r\n}) => {\r\n  const point = svg?.current?.createSVGPoint();\r\n  const [barEvent, setBarEvent] = useState<BarEvent>({\r\n    action: \"\",\r\n  });\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n  const [isMoving, setIsMoving] = useState(false);\r\n\r\n  // create xStep\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    setXStep(newXStep);\r\n  }, [columnWidth, dates, timeStep]);\r\n\r\n  // generate tasks\r\n  useEffect(() => {\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        dates,\r\n        columnWidth,\r\n        rowHeight,\r\n        barFill,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    handleWidth,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   */\r\n  const handleBarEventStart = async (\r\n    event: React.MouseEvent | React.KeyboardEvent,\r\n    action: GanttContentMoveAction,\r\n    selectedTask: BarTask\r\n  ) => {\r\n    if (isKeyboardEvent(event)) {\r\n      if (action === \"delete\") {\r\n        if (onTaskDelete) {\r\n          await onTaskDelete(selectedTask);\r\n          const newTasks = barTasks.filter(t => t.id !== selectedTask.id);\r\n          onTasksDateChange(newTasks);\r\n        }\r\n      }\r\n    } else if (action === \"mouseenter\") {\r\n      if (!barEvent.action) {\r\n        setBarEvent({ action, selectedTask, originalTask: selectedTask });\r\n      }\r\n    } else if (action === \"mouseleave\") {\r\n      if (barEvent.action === \"mouseenter\") {\r\n        setBarEvent({ action: \"\" });\r\n      }\r\n    } else if (action === \"move\") {\r\n      if (!svg?.current || !point) return;\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg.current.getScreenCTM()?.inverse()\r\n      );\r\n      setInitEventX1Delta(cursor.x - selectedTask.x1);\r\n      setBarEvent({ action, selectedTask, originalTask: selectedTask });\r\n    } else if (action === \"dblclick\") {\r\n      !!onDoubleClick && onDoubleClick(selectedTask);\r\n    } else {\r\n      setBarEvent({\r\n        action,\r\n        selectedTask,\r\n        originalTask: selectedTask,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = async (event: MouseEvent) => {\r\n      if (!barEvent.selectedTask || !point || !svg?.current) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { isChanged, changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        barEvent.action as BarMoveAction,\r\n        barEvent.selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n      if (isChanged) {\r\n        setBarTasks(\r\n          barTasks.map(t => (t.id === changedTask.id ? changedTask : t))\r\n        );\r\n        setBarEvent({ ...barEvent, selectedTask: changedTask });\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = async (event: MouseEvent) => {\r\n      const { selectedTask, action, originalTask } = barEvent;\r\n\r\n      if (!selectedTask || !point || !svg?.current || !originalTask) return;\r\n      event.preventDefault();\r\n\r\n      point.x = event.clientX;\r\n      const cursor = point.matrixTransform(\r\n        svg?.current.getScreenCTM()?.inverse()\r\n      );\r\n\r\n      const { changedTask } = handleTaskBySVGMouseEvent(\r\n        cursor.x,\r\n        action as BarMoveAction,\r\n        selectedTask,\r\n        xStep,\r\n        timeStep,\r\n        initEventX1Delta\r\n      );\r\n\r\n      const isNotLikeOriginal =\r\n        originalTask.start !== changedTask.start ||\r\n        originalTask.end !== changedTask.end ||\r\n        originalTask.progress !== changedTask.progress;\r\n\r\n      if (\r\n        (action === \"move\" || action === \"end\" || action === \"start\") &&\r\n        onDateChange &&\r\n        isNotLikeOriginal\r\n      ) {\r\n        await onDateChange(changedTask);\r\n        const newTasks = barTasks.map(t =>\r\n          t.id === changedTask.id ? changedTask : t\r\n        );\r\n        onTasksDateChange(newTasks);\r\n      } else if (onProgressChange && isNotLikeOriginal) {\r\n        await onProgressChange(changedTask);\r\n      }\r\n      svg.current.removeEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.removeEventListener(\"mouseup\", handleMouseUp);\r\n      setBarEvent({ action: \"\" });\r\n      setIsMoving(false);\r\n    };\r\n\r\n    if (\r\n      !isMoving &&\r\n      (barEvent.action === \"move\" ||\r\n        barEvent.action === \"end\" ||\r\n        barEvent.action === \"start\" ||\r\n        barEvent.action === \"progress\") &&\r\n      svg?.current\r\n    ) {\r\n      svg.current.addEventListener(\"mousemove\", handleMouseMove);\r\n      svg.current.addEventListener(\"mouseup\", handleMouseUp);\r\n      setIsMoving(true);\r\n    }\r\n  }, [\r\n    barTasks,\r\n    barEvent,\r\n    xStep,\r\n    initEventX1Delta,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n    svg,\r\n    isMoving,\r\n  ]);\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {barTasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${tasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={barTasks[child]}\r\n                rowHeight={rowHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {barTasks.map(task => {\r\n          return (\r\n            <Bar\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              isDelete={!task.isDisabled}\r\n              onEventStart={handleBarEventStart}\r\n              key={task.id}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {barEvent.selectedTask && (\r\n          <Tooltip\r\n            x={barEvent.selectedTask.x2 + arrowIndent + arrowIndent * 0.5}\r\n            rowHeight={rowHeight}\r\n            svgHeight={svgHeight}\r\n            task={barEvent.selectedTask}\r\n            fontFamily={fontFamily}\r\n            fontSize={fontSize}\r\n            TooltipContent={TooltipContent}\r\n          />\r\n        )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, SyntheticEvent } from \"react\";\r\nimport { GridProps, Grid } from \"../grid/grid\";\r\nimport { CalendarProps, Calendar } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps, TaskGanttContent } from \"./task-gantt-content\";\r\nimport styles from \"./gantt.module.css\";\r\n\r\nexport type TaskGanttProps = {\r\n  gridProps: GridProps;\r\n  calendarProps: CalendarProps;\r\n  barProps: TaskGanttContentProps;\r\n  ganttHeight: number;\r\n  scrollY: number;\r\n  scrollX: number;\r\n  onScroll: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n};\r\nexport const TaskGantt: React.FC<TaskGanttProps> = ({\r\n  gridProps,\r\n  calendarProps,\r\n  barProps,\r\n  ganttHeight,\r\n  scrollY,\r\n  scrollX,\r\n  onScroll,\r\n}) => {\r\n  const ganttSVGRef = useRef<SVGSVGElement>(null);\r\n  const horizontalContainerRef = useRef<HTMLDivElement>(null);\r\n  const verticalContainerRef = useRef<HTMLDivElement>(null);\r\n  const newBarProps = { ...barProps, svg: ganttSVGRef };\r\n\r\n  useEffect(() => {\r\n    if (horizontalContainerRef.current) {\r\n      horizontalContainerRef.current.scrollTop = scrollY;\r\n    }\r\n  }, [scrollY]);\r\n\r\n  useEffect(() => {\r\n    if (verticalContainerRef.current) {\r\n      verticalContainerRef.current.scrollLeft = scrollX;\r\n    }\r\n  }, [scrollX]);\r\n\r\n  return (\r\n    <div\r\n      className={styles.ganttVerticalContainer}\r\n      ref={verticalContainerRef}\r\n      onScroll={onScroll}\r\n    >\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        width={gridProps.gridWidth}\r\n        height={calendarProps.headerHeight}\r\n        fontFamily={barProps.fontFamily}\r\n      >\r\n        <Calendar {...calendarProps} />\r\n      </svg>\r\n      <div\r\n        ref={horizontalContainerRef}\r\n        className={styles.horizontalContainer}\r\n        style={\r\n          ganttHeight\r\n            ? { height: ganttHeight, width: gridProps.gridWidth }\r\n            : { width: gridProps.gridWidth }\r\n        }\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          width={gridProps.gridWidth}\r\n          height={barProps.rowHeight * barProps.tasks.length}\r\n          fontFamily={barProps.fontFamily}\r\n          ref={ganttSVGRef}\r\n        >\r\n          <Grid {...gridProps} />\r\n          <TaskGanttContent {...newBarProps} />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, SyntheticEvent } from \"react\";\r\nimport { ViewMode, GanttProps, Task } from \"../../types/public-types\";\r\nimport { GridProps } from \"../grid/grid\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\nimport { CalendarProps } from \"../calendar/calendar\";\r\nimport { TaskGanttContentProps } from \"./task-gantt-content\";\r\nimport { TaskListHeaderDefault } from \"../task-list/task-list-header\";\r\nimport { TaskListTableDefault } from \"../task-list/task-list-table\";\r\nimport { StandardTooltipContent } from \"../other/tooltip\";\r\nimport { Scroll } from \"../other/scroll\";\r\nimport { TaskListProps, TaskList } from \"../task-list/task-list\";\r\nimport styles from \"./gantt.module.css\";\r\nimport { TaskGantt } from \"./task-gantt\";\r\n\r\nexport const Gantt: React.SFC<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  listCellWidth = \"150px\",\r\n  rowHeight = 50,\r\n  ganttHeight = 0,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  TooltipContent = StandardTooltipContent,\r\n  TaskListHeader = TaskListHeaderDefault,\r\n  TaskListTable = TaskListTableDefault,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n}) => {\r\n  const [ganttTasks, setGanttTasks] = useState<Task[]>(tasks);\r\n  const [scrollY, setScrollY] = useState(0);\r\n  const [scrollX, setScrollX] = useState(0);\r\n\r\n  const [startDate, endDate] = ganttDateRange(ganttTasks, viewMode);\r\n  const dates = seedDates(startDate, endDate, viewMode);\r\n\r\n  const svgHeight = rowHeight * tasks.length;\r\n  const gridWidth = dates.length * columnWidth;\r\n  const ganttFullHeight = ganttTasks.length * rowHeight;\r\n\r\n  const onTasksDateChange = (tasks: Task[]) => {\r\n    setGanttTasks(tasks);\r\n  };\r\n\r\n  const handleScroll = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollY !== event.currentTarget.scrollTop)\r\n      setScrollY(event.currentTarget.scrollTop);\r\n  };\r\n\r\n  const handleScrollX = (event: SyntheticEvent<HTMLDivElement>) => {\r\n    if (scrollX !== event.currentTarget.scrollLeft)\r\n      setScrollX(event.currentTarget.scrollLeft);\r\n  };\r\n\r\n  const handleWheel = (event: React.WheelEvent<HTMLDivElement>) => {\r\n    const newScrollY = scrollY + event.deltaY;\r\n    if (newScrollY < 0) {\r\n      setScrollY(0);\r\n    } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n      setScrollY(ganttFullHeight - ganttHeight);\r\n    } else {\r\n      setScrollY(scrollY + event.deltaY);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n    event.preventDefault();\r\n    let newScrollY = scrollY;\r\n    let newScrollX = scrollX;\r\n    let isX = true;\r\n    switch (event.key) {\r\n      case \"Down\": // IE/Edge specific value\r\n      case \"ArrowDown\":\r\n        newScrollY += rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Up\": // IE/Edge specific value\r\n      case \"ArrowUp\":\r\n        newScrollY -= rowHeight;\r\n        isX = false;\r\n        break;\r\n      case \"Left\":\r\n      case \"ArrowLeft\":\r\n        newScrollX -= columnWidth;\r\n        break;\r\n      case \"Right\": // IE/Edge specific value\r\n      case \"ArrowRight\":\r\n        newScrollX += columnWidth;\r\n        break;\r\n    }\r\n    if (isX) {\r\n      if (newScrollX < 0) {\r\n        setScrollX(0);\r\n      } else if (newScrollX > gridWidth) {\r\n        setScrollX(gridWidth);\r\n      } else {\r\n        setScrollX(newScrollX);\r\n      }\r\n    } else {\r\n      if (newScrollY < 0) {\r\n        setScrollY(0);\r\n      } else if (newScrollY > ganttFullHeight - ganttHeight) {\r\n        setScrollY(ganttFullHeight - ganttHeight);\r\n      } else {\r\n        setScrollY(newScrollY);\r\n      }\r\n    }\r\n  };\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    gridWidth,\r\n    tasks: ganttTasks,\r\n    rowHeight,\r\n    dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dates,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: TaskGanttContentProps = {\r\n    tasks: ganttTasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n    handleWidth,\r\n    arrowColor,\r\n    timeStep,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    svgHeight,\r\n    onTasksDateChange: onTasksDateChange,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onTaskDelete,\r\n    TooltipContent,\r\n  };\r\n\r\n  const tableProps: TaskListProps = {\r\n    rowHeight,\r\n    rowWidth: listCellWidth,\r\n    fontFamily,\r\n    fontSize,\r\n    tasks: ganttTasks,\r\n    locale,\r\n    headerHeight,\r\n    scrollY,\r\n    ganttHeight,\r\n    horizontalContainerClass: styles.horizontalContainer,\r\n    TaskListHeader,\r\n    TaskListTable,\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={styles.wrapper}\r\n      onWheel={handleWheel}\r\n      onKeyDown={handleKeyDown}\r\n      tabIndex={0}\r\n    >\r\n      {listCellWidth && <TaskList {...tableProps} />}\r\n      <TaskGantt\r\n        gridProps={gridProps}\r\n        calendarProps={calendarProps}\r\n        barProps={barProps}\r\n        ganttHeight={ganttHeight}\r\n        scrollY={scrollY}\r\n        scrollX={scrollX}\r\n        onScroll={handleScrollX}\r\n      />\r\n      <Scroll\r\n        ganttFullHeight={ganttFullHeight}\r\n        ganttHeight={ganttHeight}\r\n        headerHeight={headerHeight}\r\n        scroll={scrollY}\r\n        onScroll={handleScroll}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  isChecked: boolean;\r\n  onViewListChange: (isChecked: boolean) => void;\r\n  onViewModeChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewModeChange,\r\n  onViewListChange,\r\n  isChecked,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.HalfDay)}\r\n      >\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewModeChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Week)}\r\n      >\r\n        Week\r\n      </button>\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewModeChange(ViewMode.Month)}\r\n      >\r\n        Month\r\n      </button>\r\n\r\n      <div className=\"Switch\">\r\n        <label className=\"Switch_Toggle\">\r\n          <input\r\n            type=\"checkbox\"\r\n            defaultChecked={isChecked}\r\n            onClick={() => onViewListChange(!isChecked)}\r\n          />\r\n          <span className=\"Slider\" />\r\n        </label>\r\n        Show Task List\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"gantt-task-react/dist/index.css\";\nimport { Task, ViewMode, Gantt } from \"gantt-task-react\";\nimport { ViewSwitcher } from \"./components/view-switcher\";\n\n//Init\nconst App = () => {\n  const currentDate = new Date();\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\n  const [isChecked, setIsChecked] = React.useState(true);\n  let columnWidth = 60;\n  if (view === ViewMode.Month) {\n    columnWidth = 300;\n  } else if (view === ViewMode.Week) {\n    columnWidth = 250;\n  }\n  let tasks: Task[] = [\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\n      end: new Date(\n        currentDate.getFullYear(),\n        currentDate.getMonth(),\n        2,\n        12,\n        28\n      ),\n      name: \"Idea\",\n      id: \"Task 0\",\n      progress: 45,\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\n      name: \"Research\",\n      id: \"Task 1\",\n      progress: 25,\n      dependencies: [\"Task 0\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\n      name: \"Discussion with team\",\n      id: \"Task 2\",\n      progress: 10,\n      dependencies: [\"Task 1\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\n      name: \"Developing\",\n      id: \"Task 3\",\n      progress: 2,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\n      name: \"Review\",\n      id: \"Task 4\",\n      progress: 70,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 16),\n      name: \"Release & Eat Pizza\",\n      id: \"Task 6\",\n      progress: currentDate.getMonth(),\n      dependencies: [\"Task 4\"],\n      styles: { progressColor: \"#ffbb54\", progressSelectedColor: \"#ff9e0d\" },\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 24),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 25),\n      name: \"Closing\",\n      id: \"Task 9\",\n      progress: 0,\n      isDisabled: true,\n    },\n  ];\n\n  let onTaskChange = (task: Task) => {\n    console.log(\"On date change Id:\" + task.id);\n  };\n\n  let onTaskDelete = (task: Task) => {\n    const conf = window.confirm(\"Are you sure?\");\n    if (!conf) throw \"No del Id:\" + task.id;\n  };\n\n  let onProgressChange = (task: Task) => {\n    console.log(\"On progress change Id:\" + task.id);\n  };\n\n  let onDblClick = (task: Task) => {\n    alert(\"On Double Click event Id:\" + task.id);\n  };\n\n  return (\n    <div>\n      <ViewSwitcher\n        onViewModeChange={viewMode => setView(viewMode)}\n        onViewListChange={setIsChecked}\n        isChecked={isChecked}\n      />\n      <h3>Gantt With Unlimited Height</h3>\n      <Gantt\n        tasks={tasks}\n        viewMode={view}\n        onDateChange={onTaskChange}\n        onTaskDelete={onTaskDelete}\n        onProgressChange={onProgressChange}\n        onDoubleClick={onDblClick}\n        listCellWidth={isChecked ? \"150px\" : \"\"}\n        columnWidth={columnWidth}\n      />\n      <h3>Gantt With Limited Height</h3>\n      <Gantt\n        tasks={tasks}\n        viewMode={view}\n        onDateChange={onTaskChange}\n        onTaskDelete={onTaskDelete}\n        onProgressChange={onProgressChange}\n        onDoubleClick={onDblClick}\n        listCellWidth={isChecked ? \"150px\" : \"\"}\n        ganttHeight={300}\n        columnWidth={columnWidth}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}