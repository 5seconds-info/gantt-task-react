{"version":3,"sources":["../../src/types/public-types.ts","../../src/helpers/date-helper.ts","../../src/components/Grid/grid-body.tsx","../../src/components/Grid/grid-header.tsx","../../src/components/Grid/grid.tsx","../../src/components/Calendar/top-part-of-calendar.tsx","../../src/components/Calendar/calendar.tsx","../../src/components/Bar/bar-progress-handle.tsx","../../src/components/Bar/bar-date-handle.tsx","../../src/components/Bar/bar-display.tsx","../../src/helpers/bar-helper.ts","../../src/components/Bar/bar.tsx","../../src/components/Other/arrow.tsx","../../src/components/Other/tooltip.tsx","../../src/components/Gantt/gantt-content.tsx","../../src/components/Gantt/gantt.tsx","components/view-switcher.tsx","components/gantt-table.tsx","App.tsx","index.tsx"],"names":["ViewMode","addToDate","Date","date","scale","startOfDate","scores","shouldReset","_scale","maxScore","getLocaleMonth","bottomValue","Intl","month","getMonday","day","diff","getWeekNumberISO8601","tmpDate","dayNumber","firstThursday","weekNumber","Math","GridBody","todayColor","y","gridRows","rowLines","key","task","id","x","width","gridWidth","height","rowHeight","className","styles","y1","x2","y2","now","tickX","ticks","today","React","i","dates","x1","headerHeight","columnWidth","fill","GridHeader","Grid","props","TopPartOfCalendar","yText","x1Line","y1Line","y2Line","value","xText","Calendar","fontSize","topValues","bottomValues","topDefaultWidth","topDefaultHeight","topValue","getCalendarValuesForMonth","weeksCount","locale","getCalendarValuesForWeek","getCalendarValuesForDay","viewMode","hour","fontFamily","getCalendarValuesForOther","BarProgressHandle","onMouseDown","points","progressPoint","BarDateHandle","ry","barCornerRadius","rx","BarDisplay","textRef","useRef","useState","useEffect","setIsTextInside","isSelected","style","progressWidth","isTextInside","arrowIndent","ref","convertToBarTask","taskXCoordinate","taskYCoordinate","index","taskHeight","backgroundColor","backgroundSelectedColor","progressColor","progressSelectedColor","handleWidth","barChildren","xDate","progressByX","barWidth","startByX","additionalXValue","endByX","moveByX","newX1","dateByX","newDate","taskDate","Bar","handleButtonSVGEvents","taskX2","progressX","taskY","point","onDoubleClick","tabIndex","onKeyDown","e","onMouseEnter","handleMouseEvents","onMouseLeave","onFocus","setIsSelected","onBlur","text","name","hasChild","isDateChangeable","isProgressChangeable","Arrow","indexCompare","taskFrom","taskTo","taskToEndPosition","path","trianglePoints","strokeWidth","d","Tooltip","getTooltipContent","getStandardTooltipContent","tooltipRef","setRelatedY","setToolWidth","relatedY","toolWidth","GanttContent","action","selectedTask","dateDelta","newXStep","timeStep","setXStep","tasks","setBarTasks","barTasks","dependencies","j","dependence","convertToBarTasks","handleMouseSVGChangeEventsSubscribe","a","barEvent","svg","changedTask","event","newX2","t","setBarEvent","eventForExecution","onDateChange","newMoveX1","newMoveX2","setIsSVGListen","eventType","setInitEventX1Delta","console","onTaskDelete","arrowColor","stroke","child","isDisabled","Gantt","barFill","barProgressColor","barProgressSelectedColor","barBackgroundColor","barBackgroundSelectedColor","newStartDate","newEndDate","ganttDateRange","currentDate","seedDates","gridProps","calendarProps","barProps","onProgressChange","xmlns","length","ViewSwitcher","onViewChange","onClick","QuarterDay","HalfDay","Day","Week","Month","GanttTableExample","options","setTasks","onTaskDateChange","map","onTaskProgressChange","slice","onTaskItemDelete","filter","minWidth","role","aria-label","start","toDateString","end","overflowX","App","view","setView","getFullYear","getMonth","progress","log","window","confirm","alert","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,oFAAZ,SAAYA,GACVA,2BACAA,qBACAA,YAEAA,cACAA,gBANF,CAAYA,MAAZ,KCWO,IAAMC,EAAY,SAAC,EAAD,KAcvB,OATgB,IAAIC,KAClBC,iBAAsBC,aADR,GAEdD,cAAmBC,cAFL,GAGdD,aAAkBC,YAHJ,GAIdD,cAAmBC,aAJL,GAKdD,gBAAqBC,eALP,GAMdD,gBAAqBC,eANP,GAOdD,qBAA0BC,oBAP5B,KAYWC,EAAc,SAACF,EAAD,GACzB,IAAMG,EAAS,CAAC,cAAD,uCAAf,QAUMC,EAAeC,YACnB,IAAMC,EAAWH,UAAjB,GACA,OAAOA,cAAP,GAWF,OATgB,IAAIJ,KAClBC,EADc,cAEdI,YAA0BJ,EAFZ,WAGdI,aAA2BJ,EAHb,UAIdI,WAAyBJ,EAJX,WAKdI,YAA0BJ,EALZ,aAMdI,cAA4BJ,EANd,aAOdI,cAA4BJ,EAP9B,oBA2EWO,EAAiB,SAACP,EAAD,GAC5B,IAAIQ,EAAc,IAAIC,KAAJ,iBAAgC,CAChDC,MAAO,SADS,OAAlB,GAOA,OAJAF,EAAcA,UACZA,EADYA,GAEZA,KAFFA,sBAWIG,EAAaX,YACjB,IAAMY,EAAMZ,EAAZ,SACMa,EAAOb,eAAwBY,SAArC,GACA,OAAO,IAAIb,KAAKC,UAAhB,KAGWc,EAAwBd,YACnC,IAAMe,EAAU,IAAIhB,KAAKC,EAAzB,WACMgB,GAAaD,WAAD,GAAlB,EACAA,UAAgBA,cAAhBA,GACA,IAAME,EAAgBF,EAAtB,UACAA,gBACA,IAAIA,YACFA,aAAoB,GAAM,EAAIA,EAAJ,SAAD,GAAzBA,GAEF,IAAMG,GACJ,EAAIC,WAAWF,EAAgBF,EAAjB,WADG,SAAnB,WAIA,WAAIG,SACF,cAEA,G,4IC7ISE,EAAoC,SAAC,GAAD,MAAC,EAAD,EAAC,QAAD,EAAC,QAAD,EAAC,YAAD,EAAC,eAAD,EAAC,YAAD,EAAC,YAOhDC,EAP+C,EAO/CA,WAEIC,EAAJ,EACMC,EAAN,GACMC,EAAN,GAX+C,cAY/C,GAZ+C,IAY/C,2BAA0B,KAA1B,EAA0B,QACxBD,OACE,0BACEE,IAAK,MAAQC,EAAKC,GAClBC,EAAE,IACFN,EAAGA,EACHO,MAAOC,EACPC,OAAQC,EACRC,UAAWC,KAGfV,OACE,0BACEC,IAAK,UAAYC,EAAKC,GACtBC,EAAE,IACFO,GAAIb,EAAIU,EACRI,GAAIN,EACJO,GAAIf,EAAIU,EACRC,UAAWC,KAGfZ,MAjC6C,8BAwC/C,IAJA,IAAMgB,EAAM,IAAZ,KACIC,EAAJ,EACMC,EAAN,GACIC,EAAoBC,yBAAxB,MACSC,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAM3C,EAAO4C,EAAb,GACAJ,OACE,0BACEf,IAAKzB,YACL6C,GAAIN,EACJJ,GAAIW,EACJV,GAAIG,EACJF,GAAIf,EACJW,UAAWC,MAIZS,MAAUC,EAAVD,QACC3C,YAAiBsC,EADlBK,WAECC,EAAMD,EAANC,cAA0BN,EAF5B,WAICK,OACCA,MAAUC,EADXD,QAEC3C,YAAiBsC,EAFlBK,WAGC7C,EAAU,EAERE,YAAiB4C,EAAMD,EAANC,GAFV,UAAT9C,0BAIewC,EAZnB,aAcEG,EACE,0BACEb,EAAGW,EACHjB,EAAG,EACHO,MAAOkB,EACPhB,OAAQT,EACR0B,KAAM3B,KAIZkB,KAEF,OACE,uBAAGN,UAAU,YACX,uBAAGA,UAAU,QADf,GAEE,uBAAGA,UAAU,YAFf,GAGE,uBAAGA,UAAU,SAHf,GAIE,uBAAGA,UAAU,SALjB,KCrFWgB,EAAwC,SAAC,GAAD,IAAC,EAAD,EAAC,UAEpDH,EAFmD,EAEnDA,aAEA,OACE,0BACElB,EAAE,IACFN,EAAE,IACFO,MAAOC,EACPC,OAAQe,EACRb,UAAWC,KCZJgB,EAA4BC,YACvC,OACE,uBAAGlB,UAAU,QACXS,qCADF,IAEEA,qCAHJ,M,0ICMWU,EAAsD,SAAC,GAAD,IAAC,EAAD,EAAC,QAAD,EAAC,SAAD,EAAC,SAAD,EAAC,SAAD,EAAC,MAMlEC,EANiE,EAMjEA,MAEA,OACE,uBAAGpB,UAAU,eACX,0BACEY,GAAIS,EACJnB,GAAIoB,EACJnB,GAAIkB,EACJjB,GAAImB,EACJvB,UAAWC,EACXT,IAAKgC,EAAQ,SAEf,0BACEhC,IAAKgC,EAAQ,OACbnC,EAAG+B,EACHzB,EAAG8B,EACHzB,UAAWC,GAdjB,KCDWyB,EAAoC,SAAC,GAAD,IAAC,EAAD,EAAC,QAAD,EAAC,SAAD,EAAC,WAAD,EAAC,eAAD,EAAC,cAAD,EAAC,WAOhDC,EAP+C,EAO/CA,SAwKIC,EAAJ,GACIC,EAAJ,GACA,UACE,KAAKjE,EAAL,YAzKgC,WAKhC,IAJA,IAAMgE,EAAN,GACMC,EAAN,GACMC,EAAN,EAAwBhB,EAClBiB,EAAN,GAAyBlB,EAChBH,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAM3C,EAAO4C,EAAb,GACMpC,EAAcD,EAAeP,EAAnC,GAWA,GAVA8D,OACE,0BACErC,IAAKjB,EAAcR,gBACnBsB,EAAkB,GAAfwB,EACHlB,EAAGmB,IAAgC,GAAdA,EACrBd,UAAWC,GALf4B,IAUInB,OAAW3C,kBAAuB4C,EAAMD,EAANC,GAAtC,cAAkE,CAChE,IAAMqB,EAAWjE,gBAAjB,WACA6D,OACE,qBACEpC,IAAKwC,EACLR,MAAOQ,EACPX,OAAQP,EAAcJ,EACtBY,OAAQ,EACRC,OAAQQ,EACRN,MACEK,EAAkBhB,EAAlBgB,EAAoC/D,aAAkB+C,EAExDM,MAA0B,GAAnBW,MAKf,MAAO,CAACH,EAAR,GAuI8BK,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,KAAKrE,EAAL,WAtI+B,WAK/B,IAJA,IAAMgE,EAAN,GACMC,EAAN,GACIK,EAAJ,EACMH,EAAN,GAAyBlB,EAChBH,EAAIC,SAAb,EAA+BD,GAA/B,EAAuCA,IAAK,CAC1C,IAAM3C,EAAO4C,EAAb,GACIqB,EAAJ,GACItB,OAAW3C,eAAoB4C,EAAMD,EAANC,GAAnC,aAEEqB,EAAW,GAAH,OAAM1D,EAAeP,EAAMoE,GAA3B,aAAuCpE,EAA/CiE,gBAGF,IAAMzD,EAAc,IAAH,OAAOM,EAAxB,IAEAgD,OACE,0BACErC,IAAKzB,YACLsB,EAAkB,GAAfwB,EACHlB,EAAGmB,EAAcJ,EACjBV,UAAWC,GALf4B,IAWA,IAEMnB,IAAMC,SAAV,GACEiB,OACE,qBACEpC,IAAKwC,EACLR,MAAOQ,EACPX,OAAQP,IAAkBoB,EAAapB,EACvCQ,OAAQ,EACRC,OAAQQ,EACRN,MAAOX,IAAkBA,IAA2B,GACpDM,MAA0B,GAAnBW,KAIbG,KAEFA,IAEF,MAAO,CAACN,EAAR,GA0F8BQ,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,KAAKxE,EAAL,UAzF8B,WAI9B,IAHA,IAAMgE,EAAN,GACMC,EAAN,GACME,EAAN,GAAyBlB,EAChBH,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAM3C,EAAO4C,EAAb,GACMpC,EAAcR,YAApB,WAYA,GAVA8D,OACE,0BACErC,IAAKzB,YACLsB,EAAkB,GAAfwB,EACHlB,EAAGmB,IAAgC,GAAdA,EACrBd,UAAWC,GALf4B,IAWEnB,MAAUC,EAAVD,QACA3C,eAAoB4C,EAAMD,EAANC,GAFtB,WAGE,CACA,IAAMqB,EAAW1D,EAAeP,EAAhC,GAEA6D,OACE,qBACEpC,IAAKwC,EACLR,MAAOQ,EACPX,OAAQP,GAAeJ,EAAJ,GACnBY,OAAQ,EACRC,OAAQQ,EACRN,MAAOX,GAAeJ,EAAfI,GAAwB/C,cAA+B,GAC9DqD,MAA0B,GAAnBW,MAKf,MAAO,CAACH,EAAR,GAqD8BS,GAD9B,mBACE,EADF,KACE,EADF,KAEE,MACF,cApDgC,WAMhC,IALA,IAAMT,EAAN,GACMC,EAAN,GACMtB,EAAQ+B,IAAa1E,EAAb0E,UAAd,EACMP,EAAN,GAAyBlB,EAEhBH,EAAT,EAAgBA,EAAIC,EAApB,OAAkCD,IAAK,CACrC,IAAM3C,EAAO4C,EAAb,GACMpC,EAAcC,KAAA,iBAA4B,CAC9C+D,KAAM,YADY,OAApB,GAeA,GAXAV,OACE,0BACErC,IAAKzB,YACLsB,EAAkB,GAAfwB,EACHlB,EAAGmB,EAAcJ,EACjBV,UAAWC,EACXuC,WAAYA,GANhBX,IAWInB,OAAW3C,cAAmB4C,EAAMD,EAANC,GAAlC,UAA0D,CACxD,IAAMqB,EAAW,GAAH,OAAMjE,YAAN,YAAwBO,EAAeP,EAArD,IACA6D,OACE,qBACEpC,IAAKwC,EACLR,MAAOQ,EACPX,OAAQP,IAAkBP,EAAQO,EAClCQ,OAAQ,EACRC,OAAQQ,EACRN,MAAOX,IAAkBP,IAAsB,GAC/Ca,MAA0B,GAAnBW,MAKf,MAAO,CAACH,EAAR,GAe8Ba,GAD9B,mBACE,EADF,KACE,EADF,KAIF,OACE,uBAAGzC,UAAU,WAAW2B,SAAUA,EAAUa,WAAYA,GAAxD,MADF,I,oLC3MWE,EAAsD,SAAC,GAAD,IAAC,EAAD,EAAC,cAElEC,EAFiE,EAEjEA,YAEA,OACE,6BACE3C,UAAWC,EACX2C,OAAQC,EACRF,YAAaA,KCJNG,EAA8C,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,IAAD,EAAC,QAAD,EAAC,SAAD,EAAC,gBAM1DH,EANyD,EAMzDA,YAEA,OACE,0BACEhD,EAAGA,EACHN,EAAGA,EACHO,MAAOA,EACPE,OAAQA,EACRE,UAAWC,EACX8C,GAAIC,EACJC,GAAID,EACJL,YAAaA,KCNNO,EAAwC,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,IAAD,EAAC,QAAD,EAAC,SAAD,EAAC,aAAD,EAAC,gBAAD,EAAC,kBAAD,EAAC,OAAD,EAAC,WAAD,EAAC,cAAD,EAAC,OAYpDP,EAZmD,EAYnDA,YAEMQ,EAAUC,iBAAhB,MAdmD,EAeXC,oBAAxC,GAfmD,mBAe7C,EAf6C,KAe7C,EAf6C,KAiBnDC,qBAAU,WACJH,EAAJ,SACEI,EAAgBJ,0BAAhBI,KACD,CAACJ,EAHJG,IAmBA,OACE,uBAAGX,YAAaA,GACd,0BACEhD,EAAGA,EACHC,MAAOA,EACPP,EAAGA,EACHS,OAAQA,EACRiD,GAAIC,EACJC,GAAID,EACJjC,KAlBGyC,EAAavD,EAAH,wBAAoCA,EAArD,gBAmBID,UAAWyD,IAEb,0BACE9D,EAAGA,EACHC,MAAO8D,EACPrE,EAAGA,EACHS,OAAQA,EACRiD,GAAIC,EACJC,GAAID,EACJjC,KAhCGyC,EAAavD,EAAH,sBAAkCA,EAAnD,gBAkCE,0BACEN,EA3BGgE,EACHhE,EADe,GACXC,EACJD,IAAYiE,GAAZjE,EAFJ,GAE0CiE,EA0BtCvE,EAAGA,EAAa,GAATS,EACPE,UACE2D,EACIF,EACkBA,EAExBI,IAAKV,GA7BX,KCPWW,EAAmB,SAAC,EAAD,2BAgB9B,IAAMlD,EAAKmD,EAAgBtE,EAAD,UAA1B,GACMU,EAAK4D,EAAgBtE,EAAD,QAA1B,GACMJ,EAAI2E,EAAgBC,EAAOlE,EAAWmE,EAA5C,GACMjE,EAAS,aACbkE,gBADa,EAEbC,wBAFa,EAGbC,cAHa,EAIbC,sBAJa,GAKV7E,EAAKQ,QAEV,kCAAO,GAAP,IAEEW,KACAT,KACAd,IACA4E,QACAjB,kBACAuB,cACAzE,OARK,EASL0E,YATK,GAULvE,YAIS8D,EAAkB,SAAC,EAAD,OAM7B,IAAME,MACHQ,YACC9D,KADD8D,UAECA,EAFDA,oBAGC9D,KAHF,qBADF,GAgBA,OATUzB,YACP+E,GACEQ,YACC9D,KADD8D,UAECA,yBAFDA,IAGC9D,4BAHF,KADF,GADF,IAYWqD,EAAkB,SAAC,EAAD,OAO7B,OADUC,OAAoClE,EAAD,GAA7C,GAyBW2E,EAAc,SAAC/E,EAAD,GACzB,GAAIA,GAAKF,EAAT,GAAkB,OAAlB,IACK,GAAIE,GAAKF,EAAT,GAAkB,OAAlB,EAEH,IAAMkF,EAAWlF,KAAUA,EAA3B,GAEA,OADwBP,WAAW,KAAES,EAAIF,EAAL,IAApC,IAqBSmF,EAAW,SAACjF,EAAD,KAClBA,GAAKF,KAAT,EAAmBA,gBACjBE,EAAIF,KAAJE,EAAcF,eAEhB,IACMoF,EADQ3F,YAAYS,EAAIF,EAAL,IAAzB,GACA,EAEA,OADaA,KAAb,GAIWqF,EAAS,SAACnF,EAAD,KAChBA,GAAKF,KAAT,EAAmBA,gBACjBE,EAAIF,KAAJE,EAAcF,eAEhB,IACMoF,EADQ3F,YAAYS,EAAIF,EAAL,IAAzB,GACA,EAEA,OADaA,KAAb,GAIWsF,EAAU,SAACpF,EAAD,KACrB,IACMkF,EADQ3F,YAAYS,EAAIF,EAAL,IAAzB,GACA,EACMuF,EAAQvF,KAAd,EAEA,MAAO,CAACuF,EADMA,EAAQvF,EAARuF,GAAkBvF,EAAhC,KAIWwF,EAAU,SAAC,EAAD,SAOrB,IAAIC,EAAU,IAAIpH,MAAO6B,EAAD,GAAD,IAAmCwF,EAA1D,WAKA,OAJAD,EAAU,IAAIpH,KACZoH,YADFA,KAEKA,sBAA8BC,EAA/B,uBClLOC,EAA0B,SAAC,GAAD,ID6FF,EAAD,IA+BH,EAAD,IC5HQ,EAAD,EAAC,OAAD,EAAC,cAAD,EAAC,gBAAD,EAAC,uBAAD,EAAC,mBAAD,EAAC,kBAOtCC,EAPqC,EAOrCA,sBAPqC,EASDhC,oBAApC,GATqC,mBAS/B,EAT+B,KAS/B,EAT+B,KAW/BK,GDkF6B,EClFQjE,EAAD,GDkFR,EClFkBA,EAAV,GDkFR,EClF2BA,EAA7D,UDuFQ6F,EAAD,KAAP,KCtFMzC,GDgHyB,EC/G7Ba,EAAgBjE,EADoB,GDgHR,EC9G5BA,EAFoC,EDgHR,EC7G5BA,EAHF,ODqHc,CACZ8F,EADY,EAEZC,EAFY,EAGZD,EAHY,EAIZC,EAJY,IAMZA,IANF,MAQOC,KAAP,MCvHA,OACE,uBACEzF,UAAWC,EACXyF,cAAe,WACb,GAAmBA,EAAnB,IAEFC,SAAU,EACVC,UAAWC,YACTR,EAAsBQ,EAAtBR,IAEFS,aAAcD,YACZE,EAAkBF,EAAG,aAArBE,IAEFC,aAAcH,YACZE,EAAkBF,EAAG,aAArBE,IAEFE,QAAS,kBAAMC,GAAc,IAC7BC,OAAQ,kBAAMD,GAAc,KAE5B,qBACEvG,EAAGF,EAAKmB,GACRvB,EAAGI,EAAKJ,EACRO,MAAOH,KAAUA,EAAKmB,GACtBd,OAAQL,EAAKK,OACb4D,cAAeA,EACfV,gBAAiBvD,EAAKuD,gBACtBoD,KAAM3G,EAAK4G,KACXC,SAAU7G,qBAA0B,EACpCmE,YAAaA,EACb3D,OAAQR,EAAKQ,OACbuD,WAAYA,EACZb,YAAakD,YACXU,GAAoBR,EAAkBF,EAAG,OAAzCU,MAGJ,uBAAGvG,UAAU,eACVuG,GACC,2BAEE,qBACE5G,EAAGF,KAAU,EACbJ,EAAGI,IAAS,EACZG,MAAOH,EAAK8E,YACZzE,OAAQL,SAAc,EACtBuD,gBAAiBvD,EAAKuD,gBACtBL,YAAakD,YACXE,EAAkBF,EAAG,QAArBE,MAIJ,qBACEpG,EAAGF,KAAUA,EAAVA,YAA6B,EAChCJ,EAAGI,IAAS,EACZG,MAAOH,EAAK8E,YACZzE,OAAQL,SAAc,EACtBuD,gBAAiBvD,EAAKuD,gBACtBL,YAAakD,YACXE,EAAkBF,EAAG,MAArBE,OAKPS,GACC,qBACE3D,cAAeA,EACfF,YAAakD,YACXE,EAAkBF,EAAG,WAArBE,SC5GDU,EAA8B,SAAC,GAAD,IAAC,EAAD,EAAC,WAAD,EAAC,SAAD,EAAC,UAI1C7C,EAJyC,EAIzCA,YAEM8C,EAAeC,QAAiBC,EAAjBD,SAArB,EACME,EAAoBD,IAAWA,SAArC,EAEME,EAAO,KAAH,OAAQH,EAASxG,GAAjB,YAAuBwG,IAAaA,SAAkB,EAAtD,kBACN/C,EADM,kBAEL8C,EAAD,EAA6B,EAFvB,kBAGNE,KAAYhD,EAHN,kBAINiD,EAJM,kBAAV,GAMME,EAAiB,GAAH,OAAMH,EAAOhG,GAAb,YAAmBiG,EAAnB,gBAClBD,KAAY,EADM,YACDC,EAAoB,EADnB,gBAElBD,KAAY,EAFM,YAEDC,EAFnB,GAGA,OACE,uBAAG7G,UAAU,SACX,0BAAMgH,YAAY,MAAMC,EAAGH,EAAM/F,KAAK,SACtC,6BAAS6B,OAAQmE,M,qKCdVG,EAAkC,SAAC,GAAD,IAAC,EAAD,EAAC,IAAD,EAAC,IAAD,EAAC,OAAD,EAAC,WAAD,EAAC,WAAD,IAO7CC,yBAP6C,MAOzBC,EAPyB,EASvCC,EAAajE,iBAAnB,MAT6C,EAUXC,mBAAlC,KAV6C,mBAUvC,EAVuC,KAUvC,EAVuC,OAWbA,mBAAhC,GAX6C,mBAWvC,EAXuC,KAWvC,EAXuC,KAqB7C,OATAC,qBAAU,WACR,GAAI+D,EAAJ,QAAwB,CACtB,IAAMvH,EACJuH,uBADF,IAEEA,uBACFC,EAAYjI,EAAZiI,GACAC,MAAaF,0BAEd,CAACA,EARJ/D,IAUE,mCAAe3D,EAAGA,EAAGN,EAAGmI,EAAU5H,MAAO6H,EAAW3H,OAAQ,KAC1D,yBAAK+D,IAAKwD,EAAYrH,UAAWC,GAC9BkH,EAAkB1H,EAAMkC,EAH/B,MASIyF,EAA4B,SAAC,EAAD,KAKhC,IAAM3D,EAAQ,CACZ9B,WACAa,cAEF,OACE,yBAAKxC,UAAWC,EAAgCwD,MAAOA,GACrD,uBAAGA,MAAO,CAAE9B,SAAUA,EAAW,IAAjC,UACElC,EAAK4G,KADP,aAEK5G,kBAFL,YAGEA,mBAAwB,EAH1B,YAIIA,sBAJJ,cAIkCA,gBAJlC,YAKEA,iBAAsB,EALxB,YAMIA,MAPN,gBAQE,uBAAGO,UAAWC,GAAd,wBACGR,gBAAqBA,QAAtB,kBADF,YAIA,uBACEO,UAAWC,GADb,oBAEeR,EAfnB,SAaI,SCPOiI,GAA4C,SAAC,GAAD,IAAC,EAAD,EAAC,QAAD,EAAC,YAAD,EAAC,kBAAD,EAAC,cAAD,EAAC,QAAD,EAAC,UAAD,EAAC,mBAAD,EAAC,2BAAD,EAAC,qBAAD,EAAC,6BAAD,EAAC,eAAD,EAAC,cAAD,EAAC,aAAD,EAAC,MAAD,EAAC,WAAD,EAAC,aAAD,EAAC,WAAD,EAAC,cAAD,EAAC,eAAD,EAAC,mBAAD,EAAC,gBAAD,EAAC,aAuBxDP,EAvBuD,EAuBvDA,kBAvBuD,EAyBvB9D,mBAAmB,CACjDsE,OADiD,GAEjDC,aAAc,OA3BuC,mBAyBjD,EAzBiD,KAyBjD,EAzBiD,OA6BjBvE,oBAAtC,GA7BuD,mBA6BjD,EA7BiD,KA6BjD,EA7BiD,OA8BvBA,mBAAhC,IA9BuD,mBA8BjD,EA9BiD,KA8BjD,EA9BiD,OA+B7BA,mBAA1B,GA/BuD,mBA+BjD,EA/BiD,KA+BjD,GA/BiD,QAgCPA,mBAAhD,GAhCuD,qBAgCjD,GAhCiD,MAgCjD,GAhCiD,MAkCvDC,qBAAU,WACR,IAAMuE,EACJlH,eACAA,KADAA,UAEAA,4BAFAA,IAGAA,4BAJF,IAKMmH,EAAYC,EAAD,EAAjB,EACID,IAAJ,GACEE,QAED,CAACC,EAAOlI,EAAWiD,EAAiBlC,EAAaH,EAAOoH,EAV3DzE,IAYAA,qBAAU,WACR,IAAMuE,EACJlH,eACAA,KADAA,UAEAA,4BAFAA,IAGAA,4BAJF,IAOAuH,EJhH6B,SAAC,EAAD,yBAe/B,IAAIC,EAAWF,EAAA,KAAU,cACvB,OAAOnE,EAAiB,EAAD,wBAAvB,MA6BF,OAXAqE,EAAWA,EAAA,KAAa,cAEtB,IADA,IAAMC,EAAe3I,gBAArB,GADsB,WAEb4I,GACP,IAAMC,EAAaH,aACjB3G,YAAK,OAAIA,OAAa4G,EADxB,OAGA,IAAIE,GAAmBH,0BAJhBE,EAAT,EAAgBA,EAAID,EAApB,OAAyCC,IAAK,EAArCA,GAMT,YIuEEE,CAAkB,EAAD,QAHCxI,EAAD,EAAnB,IAGmB,YADnBmI,MAiBC,CAAC,EAAD,cAzBH5E,IAqCAA,qBAAU,WAIR,IAAMkF,EAAmC,uCAAG,yDAAAC,EAAA,yDACrCC,EAAD,cAA2BA,EAA3B,WAAuDC,EAA3D,QAD0C,iDAIpCf,EAAec,EAArB,aACME,EALoC,eAKjBhB,GALiB,KAMlCiB,EAAR,KAN0C,OAQxC,cARwC,OAwExC,YAxEwC,6BAS9BH,EAAR,OATsC,OAUpC,aAVoC,QAapC,UAboC,QAyBpC,QAzBoC,QAqCpC,SArCoC,gCAWlCE,WAAuBlE,EAAYmE,EAAD,QAAlCD,GAXkC,oCAc5B5D,EAAQJ,EAASiE,EAAD,UAAtB,GACAD,OACAA,QAAoB3D,EAAQ,EAE1B2C,EAFyB,GAGzBA,EAHyB,QAA3BgB,GAhBkC,oCA0B5BE,EAAQhE,EAAO+D,EAAD,UAApB,GACAD,OACAA,MAAkB3D,EAAQ,EAExB2C,EAFuB,GAGvBA,EAHuB,MAAzBgB,GA5BkC,sCAsCH7D,EAC7B8D,UADoC,KAAtC,GAtCkC,mBAsC5B,EAtC4B,KAsC5B,EAtC4B,KA2ClCD,QAAoB3D,EAAQ,EAE1B2C,EAFyB,GAGzBA,EAHyB,QAA3BgB,GAOAA,MAAkB3D,EAAQ,EAExB2C,EAFuB,GAGvBA,EAHuB,MAAzBgB,GAOAA,OACAA,OA1DkC,oCAgEtCV,EACEC,OAAaY,YAAC,OAAKA,OAASH,EAATG,KADrBb,MAGAc,EAAY,8BAAD,IAAgBpB,aAAcgB,KAnEH,6BAyElCK,EAEwB,aA3EU,KA4E9BP,EAAR,OA5EsC,OA6EpC,aA7EoC,QAmFpC,UAnFoC,QAiGpC,QAjGoC,QAgHpC,SAhHoC,gCA8ElCE,WAAuBlE,EAAYmE,EAAD,QAAlCD,GACA,IACEK,KAhFgC,oCAoF5BjE,EAAQJ,EAASiE,EAAD,UAAtB,GACAD,QAAoB3D,EAAQ,EAE1B2C,EAFyB,GAGzBA,EAHyB,QAA3BgB,GAOIM,GAAgBlE,IAAU4C,EAA9B,KACEqB,KA7FgC,oCAkG5BH,EAAQhE,EAAO+D,EAAD,UAApB,GACAD,MAAkB3D,EAAQ,EAExB2C,EAFuB,GAGvBA,EAHuB,MAAzBgB,GAQIM,GAAgBJ,IAAUlB,EAA9B,KACEqB,KA5GgC,sCAiHHlE,EAC7B8D,UADoC,KAAtC,GAjHkC,mBAiH5B,EAjH4B,KAiH5B,EAjH4B,KAsHlCD,QAAoB3D,EAAQ,EAE1B2C,EAFyB,GAGzBA,EAHyB,QAA3BgB,GAOAA,MAAkB3D,EAAQ,EAExB2C,EAFuB,GAGvBA,EAHuB,MAAzBgB,GAQEM,GACAC,IAAcvB,EADdsB,IAEAE,IAAcxB,EAHhB,KAKEqB,KAzIgC,oCA+ItCD,EAAY,CAAErB,OAAF,GAAcC,aAAc,OACxCyB,MACAV,6CAIAA,2CArJsC,UA2JhCM,EAAN,GA3JsC,gFAAH,sDAkKvCP,gBACAA,EADAA,eAIAC,EALF,UAOEU,MACAV,0CAIAA,2CAKD,CAAC,EAAD,eAtLHrF,IAwMA,IAAMyC,GAAoB,SAAC,EAAD,KAQxB,OAAQ8C,EAAR,MACE,gBACEG,EAAY,8BAAD,IAAgBpB,aAAf,EAAmCD,OAAQ2B,KACvDC,GAAoBV,sBAA4BpJ,EAAhD8J,IACAV,oBACA,MACF,iBACEW,0BACKd,EAAL,QACEM,EAAY,8BAAD,IAAgBpB,aAAf,KAAmCD,OAAQ,MACzD,MACF,iBACOe,EAAL,cACEM,EAAY,8BAAD,IAAgBpB,aAAf,EAAmCD,OAAQ,QAWzDtC,GAAqB,uCAAG,yBAAAoD,EAAA,0DAIxBhJ,EAAJ,WAJ4B,sDAKpBoJ,EAAR,IAL4B,OAM1B,WAN0B,6BAOxB,GACEY,KARsB,+DAAH,wDAe3B,OACE,uBAAGzJ,UAAU,WACX,uBAAGA,UAAU,SAASe,KAAM2I,EAAYC,OAAQD,GAC7CvB,EAAA,KAAa1I,YACZ,OAAOA,EAAA,iBAAqBmK,YAC1B,OACE,qBACEpK,IAAG,qBAAgBC,EAAKC,GAArB,eAA8ByI,KAAgBzI,IACjDiH,SAAUlH,EACVmH,OAAQuB,EAASyB,GACjB7J,UAAWA,EACX6D,YAAaA,WAMvB,uBAAG5D,UAAU,MAAMwC,WAAYA,EAAYb,SAAUA,GAClDwG,EAAA,KAAa1I,YACZ,OACE,qBACEA,KAAMA,EACNmE,YAAaA,EACb4C,uBAAsB,IAAuB/G,EAAKoK,WAClDnE,cAAeA,EACfa,mBAAkB,IAAmB9G,EAAKoK,WAC1C9D,kBAAmBA,GACnBV,sBAAuBA,GACvB7F,IAAKC,EAAKC,SAKlB,uBAAGM,UAAU,WACV0I,wBACCA,UADDA,UAECA,UACE,qBACE/I,EAAG+I,oBAAyC9E,EAC5CvE,EAAGqJ,iBAA0B3I,EAC7BN,KAAMiJ,EAASd,aACfpF,WAAYA,EACZb,SAAUA,EACVwF,kBAAmBA,OC3apB2C,GAA+B,SAAC,GAAD,IAAC,EAAD,EAAC,MAAD,IAE1CjJ,oBAF0C,MAAC,GAAD,MAG1CC,mBAH0C,MAAC,GAAD,MAI1Cf,iBAJ0C,MAAC,GAAD,MAK1CuC,gBAL0C,MAK/B1E,EALgC,IAAD,MAM1CuE,cAN0C,MAAC,QAAD,MAO1C4H,eAP0C,MAAC,GAAD,MAQ1C/G,uBAR0C,MAAC,EAAD,MAS1CgH,wBAT0C,MAAC,UAAD,MAU1CC,gCAV0C,MAAC,UAAD,MAW1CC,0BAX0C,MAAC,UAAD,MAY1CC,kCAZ0C,MAAC,UAAD,MAa1C5F,mBAb0C,MAAC,EAAD,MAc1CwD,gBAd0C,MAAC,IAAD,MAe1C2B,kBAf0C,MAAC,OAAD,MAgB1ClH,kBAhB0C,MAAC,kFAAD,MAiB1Cb,gBAjB0C,MAAC,OAAD,MAkB1CiC,mBAlB0C,MAAC,GAAD,MAmB1CxE,kBAnB0C,MAAC,2BAAD,EAAC,EAAD,EAAC,eAAD,EAAC,mBAAD,EAAC,gBAAD,EAAC,aAwB3C+H,EAxB0C,EAwB1CA,kBAxB0C,EdgDd,SAACc,EAAD,GAC5B,IAD4B,EACxBmC,EAAqBnC,KAAzB,MACIoC,EAAmBpC,KAAvB,IAF4B,cAG5B,GAH4B,IAG5B,2BAA0B,KAA1B,EAA0B,QACpBxI,QAAJ,IACE2K,EAAe3K,EAAf2K,OAEE3K,MAAJ,IACE4K,EAAa5K,EAAb4K,MARwB,8BAW5B,UACE,KAAKzM,EAAL,MACEwM,EAAevM,EAAUuM,GAAD,EAAxBA,SACAC,EAAaxM,EAAUwM,EAAY,EAAnCA,QACAA,EAAapM,EAAYoM,EAAzBA,QACA,MACF,KAAKzM,EAAL,KACEwM,EAAenM,EAAYmM,EAA3BA,OACAC,EAAapM,EAAYoM,EAAzBA,OACAD,EAAevM,EAAUa,EAAD,MAAxB0L,OACAC,EAAaxM,EAAUwM,EAAY,IAAnCA,SACA,MACF,QACED,EAAenM,EAAYmM,EAA3BA,OACAC,EAAapM,EAAYoM,EAAzBA,OACAD,EAAevM,EAAUuM,GAAD,EAAxBA,OACAC,EAAaxM,EAAUwM,EAAY,GAAnCA,OAGJ,MAAO,CAACD,EAAR,GcpD6BE,CAAerC,EAA5C,GA1B0C,oBA2BpCtH,GdsDiB,SAAC,EAAD,KAOvB,IAFA,IAAI4J,EAAoB,IAAIzM,KAA5B,GACM6C,EAAgB,CAAtB,GACO4J,EAAP,GAA8B,CAC5B,UACE,KAAK3M,EAAL,MACE2M,EAAc1M,EAAU0M,EAAa,EAArCA,SACA,MACF,KAAK3M,EAAL,KACE2M,EAAc1M,EAAU0M,EAAa,EAArCA,OACA,MACF,KAAK3M,EAAL,IACE2M,EAAc1M,EAAU0M,EAAa,EAArCA,OACA,MACF,KAAK3M,EAAL,QACE2M,EAAc1M,EAAU0M,EAAa,GAArCA,QACA,MACF,KAAK3M,EAAL,WACE2M,EAAc1M,EAAU0M,EAAa,EAArCA,QAGJ5J,UAEF,ScjFc6J,CA3B4B,YA2B1C,GACM7B,GAAMvF,iBAAZ,MAEMqH,GAAuB,CAC3B3J,YAD2B,EAE3BjB,UAAWc,UAFgB,EAG3BsH,QACAlI,UAJ2B,EAK3Bc,aAL2B,EAM3BF,SACAvB,cAEIsL,GAA+B,CACnC/J,SACAwB,OAFmC,EAGnCG,SAHmC,EAInCzB,aAJmC,EAKnCC,YALmC,EAMnC0B,WANmC,EAOnCb,YAEIgJ,GAA8B,CAClC1C,QACAlI,UAFkC,EAGlCiD,gBAHkC,EAIlClC,YAJkC,EAKlCH,SACAoJ,QANkC,EAOlCC,iBAPkC,EAQlCC,yBARkC,EASlCC,mBATkC,EAUlCC,2BAVkC,EAWlCtJ,aAXkC,EAYlC0D,YAZkC,EAalCwD,SAbkC,EAclC2B,WAdkC,EAelCf,OACAnG,WAhBkC,EAiBlCb,SAjBkC,EAkBlCiC,YAlBkC,EAmBlCsF,eACA0B,mBACAlF,gBACA+D,eACAtC,qBAGF,OACE,yBACE0D,MAAM,6BACNjL,MAAOkB,EAAcH,GAAMmK,OAC3BhL,OAAQe,EAAed,EAAYkI,EAAM6C,OACzCjH,IAAK8E,GACLnG,WAAYA,GAEZ/B,qCAPF,KAQEA,qCARF,KASEA,sCAVJ,OC3EWsK,GAA6C,SAAC,GAEpD,IADLC,EACI,EADJA,aAEA,OACE,yBAAKhL,UAAU,iBACb,4BACEA,UAAU,SACViL,QAAS,kBAAMD,EAAapN,EAASsN,cAFvC,kBAMA,4BAAQlL,UAAU,SAASiL,QAAS,kBAAMD,EAAapN,EAASuN,WAAhE,eAGA,4BAAQnL,UAAU,SAASiL,QAAS,kBAAMD,EAAapN,EAASwN,OAAhE,OAGA,4BAAQpL,UAAU,SAASiL,QAAS,kBAAMD,EAAapN,EAASyN,QAAhE,QAGA,4BAAQrL,UAAU,SAASiL,QAAS,kBAAMD,EAAapN,EAAS0N,SAAhE,WCbOC,GAAuD,SAAArK,GAClE,IACIsK,EAAyB,CAC3B7J,SAAU,OACVa,WACE,kFACF3B,aAAc,GACdd,UAAW,IAETmB,EAAMoB,WAAa1E,EAAS0N,MAC9BE,EAAQ1K,YAAc,IACbI,EAAMoB,WAAa1E,EAASyN,OACrCG,EAAQ1K,YAAc,KAZmD,MAejDL,IAAM4C,SAASnC,EAAM+G,OAf4B,mBAepEA,EAfoE,KAe7DwD,EAf6D,KAgBrEC,EAAgB,uCAAG,WAAOjM,GAAP,SAAAgJ,EAAA,0DACnBvH,EAAMgI,aADa,0CAGbhI,EAAMgI,aAAazJ,GAHN,wEAOrBgM,EAASxD,EAAM0D,KAAI,SAAA5C,GAAC,OAAKA,EAAErJ,KAAOD,EAAKC,GAAKD,EAAOsJ,MAP9B,yDAAH,sDAWhB6C,EAAoB,uCAAG,WAAOnM,GAAP,SAAAgJ,EAAA,0DACvBvH,EAAM0J,iBADiB,0CAGjB1J,EAAM0J,iBAAiBnL,GAHN,6DAKvBgM,EAASvK,EAAM+G,MAAM4D,SALE,aASzBJ,EAASxD,EAAM0D,KAAI,SAAA5C,GAAC,OAAKA,EAAErJ,KAAOD,EAAKC,GAAKD,EAAOsJ,MAT1B,yDAAH,sDAapB+C,EAAgB,uCAAG,WAAOrM,GAAP,SAAAgJ,EAAA,0DACnBvH,EAAMuI,aADa,gCAEfvI,EAAMuI,aAAahK,GAFJ,OAGrBgM,EAASxD,EAAM8D,QAAO,SAAAhD,GAAC,OAAIA,EAAErJ,KAAOD,EAAKC,OAHpB,2CAAH,sDAOtB,OACE,yBAAKM,UAAU,WACb,yBACEA,UAAU,aACVyD,MAAO,CACLjB,WAAYgJ,EAAQhJ,WACpBb,SAAU6J,EAAQ7J,WAGpB,yBACE3B,UAAU,oBACVyD,MAAO,CACL3D,OAAQ0L,EAAQ3K,eAGlB,yBACEb,UAAU,wBACVyD,MAAO,CACLuI,SAhEY,MAmEd,0BAAMC,KAAK,MAAMC,aAAW,WAAWlM,UAAU,mBAAjD,gBANF,QAWA,yBACEA,UAAU,wBACVyD,MAAO,CACLuI,SA3EY,MA8Ed,0BAAMC,KAAK,MAAMC,aAAW,WAAWlM,UAAU,mBAAjD,gBANF,QAWA,yBACEA,UAAU,wBACVyD,MAAO,CACLuI,SAtFY,MAyFd,0BAAMC,KAAK,MAAMC,aAAW,SAASlM,UAAU,mBAA/C,gBANF,OAYDiI,EAAM0D,KAAI,SAAA5C,GACT,OACE,yBACE/I,UAAU,iBACVyD,MAAO,CAAE3D,OAAQ0L,EAAQzL,YAEzB,yBAAKC,UAAU,mBAAmB+I,EAAE1C,MACpC,yBAAKrG,UAAU,mBAAmB+I,EAAEoD,MAAMC,gBAC1C,yBAAKpM,UAAU,mBAAmB+I,EAAEsD,IAAID,qBAKhD,yBAAK3I,MAAO,CAAE6I,UAAW,WACvB,kBAAC,GAAD,iBACMd,EACAtK,EAFN,CAGE+G,MAAOA,EACPiB,aAAcwC,EACdjC,aAAcqC,EACdlB,iBAAkBgB,QC7BbW,GA7FH,WACV,IAAMhC,EAAc,IAAIzM,KADR,EAEQ2C,IAAM4C,SAAmBzF,EAASwN,KAF1C,mBAEToB,EAFS,KAEHC,EAFG,KAGZxE,EAAgB,CAClB,CACEkE,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEN,IAAK,IAAIvO,KACPyM,EAAYmC,cACZnC,EAAYoC,WACZ,EACA,GACA,IAEFtG,KAAM,OACN3G,GAAI,SACJkN,SAAU,GACV/C,YAAY,GAEd,CACEsC,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEN,IAAK,IAAIvO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEtG,KAAM,WACN3G,GAAI,SACJkN,SAAU,GACVxE,aAAc,CAAC,WAEjB,CACE+D,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEN,IAAK,IAAIvO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEtG,KAAM,uBACN3G,GAAI,SACJkN,SAAU,GACVxE,aAAc,CAAC,WAEjB,CACE+D,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEN,IAAK,IAAIvO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,EAAG,EAAG,GACvEtG,KAAM,aACN3G,GAAI,SACJkN,SAAU,EACVxE,aAAc,CAAC,WAEjB,CACE+D,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,GACnEN,IAAK,IAAIvO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,IACjEtG,KAAM,SACN3G,GAAI,SACJkN,SAAU,GACVxE,aAAc,CAAC,WAEjB,CACE+D,MAAO,IAAIrO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,IACnEN,IAAK,IAAIvO,KAAKyM,EAAYmC,cAAenC,EAAYoC,WAAY,IACjEtG,KAAM,UACN3G,GAAI,SACJkN,SAAUrC,EAAYoC,WACtBvE,aAAc,CAAC,UACfnI,OAAQ,CAAEoE,cAAe,UAAWC,sBAAuB,aAqB/D,OACE,6BACE,kBAAC,GAAD,CAAc0G,aAAc,SAAA1I,GAAQ,OAAImK,EAAQnK,MAChD,kBAAC,GAAD,CACE2F,MAAOA,EACP3F,SAAUkK,EACVtD,aAvBa,SAACzJ,GAClB+J,QAAQqD,IAAI,qBAAuBpN,EAAKC,KAuBpC+J,aApBa,SAAChK,GAElB,IADaqN,OAAOC,QAAQ,iBACjB,KAAM,aAAetN,EAAKC,IAmBjCkL,iBAhBiB,SAACnL,GACtB+J,QAAQqD,IAAI,yBAA2BpN,EAAKC,KAgBxCgG,cAbW,SAACjG,GAChBuN,MAAM,4BAA8BvN,EAAKC,SC5E7CuN,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.b092aca9.chunk.js","sourcesContent":["export enum ViewMode {\n  QuarterDay = \"Quarter Day\",\n  HalfDay = \"Half Day\",\n  Day = \"Day\",\n  /** ISO-8601 week */\n  Week = \"Week\",\n  Month = \"Month\",\n}\nexport interface Task {\n  id: string;\n  name: string;\n  start: Date;\n  end: Date;\n  /**\n   * From 0 to 100\n   */\n  progress: number;\n  styles?: {\n    backgroundColor?: string;\n    backgroundSelectedColor?: string;\n    progressColor?: string;\n    progressSelectedColor?: string;\n  };\n  isDisabled?: boolean;\n  dependencies?: string[];\n}\n\nexport interface EventOption {\n  /**\n   * Time step value for date changes.\n   */\n  timeStep?: number;\n  onDoubleClick?: (task: Task) => any;\n  onDateChange?: (task: Task) => void | Promise<any>;\n  onProgressChange?: (task: Task) => void | Promise<any>;\n  onTaskDelete?: (task: Task) => void | Promise<any>;\n}\n\nexport interface DisplayOption {\n  viewMode?: ViewMode;\n  /**\n   * Specifies the month name language. Able formats: ISO 639-2, Java Locale\n   */\n  locale?: string;\n}\n\nexport interface StylingOption {\n  headerHeight?: number;\n  columnWidth?: number;\n  rowHeight?: number;\n  barCornerRadius?: number;\n  handleWidth?: number;\n  fontFamily?: string;\n  fontSize?: string;\n  /**\n   * How many of row width can be taken by task.\n   * From 0 to 100\n   */\n  barFill?: number;\n  barProgressColor?: string;\n  barProgressSelectedColor?: string;\n  barBackgroundColor?: string;\n  barBackgroundSelectedColor?: string;\n  arrowColor?: string;\n  arrowIndent?: number;\n  todayColor?: string;\n  getTooltipContent?: (\n    task: Task,\n    fontSize: string,\n    fontFamily: string\n  ) => JSX.Element;\n}\n\nexport interface GanttProps extends EventOption, DisplayOption, StylingOption {\n  tasks: Task[];\n}\n","import { Task, ViewMode } from \"../types/public-types\";\r\n\r\ntype DateHelperScales =\r\n  | \"year\"\r\n  | \"month\"\r\n  | \"day\"\r\n  | \"hour\"\r\n  | \"minute\"\r\n  | \"second\"\r\n  | \"millisecond\";\r\n\r\nexport const addToDate = (\r\n  date: Date,\r\n  quantity: number,\r\n  scale: DateHelperScales\r\n) => {\r\n  const newDate = new Date(\r\n    date.getFullYear() + (scale === \"year\" ? quantity : 0),\r\n    date.getMonth() + (scale === \"month\" ? quantity : 0),\r\n    date.getDate() + (scale === \"day\" ? quantity : 0),\r\n    date.getHours() + (scale === \"hour\" ? quantity : 0),\r\n    date.getMinutes() + (scale === \"minute\" ? quantity : 0),\r\n    date.getSeconds() + (scale === \"second\" ? quantity : 0),\r\n    date.getMilliseconds() + (scale === \"millisecond\" ? quantity : 0)\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const startOfDate = (date: Date, scale: DateHelperScales) => {\r\n  const scores = [\r\n    \"millisecond\",\r\n    \"second\",\r\n    \"minute\",\r\n    \"hour\",\r\n    \"day\",\r\n    \"month\",\r\n    \"year\",\r\n  ];\r\n\r\n  const shouldReset = (_scale: DateHelperScales) => {\r\n    const maxScore = scores.indexOf(scale);\r\n    return scores.indexOf(_scale) <= maxScore;\r\n  };\r\n  const newDate = new Date(\r\n    date.getFullYear(),\r\n    shouldReset(\"year\") ? 0 : date.getMonth(),\r\n    shouldReset(\"month\") ? 1 : date.getDate(),\r\n    shouldReset(\"day\") ? 0 : date.getHours(),\r\n    shouldReset(\"hour\") ? 0 : date.getMinutes(),\r\n    shouldReset(\"minute\") ? 0 : date.getSeconds(),\r\n    shouldReset(\"second\") ? 0 : date.getMilliseconds()\r\n  );\r\n  return newDate;\r\n};\r\n\r\nexport const ganttDateRange = (tasks: Task[], viewMode: ViewMode) => {\r\n  let newStartDate: Date = tasks[0].start;\r\n  let newEndDate: Date = tasks[0].end;\r\n  for (const task of tasks) {\r\n    if (task.start < newStartDate) {\r\n      newStartDate = task.start;\r\n    }\r\n    if (task.end > newEndDate) {\r\n      newEndDate = task.end;\r\n    }\r\n  }\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      newStartDate = addToDate(newStartDate, -1, \"month\");\r\n      newEndDate = addToDate(newEndDate, 1, \"year\");\r\n      newEndDate = startOfDate(newEndDate, \"year\");\r\n      break;\r\n    case ViewMode.Week:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(getMonday(newStartDate), -7, \"day\");\r\n      newEndDate = addToDate(newEndDate, 1.5, \"month\");\r\n      break;\r\n    default:\r\n      newStartDate = startOfDate(newStartDate, \"day\");\r\n      newEndDate = startOfDate(newEndDate, \"day\");\r\n      newStartDate = addToDate(newStartDate, -1, \"day\");\r\n      newEndDate = addToDate(newEndDate, 19, \"day\");\r\n      break;\r\n  }\r\n  return [newStartDate, newEndDate];\r\n};\r\n\r\nexport const seedDates = (\r\n  startDate: Date,\r\n  endDate: Date,\r\n  viewMode: ViewMode\r\n) => {\r\n  let currentDate: Date = new Date(startDate);\r\n  const dates: Date[] = [currentDate];\r\n  while (currentDate < endDate) {\r\n    switch (viewMode) {\r\n      case ViewMode.Month:\r\n        currentDate = addToDate(currentDate, 1, \"month\");\r\n        break;\r\n      case ViewMode.Week:\r\n        currentDate = addToDate(currentDate, 7, \"day\");\r\n        break;\r\n      case ViewMode.Day:\r\n        currentDate = addToDate(currentDate, 1, \"day\");\r\n        break;\r\n      case ViewMode.HalfDay:\r\n        currentDate = addToDate(currentDate, 12, \"hour\");\r\n        break;\r\n      case ViewMode.QuarterDay:\r\n        currentDate = addToDate(currentDate, 6, \"hour\");\r\n        break;\r\n    }\r\n    dates.push(currentDate);\r\n  }\r\n  return dates;\r\n};\r\n\r\nexport const getLocaleMonth = (date: Date, locale: string) => {\r\n  let bottomValue = new Intl.DateTimeFormat(locale, {\r\n    month: \"long\",\r\n  }).format(date);\r\n  bottomValue = bottomValue.replace(\r\n    bottomValue[0],\r\n    bottomValue[0].toLocaleUpperCase()\r\n  );\r\n  return bottomValue;\r\n};\r\n\r\n/**\r\n * Returns monday of current week\r\n * @param date date for modify\r\n */\r\nconst getMonday = (date: Date) => {\r\n  const day = date.getDay();\r\n  const diff = date.getDate() - day + (day === 0 ? -6 : 1); // adjust when day is sunday\r\n  return new Date(date.setDate(diff));\r\n};\r\n\r\nexport const getWeekNumberISO8601 = (date: Date) => {\r\n  const tmpDate = new Date(date.valueOf());\r\n  const dayNumber = (tmpDate.getDay() + 6) % 7;\r\n  tmpDate.setDate(tmpDate.getDate() - dayNumber + 3);\r\n  const firstThursday = tmpDate.valueOf();\r\n  tmpDate.setMonth(0, 1);\r\n  if (tmpDate.getDay() !== 4) {\r\n    tmpDate.setMonth(0, 1 + ((4 - tmpDate.getDay() + 7) % 7));\r\n  }\r\n  const weekNumber = (\r\n    1 + Math.ceil((firstThursday - tmpDate.valueOf()) / 604800000)\r\n  ).toString();\r\n\r\n  if (weekNumber.length === 1) {\r\n    return `0${weekNumber}`;\r\n  } else {\r\n    return weekNumber;\r\n  }\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport { addToDate } from \"../../helpers/date-helper\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridBodyProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  gridWidth: number;\r\n  rowHeight: number;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  todayColor: string;\r\n};\r\nexport const GridBody: React.FC<GridBodyProps> = ({\r\n  tasks,\r\n  dates,\r\n  rowHeight,\r\n  headerHeight,\r\n  gridWidth,\r\n  columnWidth,\r\n  todayColor,\r\n}) => {\r\n  let y = headerHeight;\r\n  const gridRows: ReactChild[] = [];\r\n  const rowLines: ReactChild[] = [];\r\n  for (const task of tasks) {\r\n    gridRows.push(\r\n      <rect\r\n        key={\"Row\" + task.id}\r\n        x=\"0\"\r\n        y={y}\r\n        width={gridWidth}\r\n        height={rowHeight}\r\n        className={styles.gridRow}\r\n      />\r\n    );\r\n    rowLines.push(\r\n      <line\r\n        key={\"RowLine\" + task.id}\r\n        x=\"0\"\r\n        y1={y + rowHeight}\r\n        x2={gridWidth}\r\n        y2={y + rowHeight}\r\n        className={styles.gridRowLine}\r\n      />\r\n    );\r\n    y += rowHeight;\r\n  }\r\n\r\n  const now = new Date();\r\n  let tickX = 0;\r\n  const ticks: ReactChild[] = [];\r\n  let today: ReactChild = <rect />;\r\n  for (let i = 0; i < dates.length; i++) {\r\n    const date = dates[i];\r\n    ticks.push(\r\n      <line\r\n        key={date.getTime()}\r\n        x1={tickX}\r\n        y1={headerHeight}\r\n        x2={tickX}\r\n        y2={y}\r\n        className={styles.gridTick}\r\n      />\r\n    );\r\n    if (\r\n      (i + 1 !== dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        dates[i + 1].getTime() >= now.getTime()) ||\r\n      // if current date is last\r\n      (i !== 0 &&\r\n        i + 1 === dates.length &&\r\n        date.getTime() < now.getTime() &&\r\n        addToDate(\r\n          date,\r\n          date.getTime() - dates[i - 1].getTime(),\r\n          \"millisecond\"\r\n        ).getTime() >= now.getTime())\r\n    ) {\r\n      today = (\r\n        <rect\r\n          x={tickX}\r\n          y={0}\r\n          width={columnWidth}\r\n          height={y}\r\n          fill={todayColor}\r\n        />\r\n      );\r\n    }\r\n    tickX += columnWidth;\r\n  }\r\n  return (\r\n    <g className=\"gridBody\">\r\n      <g className=\"rows\">{gridRows}</g>\r\n      <g className=\"rowLines\">{rowLines}</g>\r\n      <g className=\"ticks\">{ticks}</g>\r\n      <g className=\"today\">{today}</g>\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./grid.module.css\";\r\n\r\nexport type GridHeaderProps = {\r\n  gridWidth: number;\r\n  headerHeight: number;\r\n};\r\nexport const GridHeader: React.FC<GridHeaderProps> = ({\r\n  gridWidth,\r\n  headerHeight,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x=\"0\"\r\n      y=\"0\"\r\n      width={gridWidth}\r\n      height={headerHeight}\r\n      className={styles.gridHeader}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { GridBody, GridBodyProps } from \"./grid-body\";\r\nimport { GridHeader, GridHeaderProps } from \"./grid-header\";\r\n\r\nexport type GridProps = GridBodyProps & GridHeaderProps;\r\nexport const Grid: React.FC<GridProps> = props => {\r\n  return (\r\n    <g className=\"grid\">\r\n      <GridHeader {...props} />\r\n      <GridBody {...props} />\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\ntype TopPartOfCalendarProps = {\r\n  value: string;\r\n  x1Line: number;\r\n  y1Line: number;\r\n  y2Line: number;\r\n  xText: number;\r\n  yText: number;\r\n};\r\n\r\nexport const TopPartOfCalendar: React.FC<TopPartOfCalendarProps> = ({\r\n  value,\r\n  x1Line,\r\n  y1Line,\r\n  y2Line,\r\n  xText,\r\n  yText,\r\n}) => {\r\n  return (\r\n    <g className=\"calendarTop\">\r\n      <line\r\n        x1={x1Line}\r\n        y1={y1Line}\r\n        x2={x1Line}\r\n        y2={y2Line}\r\n        className={styles.calendarTopTick}\r\n        key={value + \"line\"}\r\n      />\r\n      <text\r\n        key={value + \"text\"}\r\n        y={yText}\r\n        x={xText}\r\n        className={styles.calendarTopText}\r\n      >\r\n        {value}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import React, { ReactChild } from \"react\";\r\nimport { ViewMode } from \"../../types/public-types\";\r\nimport { TopPartOfCalendar } from \"./top-part-of-calendar\";\r\nimport {\r\n  getLocaleMonth,\r\n  getWeekNumberISO8601,\r\n} from \"../../helpers/date-helper\";\r\nimport styles from \"./calendar.module.css\";\r\n\r\nexport type CalendarProps = {\r\n  dates: Date[];\r\n  locale: string;\r\n  viewMode: ViewMode;\r\n  headerHeight: number;\r\n  columnWidth: number;\r\n  fontFamily: string;\r\n  fontSize: string;\r\n};\r\n\r\nexport const Calendar: React.FC<CalendarProps> = ({\r\n  dates,\r\n  locale,\r\n  viewMode,\r\n  headerHeight,\r\n  columnWidth,\r\n  fontFamily,\r\n  fontSize,\r\n}) => {\r\n  const getCalendarValuesForMonth = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultWidth = columnWidth * 6;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = getLocaleMonth(date, locale);\r\n      bottomValues.push(\r\n        <text\r\n          key={bottomValue + date.getFullYear()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getFullYear() !== dates[i - 1].getFullYear()) {\r\n        const topValue = date.getFullYear().toString();\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={\r\n              topDefaultWidth + columnWidth * i - date.getMonth() * columnWidth\r\n            }\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForWeek = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    let weeksCount: number = 0;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = dates.length - 1; i >= 0; i--) {\r\n      const date = dates[i];\r\n      let topValue = \"\";\r\n      if (i === 0 || date.getMonth() !== dates[i - 1].getMonth()) {\r\n        // top\r\n        topValue = `${getLocaleMonth(date, locale)}, ${date.getFullYear()}`;\r\n      }\r\n      // bottom\r\n      const bottomValue = `W${getWeekNumberISO8601(date)}`;\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n\r\n      if (topValue) {\r\n        // if last day is new month\r\n        if (i !== dates.length - 1) {\r\n          topValues.push(\r\n            <TopPartOfCalendar\r\n              key={topValue}\r\n              value={topValue}\r\n              x1Line={columnWidth * i + weeksCount * columnWidth}\r\n              y1Line={0}\r\n              y2Line={topDefaultHeight}\r\n              xText={columnWidth * i + columnWidth * weeksCount * 0.5}\r\n              yText={topDefaultHeight * 0.9}\r\n            />\r\n          );\r\n        }\r\n        weeksCount = 0;\r\n      }\r\n      weeksCount++;\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForDay = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = date.getDate().toString();\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i + columnWidth * 0.5}\r\n          className={styles.calendarBottomText}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (\r\n        i + 1 !== dates.length &&\r\n        date.getMonth() !== dates[i + 1].getMonth()\r\n      ) {\r\n        const topValue = getLocaleMonth(date, locale);\r\n\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * (i + 1)}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * (i + 1) - date.getDate() * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n\r\n  const getCalendarValuesForOther = () => {\r\n    const topValues: ReactChild[] = [];\r\n    const bottomValues: ReactChild[] = [];\r\n    const ticks = viewMode === ViewMode.HalfDay ? 2 : 4;\r\n    const topDefaultHeight = headerHeight * 0.5;\r\n\r\n    for (let i = 0; i < dates.length; i++) {\r\n      const date = dates[i];\r\n      const bottomValue = Intl.DateTimeFormat(locale, {\r\n        hour: \"numeric\",\r\n      }).format(date);\r\n\r\n      bottomValues.push(\r\n        <text\r\n          key={date.getTime()}\r\n          y={headerHeight * 0.8}\r\n          x={columnWidth * i}\r\n          className={styles.calendarBottomText}\r\n          fontFamily={fontFamily}\r\n        >\r\n          {bottomValue}\r\n        </text>\r\n      );\r\n      if (i === 0 || date.getDate() !== dates[i - 1].getDate()) {\r\n        const topValue = `${date.getDate()} ${getLocaleMonth(date, locale)}`;\r\n        topValues.push(\r\n          <TopPartOfCalendar\r\n            key={topValue}\r\n            value={topValue}\r\n            x1Line={columnWidth * i + ticks * columnWidth}\r\n            y1Line={0}\r\n            y2Line={topDefaultHeight}\r\n            xText={columnWidth * i + ticks * columnWidth * 0.5}\r\n            yText={topDefaultHeight * 0.9}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return [topValues, bottomValues];\r\n  };\r\n  let topValues: ReactChild[] = [];\r\n  let bottomValues: ReactChild[] = [];\r\n  switch (viewMode) {\r\n    case ViewMode.Month:\r\n      [topValues, bottomValues] = getCalendarValuesForMonth();\r\n      break;\r\n    case ViewMode.Week:\r\n      [topValues, bottomValues] = getCalendarValuesForWeek();\r\n      break;\r\n    case ViewMode.Day:\r\n      [topValues, bottomValues] = getCalendarValuesForDay();\r\n      break;\r\n    default:\r\n      [topValues, bottomValues] = getCalendarValuesForOther();\r\n      break;\r\n  }\r\n  return (\r\n    <g className=\"calendar\" fontSize={fontSize} fontFamily={fontFamily}>\r\n      {bottomValues} {topValues}\r\n    </g>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarProgressHandleProps = {\r\n  progressPoint: string;\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarProgressHandle: React.FC<BarProgressHandleProps> = ({\r\n  progressPoint,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <polygon\r\n      className={styles.barHandle}\r\n      points={progressPoint}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styles from \"./bar.module.css\";\r\n\r\ntype BarDateHandleProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  barCornerRadius: number;\r\n  onMouseDown: (event: React.MouseEvent<SVGRectElement, MouseEvent>) => void;\r\n};\r\nexport const BarDateHandle: React.FC<BarDateHandleProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  barCornerRadius,\r\n  onMouseDown,\r\n}) => {\r\n  return (\r\n    <rect\r\n      x={x}\r\n      y={y}\r\n      width={width}\r\n      height={height}\r\n      className={styles.barHandle}\r\n      ry={barCornerRadius}\r\n      rx={barCornerRadius}\r\n      onMouseDown={onMouseDown}\r\n    />\r\n  );\r\n};\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport style from \"./bar.module.css\";\r\n\r\ntype BarDisplayProps = {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  isSelected: boolean;\r\n  progressWidth: number;\r\n  barCornerRadius: number;\r\n  text: string;\r\n  hasChild: boolean;\r\n  arrowIndent: number;\r\n  styles: {\r\n    backgroundColor: string;\r\n    backgroundSelectedColor: string;\r\n    progressColor: string;\r\n    progressSelectedColor: string;\r\n  };\r\n  onMouseDown: (event: React.MouseEvent<SVGPolygonElement, MouseEvent>) => void;\r\n};\r\nexport const BarDisplay: React.FC<BarDisplayProps> = ({\r\n  x,\r\n  y,\r\n  width,\r\n  height,\r\n  isSelected,\r\n  progressWidth,\r\n  barCornerRadius,\r\n  text,\r\n  hasChild,\r\n  arrowIndent,\r\n  styles,\r\n  onMouseDown,\r\n}) => {\r\n  const textRef = useRef<SVGTextElement>(null);\r\n  const [isTextInside, setIsTextInside] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (textRef.current)\r\n      setIsTextInside(textRef.current.getBBox().width < width);\r\n  }, [textRef, width]);\r\n\r\n  const getProcessColor = () => {\r\n    return isSelected ? styles.progressSelectedColor : styles.progressColor;\r\n  };\r\n\r\n  const getBarColor = () => {\r\n    return isSelected ? styles.backgroundSelectedColor : styles.backgroundColor;\r\n  };\r\n\r\n  const getX = () => {\r\n    return isTextInside\r\n      ? x + width * 0.5\r\n      : x + width + arrowIndent * +hasChild + arrowIndent * 0.2;\r\n  };\r\n\r\n  return (\r\n    <g onMouseDown={onMouseDown}>\r\n      <rect\r\n        x={x}\r\n        width={width}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getBarColor()}\r\n        className={style.barBackground}\r\n      />\r\n      <rect\r\n        x={x}\r\n        width={progressWidth}\r\n        y={y}\r\n        height={height}\r\n        ry={barCornerRadius}\r\n        rx={barCornerRadius}\r\n        fill={getProcessColor()}\r\n      />\r\n      <text\r\n        x={getX()}\r\n        y={y + height * 0.5}\r\n        className={\r\n          isTextInside\r\n            ? style.barLabel\r\n            : style.barLabel && style.barLabelOutside\r\n        }\r\n        ref={textRef}\r\n      >\r\n        {text}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n","import { Task } from \"../types/public-types\";\r\nimport { BarTask } from \"../types/bar-task\";\r\n\r\nexport const convertToBarTasks = (\r\n  tasks: Task[],\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  headerHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n) => {\r\n  let barTasks = tasks.map((t, i) => {\r\n    return convertToBarTask(\r\n      t,\r\n      i,\r\n      dates,\r\n      dateDelta,\r\n      columnWidth,\r\n      rowHeight,\r\n      taskHeight,\r\n      headerHeight,\r\n      barCornerRadius,\r\n      handleWidth,\r\n      barProgressColor,\r\n      barProgressSelectedColor,\r\n      barBackgroundColor,\r\n      barBackgroundSelectedColor\r\n    );\r\n  });\r\n\r\n  barTasks = barTasks.map((task, i) => {\r\n    const dependencies = task.dependencies || [];\r\n    for (let j = 0; j < dependencies.length; j++) {\r\n      const dependence = barTasks.findIndex(\r\n        value => value.id === dependencies[j]\r\n      );\r\n      if (dependence !== -1) barTasks[dependence].barChildren.push(i);\r\n    }\r\n    return task;\r\n  });\r\n\r\n  return barTasks;\r\n};\r\n\r\nexport const convertToBarTask = (\r\n  task: Task,\r\n  index: number,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  headerHeight: number,\r\n  barCornerRadius: number,\r\n  handleWidth: number,\r\n  barProgressColor: string,\r\n  barProgressSelectedColor: string,\r\n  barBackgroundColor: string,\r\n  barBackgroundSelectedColor: string\r\n): BarTask => {\r\n  const x1 = taskXCoordinate(task.start, dates, dateDelta, columnWidth);\r\n  const x2 = taskXCoordinate(task.end, dates, dateDelta, columnWidth);\r\n  const y = taskYCoordinate(index, rowHeight, taskHeight, headerHeight);\r\n  const styles = {\r\n    backgroundColor: barBackgroundColor,\r\n    backgroundSelectedColor: barBackgroundSelectedColor,\r\n    progressColor: barProgressColor,\r\n    progressSelectedColor: barProgressSelectedColor,\r\n    ...task.styles,\r\n  };\r\n  return {\r\n    ...task,\r\n    x1,\r\n    x2,\r\n    y,\r\n    index,\r\n    barCornerRadius,\r\n    handleWidth,\r\n    height: taskHeight,\r\n    barChildren: [],\r\n    styles,\r\n  };\r\n};\r\n\r\nexport const taskXCoordinate = (\r\n  xDate: Date,\r\n  dates: Date[],\r\n  dateDelta: number,\r\n  columnWidth: number\r\n) => {\r\n  const index = ~~(\r\n    (xDate.getTime() -\r\n      dates[0].getTime() +\r\n      xDate.getTimezoneOffset() -\r\n      dates[0].getTimezoneOffset()) /\r\n    dateDelta\r\n  );\r\n  const x = Math.round(\r\n    (index +\r\n      (xDate.getTime() -\r\n        dates[index].getTime() -\r\n        xDate.getTimezoneOffset() * 60 * 1000 +\r\n        dates[index].getTimezoneOffset() * 60 * 1000) /\r\n        dateDelta) *\r\n      columnWidth\r\n  );\r\n  return x;\r\n};\r\n\r\nexport const taskYCoordinate = (\r\n  index: number,\r\n  rowHeight: number,\r\n  taskHeight: number,\r\n  headerHeight: number\r\n) => {\r\n  const y = index * rowHeight + headerHeight + (rowHeight - taskHeight) / 2;\r\n  return y;\r\n};\r\n\r\nexport const progressWithByParams = (\r\n  taskX1: number,\r\n  taskX2: number,\r\n  progress: number\r\n) => {\r\n  return (taskX2 - taskX1) * progress * 0.01;\r\n};\r\n\r\nexport const progressByProgressWidth = (\r\n  progressWidth: number,\r\n  barTask: BarTask\r\n) => {\r\n  const barWidth = barTask.x2 - barTask.x1;\r\n  const progressPercent = Math.round((progressWidth * 100) / barWidth);\r\n  if (progressPercent >= 100) return 100;\r\n  else if (progressPercent <= 0) return 0;\r\n  else {\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const progressByX = (x: number, task: BarTask) => {\r\n  if (x >= task.x2) return 100;\r\n  else if (x <= task.x1) return 0;\r\n  else {\r\n    const barWidth = task.x2 - task.x1;\r\n    const progressPercent = Math.round(((x - task.x1) * 100) / barWidth);\r\n    return progressPercent;\r\n  }\r\n};\r\n\r\nexport const getProgressPoint = (\r\n  progressX: number,\r\n  taskY: number,\r\n  taskHeight: number\r\n) => {\r\n  const point = [\r\n    progressX - 5,\r\n    taskY + taskHeight,\r\n    progressX + 5,\r\n    taskY + taskHeight,\r\n    progressX,\r\n    taskY + taskHeight - 8.66,\r\n  ];\r\n  return point.join(\",\");\r\n};\r\n\r\nexport const startByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x >= task.x2 - task.handleWidth * 2) {\r\n    x = task.x2 - task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x1 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const endByX = (x: number, xStep: number, task: BarTask) => {\r\n  if (x <= task.x1 + task.handleWidth * 2) {\r\n    x = task.x1 + task.handleWidth * 2;\r\n  }\r\n  const steps = Math.round((x - task.x2) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX = task.x2 + additionalXValue;\r\n  return newX;\r\n};\r\n\r\nexport const moveByX = (x: number, xStep: number, task: BarTask) => {\r\n  const steps = Math.round((x - task.x1) / xStep);\r\n  const additionalXValue = steps * xStep;\r\n  const newX1 = task.x1 + additionalXValue;\r\n  const newX2 = newX1 + task.x2 - task.x1;\r\n  return [newX1, newX2];\r\n};\r\n\r\nexport const dateByX = (\r\n  x: number,\r\n  taskX: number,\r\n  taskDate: Date,\r\n  xStep: number,\r\n  timeStep: number\r\n) => {\r\n  let newDate = new Date(((x - taskX) / xStep) * timeStep + taskDate.getTime());\r\n  newDate = new Date(\r\n    newDate.getTime() +\r\n      (newDate.getTimezoneOffset() - taskDate.getTimezoneOffset()) * 60000\r\n  );\r\n  return newDate;\r\n};\r\n","import React, { useState } from \"react\";\nimport { Task } from \"../../types/public-types\";\nimport { BarProgressHandle } from \"./bar-progress-handle\";\nimport { BarDateHandle } from \"./bar-date-handle\";\nimport { BarDisplay } from \"./bar-display\";\nimport { BarTask } from \"../../types/bar-task\";\nimport { BarAction } from \"../Gantt/gantt-content\";\nimport {\n  progressWithByParams,\n  getProgressPoint,\n} from \"../../helpers/bar-helper\";\nimport styles from \"./bar.module.css\";\n\nexport type BarProps = {\n  task: BarTask;\n  arrowIndent: number;\n  onDoubleClick?: (task: Task) => any;\n  isProgressChangeable: boolean;\n  isDateChangeable: boolean;\n  handleMouseEvents: (\n    event:\n      | React.MouseEvent<SVGPolygonElement, MouseEvent>\n      | React.MouseEvent<SVGGElement, MouseEvent>\n      | React.MouseEvent<SVGRectElement, MouseEvent>,\n    eventType: BarAction,\n    task: BarTask\n  ) => void;\n  handleButtonSVGEvents: (\n    event: React.KeyboardEvent<SVGGElement>,\n    task: BarTask\n  ) => void;\n};\n\nexport const Bar: React.FC<BarProps> = ({\n  task,\n  arrowIndent,\n  onDoubleClick,\n  isProgressChangeable,\n  isDateChangeable,\n  handleMouseEvents,\n  handleButtonSVGEvents,\n}) => {\n  const [isSelected, setIsSelected] = useState(false);\n\n  const progressWidth = progressWithByParams(task.x1, task.x2, task.progress);\n  const progressPoint = getProgressPoint(\n    progressWidth + task.x1,\n    task.y,\n    task.height\n  );\n\n  return (\n    <g\n      className={styles.barWrapper}\n      onDoubleClick={() => {\n        !!onDoubleClick && onDoubleClick(task);\n      }}\n      tabIndex={0}\n      onKeyDown={e => {\n        handleButtonSVGEvents(e, task);\n      }}\n      onMouseEnter={e => {\n        handleMouseEvents(e, \"mouseenter\", task);\n      }}\n      onMouseLeave={e => {\n        handleMouseEvents(e, \"mouseleave\", task);\n      }}\n      onFocus={() => setIsSelected(true)}\n      onBlur={() => setIsSelected(false)}\n    >\n      <BarDisplay\n        x={task.x1}\n        y={task.y}\n        width={task.x2 - task.x1}\n        height={task.height}\n        progressWidth={progressWidth}\n        barCornerRadius={task.barCornerRadius}\n        text={task.name}\n        hasChild={task.barChildren.length > 0}\n        arrowIndent={arrowIndent}\n        styles={task.styles}\n        isSelected={isSelected}\n        onMouseDown={e => {\n          isDateChangeable && handleMouseEvents(e, \"move\", task);\n        }}\n      />\n      <g className=\"handleGroup\">\n        {isDateChangeable && (\n          <g>\n            {/* left */}\n            <BarDateHandle\n              x={task.x1 + 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                handleMouseEvents(e, \"start\", task);\n              }}\n            />\n            {/* right */}\n            <BarDateHandle\n              x={task.x2 - task.handleWidth - 1}\n              y={task.y + 1}\n              width={task.handleWidth}\n              height={task.height - 2}\n              barCornerRadius={task.barCornerRadius}\n              onMouseDown={e => {\n                handleMouseEvents(e, \"end\", task);\n              }}\n            />\n          </g>\n        )}\n        {isProgressChangeable && (\n          <BarProgressHandle\n            progressPoint={progressPoint}\n            onMouseDown={e => {\n              handleMouseEvents(e, \"progress\", task);\n            }}\n          />\n        )}\n      </g>\n    </g>\n  );\n};\n","import React from \"react\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\n\r\ntype ArrowProps = {\r\n  taskFrom: BarTask;\r\n  taskTo: BarTask;\r\n  rowHeight: number;\r\n  arrowIndent: number;\r\n};\r\nexport const Arrow: React.FC<ArrowProps> = ({\r\n  taskFrom,\r\n  taskTo,\r\n  rowHeight,\r\n  arrowIndent,\r\n}) => {\r\n  const indexCompare = taskFrom.index > taskTo.index ? -1 : 1;\r\n  const taskToEndPosition = taskTo.y + taskTo.height / 2;\r\n\r\n  const path = `M ${taskFrom.x2} ${taskFrom.y + taskFrom.height / 2} \r\n  h ${arrowIndent} \r\n  v ${(indexCompare * rowHeight) / 2} \r\n  H ${taskTo.x1 - arrowIndent} \r\n  V ${taskToEndPosition} \r\n  h ${arrowIndent}`;\r\n  const trianglePoints = `${taskTo.x1},${taskToEndPosition} \r\n  ${taskTo.x1 - 5},${taskToEndPosition - 5} \r\n  ${taskTo.x1 - 5},${taskToEndPosition + 5}`;\r\n  return (\r\n    <g className=\"arrow\">\r\n      <path strokeWidth=\"1.5\" d={path} fill=\"none\" />\r\n      <polygon points={trianglePoints} />\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { Task } from \"../../types/public-types\";\r\nimport styles from \"./tooltip.module.css\";\r\n\r\nexport type TooltipProps = {\r\n  x: number;\r\n  y: number;\r\n  task: Task;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  getTooltipContent?: (\r\n    task: Task,\r\n    fontSize: string,\r\n    fontFamily: string\r\n  ) => JSX.Element;\r\n};\r\nexport const Tooltip: React.FC<TooltipProps> = ({\r\n  x,\r\n  y,\r\n  task,\r\n  fontSize,\r\n  fontFamily,\r\n\r\n  getTooltipContent = getStandardTooltipContent,\r\n}) => {\r\n  const tooltipRef = useRef<HTMLDivElement | null>(null);\r\n  const [toolWidth, setToolWidth] = useState(1000);\r\n  const [relatedY, setRelatedY] = useState(y);\r\n  useEffect(() => {\r\n    if (tooltipRef.current) {\r\n      const height =\r\n        tooltipRef.current.offsetHeight +\r\n        tooltipRef.current.offsetHeight * 0.15;\r\n      setRelatedY(y - height);\r\n      setToolWidth(tooltipRef.current.scrollWidth * 1.1);\r\n    }\r\n  }, [tooltipRef, y]);\r\n  return (\r\n    <foreignObject x={x} y={relatedY} width={toolWidth} height={1000}>\r\n      <div ref={tooltipRef} className={styles.tooltipDetailsContainer}>\r\n        {getTooltipContent(task, fontSize, fontFamily)}\r\n      </div>\r\n    </foreignObject>\r\n  );\r\n};\r\n\r\nconst getStandardTooltipContent = (\r\n  task: Task,\r\n  fontSize: string,\r\n  fontFamily: string\r\n) => {\r\n  const style = {\r\n    fontSize,\r\n    fontFamily,\r\n  };\r\n  return (\r\n    <div className={styles.tooltipDefaultContainer} style={style}>\r\n      <b style={{ fontSize: fontSize + 6 }}>{`${\r\n        task.name\r\n      }: ${task.start.getDate()}-${\r\n        task.start.getMonth() + 1\r\n      }-${task.start.getFullYear()} - ${task.end.getDate()}-${\r\n        task.end.getMonth() + 1\r\n      }-${task.end.getFullYear()}`}</b>\r\n      <p className={styles.tooltipDefaultContainerParagraph}>{`Duration: ${~~(\r\n        (task.end.getTime() - task.start.getTime()) /\r\n        (1000 * 60 * 60 * 24)\r\n      )} day(s)`}</p>\r\n      <p\r\n        className={styles.tooltipDefaultContainerParagraph}\r\n      >{`Progress: ${task.progress} %`}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Task, EventOption } from \"../../types/public-types\";\r\nimport { Bar } from \"../Bar/bar\";\r\nimport { BarTask } from \"../../types/bar-task\";\r\nimport { Arrow } from \"../Other/arrow\";\r\nimport {\r\n  convertToBarTasks,\r\n  progressByX,\r\n  startByX,\r\n  endByX,\r\n  moveByX,\r\n  dateByX,\r\n} from \"../../helpers/bar-helper\";\r\nimport { Tooltip } from \"../Other/tooltip\";\r\n\r\nexport interface GanttTask extends Task {\r\n  x1: number;\r\n  x2: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n}\r\nexport type GanttContentProps = {\r\n  tasks: Task[];\r\n  dates: Date[];\r\n  rowHeight: number;\r\n  barCornerRadius: number;\r\n  columnWidth: number;\r\n  barFill: number;\r\n  barProgressColor: string;\r\n  barProgressSelectedColor: string;\r\n  barBackgroundColor: string;\r\n  barBackgroundSelectedColor: string;\r\n  headerHeight: number;\r\n  handleWidth: number;\r\n  svg: React.MutableRefObject<SVGSVGElement | null>;\r\n  timeStep: number;\r\n  arrowColor: string;\r\n  arrowIndent: number;\r\n  fontSize: string;\r\n  fontFamily: string;\r\n  getTooltipContent?: (\r\n    task: Task,\r\n    fontSize: string,\r\n    fontFamily: string\r\n  ) => JSX.Element;\r\n} & EventOption;\r\n\r\nexport type BarAction =\r\n  | \"progress\"\r\n  | \"end\"\r\n  | \"start\"\r\n  | \"move\"\r\n  | \"mouseenter\"\r\n  | \"mouseleave\"\r\n  | \"\";\r\n\r\ntype BarEvent = {\r\n  action: BarAction;\r\n  selectedTask: BarTask | null;\r\n};\r\nexport const GanttContent: React.FC<GanttContentProps> = ({\r\n  tasks,\r\n  rowHeight,\r\n  barCornerRadius,\r\n  columnWidth,\r\n  dates,\r\n  barFill,\r\n  barProgressColor,\r\n  barProgressSelectedColor,\r\n  barBackgroundColor,\r\n  barBackgroundSelectedColor,\r\n  headerHeight,\r\n  handleWidth,\r\n  arrowColor,\r\n  svg,\r\n  timeStep,\r\n  fontFamily,\r\n  fontSize,\r\n  arrowIndent,\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  getTooltipContent,\r\n}) => {\r\n  const [barEvent, setBarEvent] = useState<BarEvent>({\r\n    action: \"\",\r\n    selectedTask: null,\r\n  });\r\n  const [isSVGListen, setIsSVGListen] = useState(false);\r\n  const [barTasks, setBarTasks] = useState<BarTask[]>([]);\r\n  const [xStep, setXStep] = useState(0);\r\n  const [initEventX1Delta, setInitEventX1Delta] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const newXStep = (timeStep * columnWidth) / dateDelta;\r\n    if (newXStep !== xStep) {\r\n      setXStep(newXStep);\r\n    }\r\n  }, [tasks, rowHeight, barCornerRadius, columnWidth, dates, timeStep, xStep]);\r\n\r\n  useEffect(() => {\r\n    const dateDelta =\r\n      dates[1].getTime() -\r\n      dates[0].getTime() -\r\n      dates[1].getTimezoneOffset() * 60 * 1000 +\r\n      dates[0].getTimezoneOffset() * 60 * 1000;\r\n    const taskHeight = (rowHeight * barFill) / 100;\r\n\r\n    setBarTasks(\r\n      convertToBarTasks(\r\n        tasks,\r\n        dates,\r\n        dateDelta,\r\n        columnWidth,\r\n        rowHeight,\r\n        taskHeight,\r\n        headerHeight,\r\n        barCornerRadius,\r\n        handleWidth,\r\n        barProgressColor,\r\n        barProgressSelectedColor,\r\n        barBackgroundColor,\r\n        barBackgroundSelectedColor\r\n      )\r\n    );\r\n  }, [\r\n    tasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    timeStep,\r\n    barFill,\r\n    handleWidth,\r\n    headerHeight,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Method handles event in real time(mousemove) and on finish(mouseup)\r\n     */\r\n    const handleMouseSVGChangeEventsSubscribe = async (event: MouseEvent) => {\r\n      if (!barEvent.selectedTask || !barEvent.action || !svg || !svg.current)\r\n        return;\r\n\r\n      const selectedTask = barEvent.selectedTask;\r\n      const changedTask = { ...selectedTask } as BarTask;\r\n      switch (event.type) {\r\n        // On Event changing\r\n        case \"mousemove\": {\r\n          switch (barEvent.action) {\r\n            case \"progress\":\r\n              changedTask.progress = progressByX(event.offsetX, selectedTask);\r\n              break;\r\n            case \"start\": {\r\n              const newX1 = startByX(event.offsetX, xStep, selectedTask);\r\n              changedTask.x1 = newX1;\r\n              changedTask.start = dateByX(\r\n                newX1,\r\n                selectedTask.x1,\r\n                selectedTask.start,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              break;\r\n            }\r\n            case \"end\": {\r\n              const newX2 = endByX(event.offsetX, xStep, selectedTask);\r\n              changedTask.x2 = newX2;\r\n              changedTask.end = dateByX(\r\n                newX2,\r\n                selectedTask.x2,\r\n                selectedTask.end,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              break;\r\n            }\r\n            case \"move\": {\r\n              const [newMoveX1, newMoveX2] = moveByX(\r\n                event.offsetX - initEventX1Delta,\r\n                xStep,\r\n                selectedTask\r\n              );\r\n              changedTask.start = dateByX(\r\n                newMoveX1,\r\n                selectedTask.x1,\r\n                selectedTask.start,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              changedTask.end = dateByX(\r\n                newMoveX2,\r\n                selectedTask.x2,\r\n                selectedTask.end,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              changedTask.x1 = newMoveX1;\r\n              changedTask.x2 = newMoveX2;\r\n              break;\r\n            }\r\n          }\r\n\r\n          // Update internal state\r\n          setBarTasks(\r\n            barTasks.map(t => (t.id === changedTask.id ? changedTask : t))\r\n          );\r\n          setBarEvent({ ...barEvent, selectedTask: changedTask });\r\n          break;\r\n        }\r\n\r\n        // On finish Event\r\n        case \"mouseup\": {\r\n          let eventForExecution: (\r\n            task: Task\r\n          ) => void | Promise<void> = () => {};\r\n          switch (barEvent.action) {\r\n            case \"progress\":\r\n              changedTask.progress = progressByX(event.offsetX, selectedTask);\r\n              if (onProgressChange) {\r\n                eventForExecution = onProgressChange;\r\n              }\r\n              break;\r\n            case \"start\": {\r\n              const newX1 = startByX(event.offsetX, xStep, selectedTask);\r\n              changedTask.start = dateByX(\r\n                newX1,\r\n                selectedTask.x1,\r\n                selectedTask.start,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              if (onDateChange && newX1 !== selectedTask.x1) {\r\n                eventForExecution = onDateChange;\r\n              }\r\n              break;\r\n            }\r\n            case \"end\": {\r\n              const newX2 = endByX(event.offsetX, xStep, selectedTask);\r\n              changedTask.end = dateByX(\r\n                newX2,\r\n                selectedTask.x2,\r\n                selectedTask.end,\r\n                xStep,\r\n                timeStep\r\n              );\r\n\r\n              if (onDateChange && newX2 !== selectedTask.x2) {\r\n                eventForExecution = onDateChange;\r\n              }\r\n              break;\r\n            }\r\n            case \"move\": {\r\n              const [newMoveX1, newMoveX2] = moveByX(\r\n                event.offsetX - initEventX1Delta,\r\n                xStep,\r\n                selectedTask\r\n              );\r\n              changedTask.start = dateByX(\r\n                newMoveX1,\r\n                selectedTask.x1,\r\n                selectedTask.start,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              changedTask.end = dateByX(\r\n                newMoveX2,\r\n                selectedTask.x2,\r\n                selectedTask.end,\r\n                xStep,\r\n                timeStep\r\n              );\r\n              if (\r\n                onDateChange &&\r\n                newMoveX1 !== selectedTask.x1 &&\r\n                newMoveX2 !== selectedTask.x2\r\n              ) {\r\n                eventForExecution = onDateChange;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n\r\n          setBarEvent({ action: \"\", selectedTask: null });\r\n          setIsSVGListen(false);\r\n          svg.current.removeEventListener(\r\n            \"mousemove\",\r\n            handleMouseSVGChangeEventsSubscribe\r\n          );\r\n          svg.current.removeEventListener(\r\n            \"mouseup\",\r\n            handleMouseSVGChangeEventsSubscribe\r\n          );\r\n\r\n          // If update successful - update Gantt state, otherwise we shell back old Bar state\r\n          await eventForExecution(changedTask);\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n    if (\r\n      barEvent.selectedTask &&\r\n      barEvent.action &&\r\n      !isSVGListen &&\r\n      svg &&\r\n      svg.current\r\n    ) {\r\n      setIsSVGListen(true);\r\n      svg.current.addEventListener(\r\n        \"mousemove\",\r\n        handleMouseSVGChangeEventsSubscribe\r\n      );\r\n      svg.current.addEventListener(\r\n        \"mouseup\",\r\n        handleMouseSVGChangeEventsSubscribe\r\n      );\r\n    }\r\n  }, [\r\n    barEvent,\r\n    isSVGListen,\r\n    xStep,\r\n    svg,\r\n    initEventX1Delta,\r\n    barTasks,\r\n    onProgressChange,\r\n    timeStep,\r\n    onDateChange,\r\n  ]);\r\n\r\n  /**\r\n   * Method is Start point of task change\r\n   * @param event init mouse event\r\n   * @param eventType\r\n   * @param task events task\r\n   */\r\n  const handleMouseEvents = (\r\n    event:\r\n      | React.MouseEvent<SVGPolygonElement, MouseEvent>\r\n      | React.MouseEvent<SVGRectElement, MouseEvent>\r\n      | React.MouseEvent<SVGGElement, MouseEvent>,\r\n    eventType: BarAction,\r\n    task: BarTask\r\n  ) => {\r\n    switch (event.type) {\r\n      case \"mousedown\":\r\n        setBarEvent({ ...barEvent, selectedTask: task, action: eventType });\r\n        setInitEventX1Delta(event.nativeEvent.offsetX - task.x1);\r\n        event.stopPropagation();\r\n        break;\r\n      case \"mouseleave\":\r\n        console.log(\"mouseleave\");\r\n        if (!barEvent.action)\r\n          setBarEvent({ ...barEvent, selectedTask: null, action: \"\" });\r\n        break;\r\n      case \"mouseenter\":\r\n        if (!barEvent.selectedTask) {\r\n          setBarEvent({ ...barEvent, selectedTask: task, action: \"\" });\r\n        }\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Method handles Bar keyboard events\r\n   * @param event\r\n   * @param task\r\n   */\r\n  const handleButtonSVGEvents = async (\r\n    event: React.KeyboardEvent<SVGGElement>,\r\n    task: BarTask\r\n  ) => {\r\n    if (task.isDisabled) return;\r\n    switch (event.key) {\r\n      case \"Delete\": {\r\n        if (onTaskDelete) {\r\n          onTaskDelete(task);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <g className=\"content\">\r\n      <g className=\"arrows\" fill={arrowColor} stroke={arrowColor}>\r\n        {barTasks.map(task => {\r\n          return task.barChildren.map(child => {\r\n            return (\r\n              <Arrow\r\n                key={`Arrow from ${task.id} to ${barTasks[child].id}`}\r\n                taskFrom={task}\r\n                taskTo={barTasks[child]}\r\n                rowHeight={rowHeight}\r\n                arrowIndent={arrowIndent}\r\n              />\r\n            );\r\n          });\r\n        })}\r\n      </g>\r\n      <g className=\"bar\" fontFamily={fontFamily} fontSize={fontSize}>\r\n        {barTasks.map(task => {\r\n          return (\r\n            <Bar\r\n              task={task}\r\n              arrowIndent={arrowIndent}\r\n              isProgressChangeable={!!onProgressChange && !task.isDisabled}\r\n              onDoubleClick={onDoubleClick}\r\n              isDateChangeable={!!onDateChange && !task.isDisabled}\r\n              handleMouseEvents={handleMouseEvents}\r\n              handleButtonSVGEvents={handleButtonSVGEvents}\r\n              key={task.id}\r\n            />\r\n          );\r\n        })}\r\n      </g>\r\n      <g className=\"toolTip\">\r\n        {barEvent.selectedTask &&\r\n          barEvent.action !== \"end\" &&\r\n          barEvent.action !== \"start\" && (\r\n            <Tooltip\r\n              x={barEvent.selectedTask.x2 + columnWidth + arrowIndent}\r\n              y={barEvent.selectedTask.y + rowHeight}\r\n              task={barEvent.selectedTask}\r\n              fontFamily={fontFamily}\r\n              fontSize={fontSize}\r\n              getTooltipContent={getTooltipContent}\r\n            />\r\n          )}\r\n      </g>\r\n    </g>\r\n  );\r\n};\r\n","import React, { useRef } from \"react\";\r\nimport { ViewMode, GanttProps } from \"../../types/public-types\";\r\nimport { Grid, GridProps } from \"../Grid/grid\";\r\nimport { Calendar, CalendarProps } from \"../Calendar/calendar\";\r\nimport { GanttContent, GanttContentProps } from \"./gantt-content\";\r\nimport { ganttDateRange, seedDates } from \"../../helpers/date-helper\";\r\n\r\nexport const Gantt: React.SFC<GanttProps> = ({\r\n  tasks,\r\n  headerHeight = 50,\r\n  columnWidth = 60,\r\n  rowHeight = 50,\r\n  viewMode = ViewMode.Day,\r\n  locale = \"en-GB\",\r\n  barFill = 60,\r\n  barCornerRadius = 3,\r\n  barProgressColor = \"#a3a3ff\",\r\n  barProgressSelectedColor = \"#8282f5\",\r\n  barBackgroundColor = \"#b8c2cc\",\r\n  barBackgroundSelectedColor = \"#aeb8c2\",\r\n  handleWidth = 8,\r\n  timeStep = 300000,\r\n  arrowColor = \"grey\",\r\n  fontFamily = \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n  fontSize = \"14px\",\r\n  arrowIndent = 20,\r\n  todayColor = \"rgba(252, 248, 227, 0.5)\",\r\n  onDateChange,\r\n  onProgressChange,\r\n  onDoubleClick,\r\n  onTaskDelete,\r\n  getTooltipContent,\r\n}) => {\r\n  const [startDate, endDate] = ganttDateRange(tasks, viewMode);\r\n  const dates = seedDates(startDate, endDate, viewMode);\r\n  const svg = useRef<SVGSVGElement | null>(null);\r\n\r\n  const gridProps: GridProps = {\r\n    columnWidth,\r\n    gridWidth: dates.length * columnWidth,\r\n    tasks,\r\n    rowHeight,\r\n    headerHeight,\r\n    dates,\r\n    todayColor,\r\n  };\r\n  const calendarProps: CalendarProps = {\r\n    dates,\r\n    locale,\r\n    viewMode,\r\n    headerHeight,\r\n    columnWidth,\r\n    fontFamily,\r\n    fontSize,\r\n  };\r\n  const barProps: GanttContentProps = {\r\n    tasks,\r\n    rowHeight,\r\n    barCornerRadius,\r\n    columnWidth,\r\n    dates,\r\n    barFill,\r\n    barProgressColor,\r\n    barProgressSelectedColor,\r\n    barBackgroundColor,\r\n    barBackgroundSelectedColor,\r\n    headerHeight,\r\n    handleWidth,\r\n    timeStep,\r\n    arrowColor,\r\n    svg,\r\n    fontFamily,\r\n    fontSize,\r\n    arrowIndent,\r\n    onDateChange,\r\n    onProgressChange,\r\n    onDoubleClick,\r\n    onTaskDelete,\r\n    getTooltipContent,\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width={columnWidth * dates.length}\r\n      height={headerHeight + rowHeight * tasks.length}\r\n      ref={svg}\r\n      fontFamily={fontFamily}\r\n    >\r\n      <Grid {...gridProps} />\r\n      <Calendar {...calendarProps} />\r\n      <GanttContent {...barProps} />\r\n    </svg>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport { ViewMode } from \"gantt-task-react\";\r\ntype ViewSwitcherProps = {\r\n  onViewChange: (viewMode: ViewMode) => void;\r\n};\r\nexport const ViewSwitcher: React.SFC<ViewSwitcherProps> = ({\r\n  onViewChange,\r\n}) => {\r\n  return (\r\n    <div className=\"ViewContainer\">\r\n      <button\r\n        className=\"Button\"\r\n        onClick={() => onViewChange(ViewMode.QuarterDay)}\r\n      >\r\n        Quarter of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.HalfDay)}>\r\n        Half of Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Day)}>\r\n        Day\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Week)}>\r\n        Week\r\n      </button>\r\n      <button className=\"Button\" onClick={() => onViewChange(ViewMode.Month)}>\r\n        Month\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"gantt-task-react/dist/index.css\";\r\nimport {\r\n  Gantt,\r\n  Task,\r\n  EventOption,\r\n  StylingOption,\r\n  ViewMode,\r\n  DisplayOption,\r\n} from \"gantt-task-react\";\r\n\r\n//Gantt with Custom table example\r\ntype GanttTableExampleProps = { tasks: Task[] } & EventOption & DisplayOption;\r\nexport const GanttTableExample: React.SFC<GanttTableExampleProps> = props => {\r\n  const gridColumnWidth = 150;\r\n  let options: StylingOption = {\r\n    fontSize: \"14px\",\r\n    fontFamily:\r\n      \"Arial, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue\",\r\n    headerHeight: 50,\r\n    rowHeight: 50,\r\n  };\r\n  if (props.viewMode === ViewMode.Month) {\r\n    options.columnWidth = 300;\r\n  } else if (props.viewMode === ViewMode.Week) {\r\n    options.columnWidth = 250;\r\n  }\r\n\r\n  const [tasks, setTasks] = React.useState(props.tasks);\r\n  const onTaskDateChange = async (task: Task) => {\r\n    if (props.onDateChange) {\r\n      try {\r\n        await props.onDateChange(task);\r\n      } catch (e) {\r\n        throw e;\r\n      }\r\n      setTasks(tasks.map(t => (t.id === task.id ? task : t)));\r\n    }\r\n  };\r\n\r\n  const onTaskProgressChange = async (task: Task) => {\r\n    if (props.onProgressChange) {\r\n      try {\r\n        await props.onProgressChange(task);\r\n      } catch (e) {\r\n        setTasks(props.tasks.slice());\r\n        throw e;\r\n      }\r\n\r\n      setTasks(tasks.map(t => (t.id === task.id ? task : t)));\r\n    }\r\n  };\r\n\r\n  const onTaskItemDelete = async (task: Task) => {\r\n    if (props.onTaskDelete) {\r\n      await props.onTaskDelete(task);\r\n      setTasks(tasks.filter(t => t.id !== task.id));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Wrapper\">\r\n      <div\r\n        className=\"GanttTable\"\r\n        style={{\r\n          fontFamily: options.fontFamily,\r\n          fontSize: options.fontSize,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"GanttTable-header\"\r\n          style={{\r\n            height: options.headerHeight,\r\n          }}\r\n        >\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"fromDate\" className=\"GanttTable-icon\">\r\n              📃\r\n            </span>\r\n            Name\r\n          </div>\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"fromDate\" className=\"GanttTable-icon\">\r\n              📅\r\n            </span>\r\n            From\r\n          </div>\r\n          <div\r\n            className=\"GanttTable-headerItem\"\r\n            style={{\r\n              minWidth: gridColumnWidth,\r\n            }}\r\n          >\r\n            <span role=\"img\" aria-label=\"toDate\" className=\"GanttTable-icon\">\r\n              📅\r\n            </span>\r\n            To\r\n          </div>\r\n        </div>\r\n        {tasks.map(t => {\r\n          return (\r\n            <div\r\n              className=\"GanttTable-row\"\r\n              style={{ height: options.rowHeight }}\r\n            >\r\n              <div className=\"GanttTable-cell\">{t.name}</div>\r\n              <div className=\"GanttTable-cell\">{t.start.toDateString()}</div>\r\n              <div className=\"GanttTable-cell\">{t.end.toDateString()}</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div style={{ overflowX: \"scroll\" }}>\r\n        <Gantt\r\n          {...options}\r\n          {...props}\r\n          tasks={tasks}\r\n          onDateChange={onTaskDateChange}\r\n          onTaskDelete={onTaskItemDelete}\r\n          onProgressChange={onTaskProgressChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport \"gantt-task-react/dist/index.css\";\nimport { Task, ViewMode } from \"gantt-task-react\";\nimport { ViewSwitcher } from \"./components/view-switcher\";\nimport { GanttTableExample } from \"./components/gantt-table\";\n\n//Init\nconst App = () => {\n  const currentDate = new Date();\n  const [view, setView] = React.useState<ViewMode>(ViewMode.Day);\n  let tasks: Task[] = [\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 1),\n      end: new Date(\n        currentDate.getFullYear(),\n        currentDate.getMonth(),\n        2,\n        12,\n        28\n      ),\n      name: \"Idea\",\n      id: \"Task 0\",\n      progress: 45,\n      isDisabled: true,\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 2),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4, 0, 0),\n      name: \"Research\",\n      id: \"Task 1\",\n      progress: 25,\n      dependencies: [\"Task 0\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 4),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8, 0, 0),\n      name: \"Discussion with team\",\n      id: \"Task 2\",\n      progress: 10,\n      dependencies: [\"Task 1\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 9, 0, 0),\n      name: \"Developing\",\n      id: \"Task 3\",\n      progress: 2,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 8),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 10),\n      name: \"Review\",\n      id: \"Task 4\",\n      progress: 70,\n      dependencies: [\"Task 2\"],\n    },\n    {\n      start: new Date(currentDate.getFullYear(), currentDate.getMonth(), 15),\n      end: new Date(currentDate.getFullYear(), currentDate.getMonth(), 26),\n      name: \"Release\",\n      id: \"Task 6\",\n      progress: currentDate.getMonth(),\n      dependencies: [\"Task 4\"],\n      styles: { progressColor: \"#ffbb54\", progressSelectedColor: \"#ff9e0d\" },\n    },\n  ];\n\n  let onTaskChange = (task: Task) => {\n    console.log(\"On date change Id:\" + task.id);\n  };\n\n  let onTaskDelete = (task: Task) => {\n    const conf = window.confirm(\"Are you sure?\");\n    if (!conf) throw \"No del Id:\" + task.id;\n  };\n\n  let onProgressChange = (task: Task) => {\n    console.log(\"On progress change Id:\" + task.id);\n  };\n\n  let onDblClick = (task: Task) => {\n    alert(\"On Double Click event Id:\" + task.id);\n  };\n\n  return (\n    <div>\n      <ViewSwitcher onViewChange={viewMode => setView(viewMode)} />\n      <GanttTableExample\n        tasks={tasks}\n        viewMode={view}\n        onDateChange={onTaskChange}\n        onTaskDelete={onTaskDelete}\n        onProgressChange={onProgressChange}\n        onDoubleClick={onDblClick}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}